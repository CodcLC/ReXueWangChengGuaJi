
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/UITips.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b8ba3ngR21FuYdxTm0/H8bV', 'UITips');
// scripts/UITips.js

"use strict";

var t = require;
var e = module;
var o = exports;

var _a,
    i = void 0 && (void 0).__extends || (_a = function a(t, e) {
  return (_a = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (t, e) {
    t.__proto__ = e;
  } || function (t, e) {
    for (var o in e) {
      Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
    }
  })(t, e);
}, function (t, e) {
  function o() {
    this.constructor = t;
  }

  _a(t, e), t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o());
}),
    r = void 0 && (void 0).__decorate || function (t, e, o, a) {
  var i,
      r = arguments.length,
      n = r < 3 ? e : null === a ? a = Object.getOwnPropertyDescriptor(e, o) : a;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) n = Reflect.decorate(t, e, o, a);else for (var s = t.length - 1; s >= 0; s--) {
    (i = t[s]) && (n = (r < 3 ? i(n) : r > 3 ? i(e, o, n) : i(e, o)) || n);
  }
  return r > 3 && n && Object.defineProperty(e, o, n), n;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});

var n = t("BaseUI"),
    s = cc._decorator,
    c = s.ccclass,
    l = s.property,
    u = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    return e.tipsNode = null, e.tips = null, e;
  }

  return i(e, t), e.prototype.init = function (t) {
    this.str = this.T(t);
  }, e.prototype.uiRefresh = function (t) {
    this.str = this.T(t), this.tweenAction.stop(), this.tipsNode.setPosition(0, 200), this.tipsNode.scaleY = 0, this.tips.string = t, this.tweenAction.start();
  }, e.prototype.onLoad = function () {
    var t = this;
    this.tweenAction = cc.tween(this.tipsNode).to(.2, {
      scaleY: 1
    }).delay(1).by(1.2, {
      position: new cc.Vec3(0, 100)
    }).call(function () {
      t.closeUI();
    });
  }, e.prototype.start = function () {
    this.tipsNode.opacity = 255, this.tweenAction.stop(), this.tipsNode.setPosition(0, 200), this.tipsNode.scaleY = 0, this.tips.string = this.str, this.tweenAction.start();
  }, r([l({
    type: cc.Node,
    tooltip: "layout节点"
  })], e.prototype, "tipsNode", void 0), r([l({
    type: cc.RichText,
    tooltip: "文字"
  })], e.prototype, "tips", void 0), r([c], e);
}(n["default"]);

o["default"] = u;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcVUlUaXBzLmpzIl0sIm5hbWVzIjpbInQiLCJyZXF1aXJlIiwiZSIsIm1vZHVsZSIsIm8iLCJleHBvcnRzIiwiYSIsImkiLCJfX2V4dGVuZHMiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJyIiwiX19kZWNvcmF0ZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsIm4iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJzIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImNjIiwiX2RlY29yYXRvciIsImMiLCJjY2NsYXNzIiwibCIsInByb3BlcnR5IiwidSIsImFwcGx5IiwidGlwc05vZGUiLCJ0aXBzIiwiaW5pdCIsInN0ciIsIlQiLCJ1aVJlZnJlc2giLCJ0d2VlbkFjdGlvbiIsInN0b3AiLCJzZXRQb3NpdGlvbiIsInNjYWxlWSIsInN0cmluZyIsInN0YXJ0Iiwib25Mb2FkIiwidHdlZW4iLCJ0byIsImRlbGF5IiwiYnkiLCJwb3NpdGlvbiIsIlZlYzMiLCJjbG9zZVVJIiwib3BhY2l0eSIsInR5cGUiLCJOb2RlIiwidG9vbHRpcCIsIlJpY2hUZXh0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLENBQUMsR0FBR0MsT0FBUjtBQUNBLElBQUlDLENBQUMsR0FBR0MsTUFBUjtBQUNBLElBQUlDLENBQUMsR0FBR0MsT0FBUjs7QUFDQSxJQUFJQyxFQUFKO0FBQUEsSUFBT0MsQ0FBQyxHQUFHLFVBQVEsU0FBS0MsU0FBYixLQUEyQkYsRUFBQyxHQUFHLFdBQVNOLENBQVQsRUFBWUUsQ0FBWixFQUFlO0VBQ3JELE9BQU8sQ0FBQ0ksRUFBQyxHQUFHRyxNQUFNLENBQUNDLGNBQVAsSUFBeUI7SUFDakNDLFNBQVMsRUFBRTtF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LENBQU4sQ0F0Q0Q7QUF1Q0gsQ0E5Q0csQ0E4Q0RvQixDQUFDLFdBOUNBLENBSko7O0FBbURBbEIsQ0FBQyxXQUFELEdBQVkrQixDQUFaIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdCA9IHJlcXVpcmU7XG52YXIgZSA9IG1vZHVsZTtcbnZhciBvID0gZXhwb3J0cztcbnZhciBhLCBpID0gdGhpcyAmJiB0aGlzLl9fZXh0ZW5kcyB8fCAoYSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICByZXR1cm4gKGEgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwge1xuICAgICAgICBfX3Byb3RvX186IFtdXG4gICAgfVxuICAgIGluc3RhbmNlb2YgQXJyYXkgJiZcbiAgICBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHQuX19wcm90b19fID0gZVxuICAgIH0gfHxcbiAgICBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGZvciAodmFyIG8gaW4gZSkgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIG8pICYmICh0W29dID0gZVtvXSlcbiAgICB9KSh0LCBlKVxufSxcbmZ1bmN0aW9uKHQsIGUpIHtcbiAgICBmdW5jdGlvbiBvKCkge1xuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yID0gdFxuICAgIH1cbiAgICBhKHQsIGUpLFxuICAgIHQucHJvdG90eXBlID0gbnVsbCA9PT0gZSA/IE9iamVjdC5jcmVhdGUoZSkgOiAoby5wcm90b3R5cGUgPSBlLnByb3RvdHlwZSwgbmV3IG8pXG59KSxcbnIgPSB0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSB8fFxuZnVuY3Rpb24odCwgZSwgbywgYSkge1xuICAgIHZhciBpLCByID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICBuID0gciA8IDMgPyBlOiBudWxsID09PSBhID8gYSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgbykgOiBhO1xuICAgIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBSZWZsZWN0ICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSkgbiA9IFJlZmxlY3QuZGVjb3JhdGUodCwgZSwgbywgYSk7XG4gICAgZWxzZSBmb3IgKHZhciBzID0gdC5sZW5ndGggLSAxOyBzID49IDA7IHMtLSkoaSA9IHRbc10pICYmIChuID0gKHIgPCAzID8gaShuKSA6IHIgPiAzID8gaShlLCBvLCBuKSA6IGkoZSwgbykpIHx8IG4pO1xuICAgIHJldHVybiByID4gMyAmJiBuICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBvLCBuKSxcbiAgICBuXG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6ICEwXG59KTtcbnZhciBuID0gdChcIkJhc2VVSVwiKSxcbnMgPSBjYy5fZGVjb3JhdG9yLFxuYyA9IHMuY2NjbGFzcyxcbmwgPSBzLnByb3BlcnR5LFxudSA9IGZ1bmN0aW9uKHQpIHtcbiAgICBmdW5jdGlvbiBlKCkge1xuICAgICAgICB2YXIgZSA9IG51bGwgIT09IHQgJiYgdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIHJldHVybiBlLnRpcHNOb2RlID0gbnVsbCxcbiAgICAgICAgZS50aXBzID0gbnVsbCxcbiAgICAgICAgZVxuICAgIH1cbiAgICByZXR1cm4gaShlLCB0KSxcbiAgICBlLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLnN0ciA9IHRoaXMuVCh0KVxuICAgIH0sXG4gICAgZS5wcm90b3R5cGUudWlSZWZyZXNoID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLnN0ciA9IHRoaXMuVCh0KSxcbiAgICAgICAgdGhpcy50d2VlbkFjdGlvbi5zdG9wKCksXG4gICAgICAgIHRoaXMudGlwc05vZGUuc2V0UG9zaXRpb24oMCwgMjAwKSxcbiAgICAgICAgdGhpcy50aXBzTm9kZS5zY2FsZVkgPSAwLFxuICAgICAgICB0aGlzLnRpcHMuc3RyaW5nID0gdCxcbiAgICAgICAgdGhpcy50d2VlbkFjdGlvbi5zdGFydCgpXG4gICAgfSxcbiAgICBlLnByb3RvdHlwZS5vbkxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICB0aGlzLnR3ZWVuQWN0aW9uID0gY2MudHdlZW4odGhpcy50aXBzTm9kZSkudG8oLjIsIHtcbiAgICAgICAgICAgIHNjYWxlWTogMVxuICAgICAgICB9KS5kZWxheSgxKS5ieSgxLjIsIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgY2MuVmVjMygwLCAxMDApXG4gICAgICAgIH0pLmNhbGwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0LmNsb3NlVUkoKVxuICAgICAgICB9KVxuICAgIH0sXG4gICAgZS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy50aXBzTm9kZS5vcGFjaXR5ID0gMjU1LFxuICAgICAgICB0aGlzLnR3ZWVuQWN0aW9uLnN0b3AoKSxcbiAgICAgICAgdGhpcy50aXBzTm9kZS5zZXRQb3NpdGlvbigwLCAyMDApLFxuICAgICAgICB0aGlzLnRpcHNOb2RlLnNjYWxlWSA9IDAsXG4gICAgICAgIHRoaXMudGlwcy5zdHJpbmcgPSB0aGlzLnN0cixcbiAgICAgICAgdGhpcy50d2VlbkFjdGlvbi5zdGFydCgpXG4gICAgfSxcbiAgICByKFtsKHtcbiAgICAgICAgdHlwZTogY2MuTm9kZSxcbiAgICAgICAgdG9vbHRpcDogXCJsYXlvdXToioLngrlcIlxuICAgIH0pXSwgZS5wcm90b3R5cGUsIFwidGlwc05vZGVcIiwgdm9pZCAwKSxcbiAgICByKFtsKHtcbiAgICAgICAgdHlwZTogY2MuUmljaFRleHQsXG4gICAgICAgIHRvb2x0aXA6IFwi5paH5a2XXCJcbiAgICB9KV0sIGUucHJvdG90eXBlLCBcInRpcHNcIiwgdm9pZCAwKSxcbiAgICByKFtjXSwgZSlcbn0gKG4uZGVmYXVsdCk7XG5vLmRlZmF1bHQgPSB1Il19