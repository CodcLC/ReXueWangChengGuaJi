
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/EffectMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'aae7eHiIrFCo5ETBFbubB5c', 'EffectMgr');
// scripts/EffectMgr.js

"use strict";

var t = require;
var e = module;
var o = exports;
Object.defineProperty(o, "__esModule", {
  value: !0
});

var a = t("PoolMgr"),
    i = t("ResourceMgr"),
    r = t("Utils"),
    n = t("DataMgr"),
    s = function () {
  function t() {}

  return t.playEff = function (t, e, o, r, n, s, c, l, u) {
    var p = this;

    if (void 0 === c && (c = 0), void 0 === l && (l = 0), void 0 === u && (u = 0), r) {
      var g = a.PoolMgr.getInstance().getNode(o);
      g ? (cc.isValid(n) && (g.parent = n), s && g.setPosition(cc.v2(s.x, s.y + c)), g.zIndex = u, g.getComponent(sp.Skeleton).setAnimation(0, r, !1), g.getComponent(sp.Skeleton).setCompleteListener(function () {
        p.recycleNodeEff(g, o);
      })) : (console.log("动态加载"), i.ResourceMgr.getInstance().loadRes(t, e, cc.Prefab, function (t) {
        g = cc.instantiate(t), cc.isValid(n) && (g.parent = n), s && g.setPosition(cc.v2(s.x, s.y + c)), g.zIndex = u, g.getComponent(sp.Skeleton).setCompleteListener(function () {
          p.recycleNodeEff(g, o);
        });
      }));
    }
  }, t.playEffectForEffId = function (t, e, o, s, c, l, u, p, g) {
    var d = this;
    void 0 === o && (o = null), void 0 === s && (s = 0), void 0 === c && (c = 0), void 0 === l && (l = 0), void 0 === u && (u = 1), void 0 === p && (p = 1), void 0 === g && (g = function g() {});
    var h = n.DataMgr.getInstance().getEffectCfg(t),
        f = a.PoolMgr.getInstance().getNode(h.effName);

    if (f) {
      f.parent = e, f.zIndex = l;
      var m = cc.v2();
      cc.isValid(o) && (m = r.Utils.posTransform(o.parent, o.getPosition(), e)), f.setPosition(cc.v2(m.x + s, m.y + c)), this.isDestroy(f, h);
    } else i.ResourceMgr.getInstance().loadRes(h.bundleName, h.pathName, cc.Prefab, function (t) {
      (f = cc.instantiate(t)).parent = e, f.zIndex = l;
      var a = cc.v2();
      cc.isValid(o) && (a = r.Utils.posTransform(o.parent, o.getPosition(), e)), f.setPosition(cc.v2(a.x + s, a.y + c)), d.isDestroy(f, h);
    });
  }, t.isDestroy = function (t, e) {
    var o = this;

    switch (e.type) {
      case 1:
        var a = 1;
        1 == e.isLoop ? a = 1e4 : e.playCount && (a = e.playCount);
        var i = t.getComponent(cc.Animation);
        i.play().repeatCount = a, i.on(cc.Animation.EventType.FINISHED, function () {
          o.recycleNodeEff(t, t.name);
        });
        break;

      case 2:
        var r = !1;
        1 == e.isLoop && (r = !0);
        var n = t.getComponent(sp.Skeleton);
        n.setAnimation(0, n.defaultAnimation, r), n.setCompleteListener(function () {
          o.recycleNodeEff(t, t.name);
        });
        break;

      default:
        if (1 == e.isLoop) break;
        var s = 1;
        e.playTime && (s = e.playTime), cc.tween(t).delay(s).call(function () {
          o.recycleNodeEff(t, t.name);
        }).start();
    }
  }, t.recycleNodeEff = function (t, e) {
    cc.isValid(t) && a.PoolMgr.getInstance().freeNode(e, t);
  }, t;
}();

o["default"] = s;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcRWZmZWN0TWdyLmpzIl0sIm5hbWVzIjpbInQiLCJyZXF1aXJlIiwiZSIsIm1vZHVsZSIsIm8iLCJleHBvcnRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImEiLCJpIiwiciIsIm4iLCJzIiwicGxheUVmZiIsImMiLCJsIiwidSIsInAiLCJnIiwiUG9vbE1nciIsImdldEluc3RhbmNlIiwiZ2V0Tm9kZSIsImNjIiwiaXNWYWxpZCIsInBhcmVudCIsInNldFBvc2l0aW9uIiwidjIiLCJ4IiwieSIsInpJbmRleCIsImdldENvbXBvbmVudCIsInNwIiwiU2tlbGV0b24iLCJzZXRBbmltYXRpb24iLCJzZXRDb21wbGV0ZUxpc3RlbmVyIiwicmVjeWNsZU5vZGVFZmYiLCJjb25zb2xlIiwibG9nIiwiUmVzb3VyY2VNZ3IiLCJsb2FkUmVzIiwiUHJlZmFiIiwiaW5zdGFudGlhdGUiLCJwbGF5RWZmZWN0Rm9yRWZmSWQiLCJkIiwiaCIsIkRhdGFNZ3IiLCJnZXRFZmZlY3RDZmciLCJmIiwiZWZmTmFtZSIsIm0iLCJVdGlscyIsInBvc1RyYW5zZm9ybSIsImdldFBvc2l0aW9uIiwiaXNEZXN0cm95IiwiYnVuZGxlTmFtZSIsInBhdGhOYW1lIiwidHlwZSIsImlzTG9vcCIsInBsYXlDb3VudCIsIkFuaW1hdGlvbiIsInBsYXkiLCJyZXBlYXRDb3VudCIsIm9uIiwiRXZlbnRUeXBlIiwiRklOSVNIRUQiLCJuYW1lIiwiZGVmYXVsdEFuaW1hdGlvbiIsInBsYXlUaW1lIiwidHdlZW4iLCJkZWxheSIsImNhbGwiLCJzdGFydCIsImZyZWVOb2RlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLENBQUMsR0FBR0MsT0FBUjtBQUNBLElBQUlDLENBQUMsR0FBR0MsTUFBUjtBQUNBLElBQUlDLENBQUMsR0FBR0MsT0FBUjtBQUNBQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JILENBQXRCLEVBQXlCLFlBQXpCLEVBQXVDO0VBQ25DSSxLQUFLLEVBQUUsQ0FBQztBQUQyQixDQUF2Qzs7QUFHQSxJQUFJQyxDQUFDLEdBQUdULENBQUMsQ0FBQyxTQUFELENBQVQ7QUFBQSxJQUNBVSxDQUFDLEdBQUdWLENBQUMsQ0FBQyxhQUFELENBREw7QUFBQSxJQUVBVyxDQUFDLEdBQUdYLENBQUMsQ0FBQyxPQUFELENBRkw7QUFBQSxJQUdBWSxDQUFDLEdBQUdaLENBQUMsQ0FBQyxTQUFELENBSEw7QUFBQSxJQUlBYSxDQUFDLEdBQUcsWUFBVztFQUNYLFNBQVNiLENBQVQsR0FBYSxDQUFFOztFQUNmLE9BQU9BLENBQUMsQ0FBQ2MsT0FBRixHQUFZLFVBQVNkLENBQVQsRUFBWUUsQ0FBWixFQUFlRSxDQUFmLEVBQWtCTyxDQUFsQixFQUFxQkMsQ0FBckIsRUFBd0JDLENBQXhCLEVBQTJCRSxDQUEzQixFQUE4QkMsQ0FBOUIsRUFBaUNDLENBQWpDLEVBQW9DO0lBQ25ELElBQUlDLENBQUMsR0FBRyxJQUFSOztJQUNBLElBQUksS0FBSyxDQUFMLEtBQVdILENBQVgsS0FBaUJBLENBQUMsR0FBRyxDQUFyQixHQUF5QixLQUFLLENBQUwsS0FBV0MsQ0FBWCxLQUFpQkEsQ0FBQyxHQUFHLENBQXJCLENBQXpCLEVBQWtELEtBQUssQ0FBTCxLQUFXQyxDQUFYLEtBQWlCQSxDQUFDLEdBQUcsQ0FBckIsQ0FBbEQsRUFBMkVOLENBQS9FLEVBQWtGO01BQzlFLElBQUlRLENBQUMsR0FBR1YsQ0FBQyxDQUFDVyxPQUFGLENBQVVDLFdBQVYsR0FBd0JDLE9BQXhCLENBQWdDbEIsQ0FBaEMsQ0FBUjtNQUNBZSxDQUFDLElBQUlJLEVBQUUsQ0FBQ0MsT0FBSCxDQUFXWixDQUFYLE1BQWtCTyxDQUFDLENBQUNNLE1BQUYsR0FBV2IsQ0FBN0IsR0FBaUNDLENBQUMsSUFBSU0sQ0FBQyxDQUFDTyxXQUFGLENBQWNILEVBQUUsQ0FBQ0ksRUFBSCxDQUFNZCxDQUFDLENBQUNlLENBQVIsRUFBV2YsQ0FBQyxDQUFDZ0IsQ0FBRixHQUFNZCxDQUFqQixDQUFkLENBQXRDLEVBQTBFSSxDQUFDLENBQUNXLE1BQUYsR0FBV2IsQ0FBckYsRUFBd0ZFLENBQUMsQ0FBQ1ksWUFBRixDQUFlQyxFQUFFLENBQUNDLFFBQWxCLEVBQTRCQyxZQUE1QixDQUF5QyxDQUF6QyxFQUE0Q3ZCLENBQTVDLEVBQStDLENBQUMsQ0FBaEQsQ0FBeEYsRUFBNElRLENBQUMsQ0FBQ1ksWUFBRixDQUFlQyxFQUFFLENBQUNDLFFBQWxCLEVBQTRCRSxtQkFBNUIsQ0FBZ0QsWUFBVztRQUN4TWpCLENBQUMsQ0FBQ2tCLGNBQUYsQ0FBaUJqQixDQUFqQixFQUFvQmYsQ0FBcEI7TUFDSCxDQUZnSixDQUFoSixLQUVNaUMsT0FBTyxDQUFDQyxHQUFSLENBQVksTUFBWixHQUFxQjVCLENBQUMsQ0FBQzZCLFdBQUYsQ0FBY2xCLFdBQWQsR0FBNEJtQixPQUE1QixDQUFvQ3hDLENBQXBDLEVBQXVDRSxDQUF2QyxFQUEwQ3FCLEVBQUUsQ0FBQ2tCLE1BQTdDLEVBQzVCLFVBQVN6QyxDQUFULEVBQVk7UUFDUm1CLENBQUMsR0FBR0ksRUFBRSxDQUFDbUIsV0FBSCxDQUFlMUMsQ0FBZixDQUFKLEVBQ0F1QixFQUFFLENBQUNDLE9BQUgsQ0FBV1osQ0FBWCxNQUFrQk8sQ0FBQyxDQUFDTSxNQUFGLEdBQVdiLENBQTdCLENBREEsRUFFQUMsQ0FBQyxJQUFJTSxDQUFDLENBQUNPLFdBQUYsQ0FBY0gsRUFBRSxDQUFDSSxFQUFILENBQU1kLENBQUMsQ0FBQ2UsQ0FBUixFQUFXZixDQUFDLENBQUNnQixDQUFGLEdBQU1kLENBQWpCLENBQWQsQ0FGTCxFQUdBSSxDQUFDLENBQUNXLE1BQUYsR0FBV2IsQ0FIWCxFQUlBRSxDQUFDLENBQUNZLFlBQUYsQ0FBZUMsRUFBRSxDQUFDQyxRQUFsQixFQUE0QkUsbUJBQTVCLENBQWdELFlBQVc7VUFDdkRqQixDQUFDLENBQUNrQixjQUFGLENBQWlCakIsQ0FBakIsRUFBb0JmLENBQXBCO1FBQ0gsQ0FGRCxDQUpBO01BT0gsQ0FUMkIsQ0FGM0IsQ0FBRDtJQVlIO0VBQ0osQ0FqQk0sRUFrQlBKLENBQUMsQ0FBQzJDLGtCQUFGLEdBQXVCLFVBQVMzQyxDQUFULEVBQVlFLENBQVosRUFBZUUsQ0FBZixFQUFrQlMsQ0FBbEIsRUFBcUJFLENBQXJCLEVBQXdCQyxDQUF4QixFQUEyQkMsQ0FBM0IsRUFBOEJDLENBQTlCLEVBQWlDQyxDQUFqQyxFQUFvQztJQUN2RCxJQUFJeUIsQ0FBQyxHQUFHLElBQVI7SUFDQSxLQUFLLENBQUwsS0FBV3hDLENBQVgsS0FBaUJBLENBQUMsR0FBRyxJQUFyQixHQUNBLEtBQUssQ0FBTCxLQUFXUyxDQUFYLEtBQWlCQSxDQUFDLEdBQUcsQ0FBckIsQ0FEQSxFQUVBLEtBQUssQ0FBTCxLQUFXRSxDQUFYLEtBQWlCQSxDQUFDLEdBQUcsQ0FBckIsQ0FGQSxFQUdBLEtBQUssQ0FBTCxLQUFXQyxDQUFYLEtBQWlCQSxDQUFDLEdBQUcsQ0FBckIsQ0FIQSxFQUlBLEtBQUssQ0FBTCxLQUFXQyxDQUFYLEtBQWlCQSxDQUFDLEdBQUcsQ0FBckIsQ0FKQSxFQUtBLEtBQUssQ0FBTCxLQUFXQyxDQUFYLEtBQWlCQSxDQUFDLEdBQUcsQ0FBckIsQ0FMQSxFQU1BLEtBQUssQ0FBTCxLQUFXQyxDQUFYLEtBQWlCQSxDQUFDLEdBQUcsYUFBVyxDQUFFLENBQWxDLENBTkE7SUFPQSxJQUFJMEIsQ0FBQyxHQUFHakMsQ0FBQyxDQUFDa0MsT0FBRixDQUFVekIsV0FBVixHQUF3QjBCLFlBQXhCLENBQXFDL0MsQ0FBckMsQ0FBUjtJQUFBLElBQ0FnRCxDQUFDLEdBQUd2QyxDQUFDLENBQUNXLE9BQUYsQ0FBVUMsV0FBVixHQUF3QkMsT0FBeEIsQ0FBZ0N1QixDQUFDLENBQUNJLE9BQWxDLENBREo7O0lBRUEsSUFBSUQsQ0FBSixFQUFPO01BQ0hBLENBQUMsQ0FBQ3ZCLE1BQUYsR0FBV3ZCLENBQVgsRUFDQThDLENBQUMsQ0FBQ2xCLE1BQUYsR0FBV2QsQ0FEWDtNQUVBLElBQUlrQyxDQUFDLEdBQUczQixFQUFFLENBQUNJLEVBQUgsRUFBUjtNQUNBSixFQUFFLENBQUNDLE9BQUgsQ0FBV3BCLENBQVgsTUFBa0I4QyxDQUFDLEdBQUd2QyxDQUFDLENBQUN3QyxLQUFGLENBQVFDLFlBQVIsQ0FBcUJoRCxDQUFDLENBQUNxQixNQUF2QixFQUErQnJCLENBQUMsQ0FBQ2lELFdBQUYsRUFBL0IsRUFBZ0RuRCxDQUFoRCxDQUF0QixHQUNBOEMsQ0FBQyxDQUFDdEIsV0FBRixDQUFjSCxFQUFFLENBQUNJLEVBQUgsQ0FBTXVCLENBQUMsQ0FBQ3RCLENBQUYsR0FBTWYsQ0FBWixFQUFlcUMsQ0FBQyxDQUFDckIsQ0FBRixHQUFNZCxDQUFyQixDQUFkLENBREEsRUFFQSxLQUFLdUMsU0FBTCxDQUFlTixDQUFmLEVBQWtCSCxDQUFsQixDQUZBO0lBR0gsQ0FQRCxNQU9PbkMsQ0FBQyxDQUFDNkIsV0FBRixDQUFjbEIsV0FBZCxHQUE0Qm1CLE9BQTVCLENBQW9DSyxDQUFDLENBQUNVLFVBQXRDLEVBQWtEVixDQUFDLENBQUNXLFFBQXBELEVBQThEakMsRUFBRSxDQUFDa0IsTUFBakUsRUFDUCxVQUFTekMsQ0FBVCxFQUFZO01BQUUsQ0FBQ2dELENBQUMsR0FBR3pCLEVBQUUsQ0FBQ21CLFdBQUgsQ0FBZTFDLENBQWYsQ0FBTCxFQUF3QnlCLE1BQXhCLEdBQWlDdkIsQ0FBakMsRUFDVjhDLENBQUMsQ0FBQ2xCLE1BQUYsR0FBV2QsQ0FERDtNQUVWLElBQUlQLENBQUMsR0FBR2MsRUFBRSxDQUFDSSxFQUFILEVBQVI7TUFDQUosRUFBRSxDQUFDQyxPQUFILENBQVdwQixDQUFYLE1BQWtCSyxDQUFDLEdBQUdFLENBQUMsQ0FBQ3dDLEtBQUYsQ0FBUUMsWUFBUixDQUFxQmhELENBQUMsQ0FBQ3FCLE1BQXZCLEVBQStCckIsQ0FBQyxDQUFDaUQsV0FBRixFQUEvQixFQUFnRG5ELENBQWhELENBQXRCLEdBQ0E4QyxDQUFDLENBQUN0QixXQUFGLENBQWNILEVBQUUsQ0FBQ0ksRUFBSCxDQUFNbEIsQ0FBQyxDQUFDbUIsQ0FBRixHQUFNZixDQUFaLEVBQWVKLENBQUMsQ0FBQ29CLENBQUYsR0FBTWQsQ0FBckIsQ0FBZCxDQURBLEVBRUE2QixDQUFDLENBQUNVLFNBQUYsQ0FBWU4sQ0FBWixFQUFlSCxDQUFmLENBRkE7SUFHSCxDQVBNO0VBUVYsQ0E1Q00sRUE2Q1A3QyxDQUFDLENBQUNzRCxTQUFGLEdBQWMsVUFBU3RELENBQVQsRUFBWUUsQ0FBWixFQUFlO0lBQ3pCLElBQUlFLENBQUMsR0FBRyxJQUFSOztJQUNBLFFBQVFGLENBQUMsQ0FBQ3VELElBQVY7TUFDSSxLQUFLLENBQUw7UUFDSSxJQUFJaEQsQ0FBQyxHQUFHLENBQVI7UUFDSixLQUFLUCxDQUFDLENBQUN3RCxNQUFQLEdBQWdCakQsQ0FBQyxHQUFHLEdBQXBCLEdBQXlCUCxDQUFDLENBQUN5RCxTQUFGLEtBQWdCbEQsQ0FBQyxHQUFHUCxDQUFDLENBQUN5RCxTQUF0QixDQUF6QjtRQUNBLElBQUlqRCxDQUFDLEdBQUdWLENBQUMsQ0FBQytCLFlBQUYsQ0FBZVIsRUFBRSxDQUFDcUMsU0FBbEIsQ0FBUjtRQUNBbEQsQ0FBQyxDQUFDbUQsSUFBRixHQUFTQyxXQUFULEdBQXVCckQsQ0FBdkIsRUFDQUMsQ0FBQyxDQUFDcUQsRUFBRixDQUFLeEMsRUFBRSxDQUFDcUMsU0FBSCxDQUFhSSxTQUFiLENBQXVCQyxRQUE1QixFQUNBLFlBQVc7VUFDUDdELENBQUMsQ0FBQ2dDLGNBQUYsQ0FBaUJwQyxDQUFqQixFQUFvQkEsQ0FBQyxDQUFDa0UsSUFBdEI7UUFDSCxDQUhELENBREE7UUFLQTs7TUFDQSxLQUFLLENBQUw7UUFDSSxJQUFJdkQsQ0FBQyxHQUFHLENBQUMsQ0FBVDtRQUNKLEtBQUtULENBQUMsQ0FBQ3dELE1BQVAsS0FBa0IvQyxDQUFDLEdBQUcsQ0FBQyxDQUF2QjtRQUNBLElBQUlDLENBQUMsR0FBR1osQ0FBQyxDQUFDK0IsWUFBRixDQUFlQyxFQUFFLENBQUNDLFFBQWxCLENBQVI7UUFDQXJCLENBQUMsQ0FBQ3NCLFlBQUYsQ0FBZSxDQUFmLEVBQWtCdEIsQ0FBQyxDQUFDdUQsZ0JBQXBCLEVBQXNDeEQsQ0FBdEMsR0FDQUMsQ0FBQyxDQUFDdUIsbUJBQUYsQ0FBc0IsWUFBVztVQUM3Qi9CLENBQUMsQ0FBQ2dDLGNBQUYsQ0FBaUJwQyxDQUFqQixFQUFvQkEsQ0FBQyxDQUFDa0UsSUFBdEI7UUFDSCxDQUZELENBREE7UUFJQTs7TUFDQTtRQUFTLElBQUksS0FBS2hFLENBQUMsQ0FBQ3dELE1BQVgsRUFBbUI7UUFDNUIsSUFBSTdDLENBQUMsR0FBRyxDQUFSO1FBQ0FYLENBQUMsQ0FBQ2tFLFFBQUYsS0FBZXZELENBQUMsR0FBR1gsQ0FBQyxDQUFDa0UsUUFBckIsR0FDQTdDLEVBQUUsQ0FBQzhDLEtBQUgsQ0FBU3JFLENBQVQsRUFBWXNFLEtBQVosQ0FBa0J6RCxDQUFsQixFQUFxQjBELElBQXJCLENBQTBCLFlBQVc7VUFDakNuRSxDQUFDLENBQUNnQyxjQUFGLENBQWlCcEMsQ0FBakIsRUFBb0JBLENBQUMsQ0FBQ2tFLElBQXRCO1FBQ0gsQ0FGRCxFQUVHTSxLQUZILEVBREE7SUF0Qko7RUEyQkgsQ0ExRU0sRUEyRVB4RSxDQUFDLENBQUNvQyxjQUFGLEdBQW1CLFVBQVNwQyxDQUFULEVBQVlFLENBQVosRUFBZTtJQUM5QnFCLEVBQUUsQ0FBQ0MsT0FBSCxDQUFXeEIsQ0FBWCxLQUFpQlMsQ0FBQyxDQUFDVyxPQUFGLENBQVVDLFdBQVYsR0FBd0JvRCxRQUF4QixDQUFpQ3ZFLENBQWpDLEVBQW9DRixDQUFwQyxDQUFqQjtFQUNILENBN0VNLEVBOEVQQSxDQTlFQTtBQStFSCxDQWpGRyxFQUpKOztBQXNGQUksQ0FBQyxXQUFELEdBQVlTLENBQVoiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbInZhciB0ID0gcmVxdWlyZTtcbnZhciBlID0gbW9kdWxlO1xudmFyIG8gPSBleHBvcnRzO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6ICEwXG59KTtcbnZhciBhID0gdChcIlBvb2xNZ3JcIiksXG5pID0gdChcIlJlc291cmNlTWdyXCIpLFxuciA9IHQoXCJVdGlsc1wiKSxcbm4gPSB0KFwiRGF0YU1nclwiKSxcbnMgPSBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KCkge31cbiAgICByZXR1cm4gdC5wbGF5RWZmID0gZnVuY3Rpb24odCwgZSwgbywgciwgbiwgcywgYywgbCwgdSkge1xuICAgICAgICB2YXIgcCA9IHRoaXM7XG4gICAgICAgIGlmICh2b2lkIDAgPT09IGMgJiYgKGMgPSAwKSwgdm9pZCAwID09PSBsICYmIChsID0gMCksIHZvaWQgMCA9PT0gdSAmJiAodSA9IDApLCByKSB7XG4gICAgICAgICAgICB2YXIgZyA9IGEuUG9vbE1nci5nZXRJbnN0YW5jZSgpLmdldE5vZGUobyk7XG4gICAgICAgICAgICBnID8gKGNjLmlzVmFsaWQobikgJiYgKGcucGFyZW50ID0gbiksIHMgJiYgZy5zZXRQb3NpdGlvbihjYy52MihzLngsIHMueSArIGMpKSwgZy56SW5kZXggPSB1LCBnLmdldENvbXBvbmVudChzcC5Ta2VsZXRvbikuc2V0QW5pbWF0aW9uKDAsIHIsICExKSwgZy5nZXRDb21wb25lbnQoc3AuU2tlbGV0b24pLnNldENvbXBsZXRlTGlzdGVuZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcC5yZWN5Y2xlTm9kZUVmZihnLCBvKVxuICAgICAgICAgICAgfSkpIDogKGNvbnNvbGUubG9nKFwi5Yqo5oCB5Yqg6L29XCIpLCBpLlJlc291cmNlTWdyLmdldEluc3RhbmNlKCkubG9hZFJlcyh0LCBlLCBjYy5QcmVmYWIsXG4gICAgICAgICAgICBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgZyA9IGNjLmluc3RhbnRpYXRlKHQpLFxuICAgICAgICAgICAgICAgIGNjLmlzVmFsaWQobikgJiYgKGcucGFyZW50ID0gbiksXG4gICAgICAgICAgICAgICAgcyAmJiBnLnNldFBvc2l0aW9uKGNjLnYyKHMueCwgcy55ICsgYykpLFxuICAgICAgICAgICAgICAgIGcuekluZGV4ID0gdSxcbiAgICAgICAgICAgICAgICBnLmdldENvbXBvbmVudChzcC5Ta2VsZXRvbikuc2V0Q29tcGxldGVMaXN0ZW5lcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcC5yZWN5Y2xlTm9kZUVmZihnLCBvKVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9KSlcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdC5wbGF5RWZmZWN0Rm9yRWZmSWQgPSBmdW5jdGlvbih0LCBlLCBvLCBzLCBjLCBsLCB1LCBwLCBnKSB7XG4gICAgICAgIHZhciBkID0gdGhpcztcbiAgICAgICAgdm9pZCAwID09PSBvICYmIChvID0gbnVsbCksXG4gICAgICAgIHZvaWQgMCA9PT0gcyAmJiAocyA9IDApLFxuICAgICAgICB2b2lkIDAgPT09IGMgJiYgKGMgPSAwKSxcbiAgICAgICAgdm9pZCAwID09PSBsICYmIChsID0gMCksXG4gICAgICAgIHZvaWQgMCA9PT0gdSAmJiAodSA9IDEpLFxuICAgICAgICB2b2lkIDAgPT09IHAgJiYgKHAgPSAxKSxcbiAgICAgICAgdm9pZCAwID09PSBnICYmIChnID0gZnVuY3Rpb24oKSB7fSk7XG4gICAgICAgIHZhciBoID0gbi5EYXRhTWdyLmdldEluc3RhbmNlKCkuZ2V0RWZmZWN0Q2ZnKHQpLFxuICAgICAgICBmID0gYS5Qb29sTWdyLmdldEluc3RhbmNlKCkuZ2V0Tm9kZShoLmVmZk5hbWUpO1xuICAgICAgICBpZiAoZikge1xuICAgICAgICAgICAgZi5wYXJlbnQgPSBlLFxuICAgICAgICAgICAgZi56SW5kZXggPSBsO1xuICAgICAgICAgICAgdmFyIG0gPSBjYy52MigpO1xuICAgICAgICAgICAgY2MuaXNWYWxpZChvKSAmJiAobSA9IHIuVXRpbHMucG9zVHJhbnNmb3JtKG8ucGFyZW50LCBvLmdldFBvc2l0aW9uKCksIGUpKSxcbiAgICAgICAgICAgIGYuc2V0UG9zaXRpb24oY2MudjIobS54ICsgcywgbS55ICsgYykpLFxuICAgICAgICAgICAgdGhpcy5pc0Rlc3Ryb3koZiwgaClcbiAgICAgICAgfSBlbHNlIGkuUmVzb3VyY2VNZ3IuZ2V0SW5zdGFuY2UoKS5sb2FkUmVzKGguYnVuZGxlTmFtZSwgaC5wYXRoTmFtZSwgY2MuUHJlZmFiLFxuICAgICAgICBmdW5jdGlvbih0KSB7IChmID0gY2MuaW5zdGFudGlhdGUodCkpLnBhcmVudCA9IGUsXG4gICAgICAgICAgICBmLnpJbmRleCA9IGw7XG4gICAgICAgICAgICB2YXIgYSA9IGNjLnYyKCk7XG4gICAgICAgICAgICBjYy5pc1ZhbGlkKG8pICYmIChhID0gci5VdGlscy5wb3NUcmFuc2Zvcm0oby5wYXJlbnQsIG8uZ2V0UG9zaXRpb24oKSwgZSkpLFxuICAgICAgICAgICAgZi5zZXRQb3NpdGlvbihjYy52MihhLnggKyBzLCBhLnkgKyBjKSksXG4gICAgICAgICAgICBkLmlzRGVzdHJveShmLCBoKVxuICAgICAgICB9KVxuICAgIH0sXG4gICAgdC5pc0Rlc3Ryb3kgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHZhciBvID0gdGhpcztcbiAgICAgICAgc3dpdGNoIChlLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICB2YXIgYSA9IDE7XG4gICAgICAgICAgICAxID09IGUuaXNMb29wID8gYSA9IDFlNDogZS5wbGF5Q291bnQgJiYgKGEgPSBlLnBsYXlDb3VudCk7XG4gICAgICAgICAgICB2YXIgaSA9IHQuZ2V0Q29tcG9uZW50KGNjLkFuaW1hdGlvbik7XG4gICAgICAgICAgICBpLnBsYXkoKS5yZXBlYXRDb3VudCA9IGEsXG4gICAgICAgICAgICBpLm9uKGNjLkFuaW1hdGlvbi5FdmVudFR5cGUuRklOSVNIRUQsXG4gICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBvLnJlY3ljbGVOb2RlRWZmKHQsIHQubmFtZSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgdmFyIHIgPSAhMTtcbiAgICAgICAgICAgIDEgPT0gZS5pc0xvb3AgJiYgKHIgPSAhMCk7XG4gICAgICAgICAgICB2YXIgbiA9IHQuZ2V0Q29tcG9uZW50KHNwLlNrZWxldG9uKTtcbiAgICAgICAgICAgIG4uc2V0QW5pbWF0aW9uKDAsIG4uZGVmYXVsdEFuaW1hdGlvbiwgciksXG4gICAgICAgICAgICBuLnNldENvbXBsZXRlTGlzdGVuZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgby5yZWN5Y2xlTm9kZUVmZih0LCB0Lm5hbWUpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDogaWYgKDEgPT0gZS5pc0xvb3ApIGJyZWFrO1xuICAgICAgICAgICAgdmFyIHMgPSAxO1xuICAgICAgICAgICAgZS5wbGF5VGltZSAmJiAocyA9IGUucGxheVRpbWUpLFxuICAgICAgICAgICAgY2MudHdlZW4odCkuZGVsYXkocykuY2FsbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBvLnJlY3ljbGVOb2RlRWZmKHQsIHQubmFtZSlcbiAgICAgICAgICAgIH0pLnN0YXJ0KCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHQucmVjeWNsZU5vZGVFZmYgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGNjLmlzVmFsaWQodCkgJiYgYS5Qb29sTWdyLmdldEluc3RhbmNlKCkuZnJlZU5vZGUoZSwgdClcbiAgICB9LFxuICAgIHRcbn0gKCk7XG5vLmRlZmF1bHQgPSBzIl19