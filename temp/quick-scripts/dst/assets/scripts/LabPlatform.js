
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/LabPlatform.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '00670D/i/NP07JwCxPWGZf1', 'LabPlatform');
// scripts/LabPlatform.js

"use strict";

var t = require;
var e = module;
var o = exports;

var _a,
    i = void 0 && (void 0).__extends || (_a = function a(t, e) {
  return (_a = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (t, e) {
    t.__proto__ = e;
  } || function (t, e) {
    for (var o in e) {
      Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
    }
  })(t, e);
}, function (t, e) {
  function o() {
    this.constructor = t;
  }

  _a(t, e), t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o());
}),
    r = void 0 && (void 0).__decorate || function (t, e, o, a) {
  var i,
      r = arguments.length,
      n = r < 3 ? e : null === a ? a = Object.getOwnPropertyDescriptor(e, o) : a;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) n = Reflect.decorate(t, e, o, a);else for (var s = t.length - 1; s >= 0; s--) {
    (i = t[s]) && (n = (r < 3 ? i(n) : r > 3 ? i(e, o, n) : i(e, o)) || n);
  }
  return r > 3 && n && Object.defineProperty(e, o, n), n;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});
var n = cc._decorator,
    s = n.ccclass,
    c = (n.property, function (t) {
  function e() {
    return null !== t && t.apply(this, arguments) || this;
  }

  return i(e, t), e.prototype.onLoad = function () {}, e.prototype.start = function () {
    var t = this;
    this.scheduleOnce(function () {
      console.log("当前节点大小：", t.node.scale), "暴击" == t.node.getComponent(cc.Label).string && console.log("当前节点大小：", t.node.getContentSize().width, t.node.getContentSize().height), console.log("当前字体大小：", t.node.getComponent(cc.Label).fontSize);
    });
  }, r([s], e);
}(cc.Component));
o["default"] = c;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcTGFiUGxhdGZvcm0uanMiXSwibmFtZXMiOlsidCIsInJlcXVpcmUiLCJlIiwibW9kdWxlIiwibyIsImV4cG9ydHMiLCJhIiwiaSIsIl9fZXh0ZW5kcyIsIk9iamVjdCIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJjb25zdHJ1Y3RvciIsImNyZWF0ZSIsInIiLCJfX2RlY29yYXRlIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwibiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsInMiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiY2MiLCJfZGVjb3JhdG9yIiwiY2NjbGFzcyIsImMiLCJwcm9wZXJ0eSIsImFwcGx5Iiwib25Mb2FkIiwic3RhcnQiLCJzY2hlZHVsZU9uY2UiLCJjb25zb2xlIiwibG9nIiwibm9kZSIsInNjYWxlIiwiZ2V0Q29tcG9uZW50IiwiTGFiZWwiLCJzdHJpbmciLCJnZXRDb250ZW50U2l6ZSIsIndpZHRoIiwiaGVpZ2h0IiwiZm9udFNpemUiLCJDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsQ0FBQyxHQUFHQyxPQUFSO0FBQ0EsSUFBSUMsQ0FBQyxHQUFHQyxNQUFSO0FBQ0EsSUFBSUMsQ0FBQyxHQUFHQyxPQUFSOztBQUNBLElBQUlDLEVBQUo7QUFBQSxJQUFPQyxDQUFDLEdBQUcsVUFBUSxTQUFLQyxTQUFiLEtBQTJCRixFQUFDLEdBQUcsV0FBU04sQ0FBVCxFQUFZRSxDQUFaLEVBQWU7RUFDckQsT0FBTyxDQUFDSSxFQUFDLEdBQUdHLE1BQU0sQ0FBQ0MsY0FBUCxJQUF5QjtJQUNqQ0MsU0FBUyxFQUFFO0VBRHNCLGFBRzFCQyxLQUgwQixJQUlyQyxVQUFTWixDQUFULEVBQVlFLENBQVosRUFBZTtJQUNYRixDQUFDLENBQUNX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Y2QsU0FBZCxDQUFkLElBQTBDLElBQWpEO0VBQ0g7O0VBQ0QsT0FBT2IsQ0FBQyxDQUFDTCxDQUFELEVBQUlGLENBQUosQ0FBRCxFQUNQRSxDQUFDLENBQUNXLFNBQUYsQ0FBWXNCLE1BQVosR0FBcUIsWUFBVyxDQUFFLENBRDNCLEVBRVBqQyxDQUFDLENBQUNXLFNBQUYsQ0FBWXVCLEtBQVosR0FBb0IsWUFBVztJQUMzQixJQUFJcEMsQ0FBQyxHQUFHLElBQVI7SUFDQSxLQUFLcUMsWUFBTCxDQUFrQixZQUFXO01BQ3pCQyxPQUFPLENBQUNDLEdBQVIsQ0FBWSxTQUFaLEVBQXVCdkMsQ0FBQyxDQUFDd0MsSUFBRixDQUFPQyxLQUE5QixHQUNBLFFBQVF6QyxDQUFDLENBQUN3QyxJQUFGLENBQU9FLFlBQVAsQ0FBb0JiLEVBQUUsQ0FBQ2MsS0FBdkIsRUFBOEJDLE1BQXRDLElBQWdETixPQUFPLENBQUNDLEdBQVIsQ0FBWSxTQUFaLEVBQXVCdkMsQ0FBQyxDQUFDd0MsSUFBRixDQUFPSyxjQUFQLEdBQXdCQyxLQUEvQyxFQUFzRDlDLENBQUMsQ0FBQ3dDLElBQUYsQ0FBT0ssY0FBUCxHQUF3QkUsTUFBOUUsQ0FEaEQsRUFFQVQsT0FBTyxDQUFDQyxHQUFSLENBQVksU0FBWixFQUF1QnZDLENBQUMsQ0FBQ3dDLElBQUYsQ0FBT0UsWUFBUCxDQUFvQmIsRUFBRSxDQUFDYyxLQUF2QixFQUE4QkssUUFBckQsQ0FGQTtJQUdILENBSkQ7RUFLSCxDQVRNLEVBVVA5QixDQUFDLENBQUMsQ0FBQ1EsQ0FBRCxDQUFELEVBQU14QixDQUFOLENBVkQ7QUFXSCxDQWZELENBZUcyQixFQUFFLENBQUNvQixTQWZOLENBREMsQ0FGRDtBQW1CQTdDLENBQUMsV0FBRCxHQUFZNEIsQ0FBWiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHQgPSByZXF1aXJlO1xudmFyIGUgPSBtb2R1bGU7XG52YXIgbyA9IGV4cG9ydHM7XG52YXIgYSwgaSA9IHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMgfHwgKGEgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgcmV0dXJuIChhID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IHtcbiAgICAgICAgX19wcm90b19fOiBbXVxuICAgIH1cbiAgICBpbnN0YW5jZW9mIEFycmF5ICYmXG4gICAgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB0Ll9fcHJvdG9fXyA9IGVcbiAgICB9IHx8XG4gICAgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBmb3IgKHZhciBvIGluIGUpIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBvKSAmJiAodFtvXSA9IGVbb10pXG4gICAgfSkodCwgZSlcbn0sXG5mdW5jdGlvbih0LCBlKSB7XG4gICAgZnVuY3Rpb24gbygpIHtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IHRcbiAgICB9XG4gICAgYSh0LCBlKSxcbiAgICB0LnByb3RvdHlwZSA9IG51bGwgPT09IGUgPyBPYmplY3QuY3JlYXRlKGUpIDogKG8ucHJvdG90eXBlID0gZS5wcm90b3R5cGUsIG5ldyBvKVxufSksXG5yID0gdGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUgfHxcbmZ1bmN0aW9uKHQsIGUsIG8sIGEpIHtcbiAgICB2YXIgaSwgciA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgbiA9IHIgPCAzID8gZTogbnVsbCA9PT0gYSA/IGEgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIG8pIDogYTtcbiAgICBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgUmVmbGVjdCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUpIG4gPSBSZWZsZWN0LmRlY29yYXRlKHQsIGUsIG8sIGEpO1xuICAgIGVsc2UgZm9yICh2YXIgcyA9IHQubGVuZ3RoIC0gMTsgcyA+PSAwOyBzLS0pKGkgPSB0W3NdKSAmJiAobiA9IChyIDwgMyA/IGkobikgOiByID4gMyA/IGkoZSwgbywgbikgOiBpKGUsIG8pKSB8fCBuKTtcbiAgICByZXR1cm4gciA+IDMgJiYgbiAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgbywgbiksXG4gICAgblxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiAhMFxufSk7XG52YXIgbiA9IGNjLl9kZWNvcmF0b3IsXG5zID0gbi5jY2NsYXNzLFxuYyA9IChuLnByb3BlcnR5LFxuZnVuY3Rpb24odCkge1xuICAgIGZ1bmN0aW9uIGUoKSB7XG4gICAgICAgIHJldHVybiBudWxsICE9PSB0ICYmIHQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzXG4gICAgfVxuICAgIHJldHVybiBpKGUsIHQpLFxuICAgIGUucHJvdG90eXBlLm9uTG9hZCA9IGZ1bmN0aW9uKCkge30sXG4gICAgZS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICB0aGlzLnNjaGVkdWxlT25jZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5b2T5YmN6IqC54K55aSn5bCP77yaXCIsIHQubm9kZS5zY2FsZSksXG4gICAgICAgICAgICBcIuaatOWHu1wiID09IHQubm9kZS5nZXRDb21wb25lbnQoY2MuTGFiZWwpLnN0cmluZyAmJiBjb25zb2xlLmxvZyhcIuW9k+WJjeiKgueCueWkp+Wwj++8mlwiLCB0Lm5vZGUuZ2V0Q29udGVudFNpemUoKS53aWR0aCwgdC5ub2RlLmdldENvbnRlbnRTaXplKCkuaGVpZ2h0KSxcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5b2T5YmN5a2X5L2T5aSn5bCP77yaXCIsIHQubm9kZS5nZXRDb21wb25lbnQoY2MuTGFiZWwpLmZvbnRTaXplKVxuICAgICAgICB9KVxuICAgIH0sXG4gICAgcihbc10sIGUpXG59IChjYy5Db21wb25lbnQpKTtcbm8uZGVmYXVsdCA9IGMiXX0=