
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/UISellView.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ca45aVMtZJPcqM4mCVcVRE0', 'UISellView');
// scripts/UISellView.js

"use strict";

var t = require;
var e = module;
var o = exports;

var _a,
    i = void 0 && (void 0).__extends || (_a = function a(t, e) {
  return (_a = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (t, e) {
    t.__proto__ = e;
  } || function (t, e) {
    for (var o in e) {
      Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
    }
  })(t, e);
}, function (t, e) {
  function o() {
    this.constructor = t;
  }

  _a(t, e), t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o());
}),
    r = void 0 && (void 0).__decorate || function (t, e, o, a) {
  var i,
      r = arguments.length,
      n = r < 3 ? e : null === a ? a = Object.getOwnPropertyDescriptor(e, o) : a;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) n = Reflect.decorate(t, e, o, a);else for (var s = t.length - 1; s >= 0; s--) {
    (i = t[s]) && (n = (r < 3 ? i(n) : r > 3 ? i(e, o, n) : i(e, o)) || n);
  }
  return r > 3 && n && Object.defineProperty(e, o, n), n;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});

var n = t("BaseUI"),
    s = t("EventMgr"),
    c = t("UIMgr"),
    l = t("Config"),
    u = t("EquipMgr"),
    p = t("GoodsManager"),
    g = cc._decorator,
    d = g.ccclass,
    h = g.property,
    f = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    return e.LayoutSell = null, e.BtnClose = null, e.BtnSellQuick = null, e.curSeleIdList = [1], e.curTurnView = l.UIID.UIHome, e;
  }

  return i(e, t), e.prototype.init = function (t) {
    this.curTurnView = t || l.UIID.UIHome;
  }, e.prototype.start = function () {
    s.EventMgr.getInstance().emit(l.EventName.ShowUITop, !1), this.registerBtnEvent();
  }, e.prototype.registerBtnEvent = function () {
    var t = this;
    this.BtnClose.on(cc.Node.EventType.TOUCH_END, function () {
      t.closeView();
    }), this.BtnSellQuick.on(cc.Node.EventType.TOUCH_END, function () {
      t.curTurnView == l.UIID.UIEquip ? t.sendEvent(l.EventName.SellQuickEquip, t.curSeleIdList) : u["default"].getInstance().quickSellForSaveData(t.curSeleIdList), s.EventMgr.getInstance().emit(l.EventName.RefreshRedDot, !1, !1, !1, !0, !1), t.closeView();
    });

    for (var e = function e(_e) {
      var a = o.LayoutSell.getChildByName("BtnQuality" + _e);
      cc.isValid(a) && a.on(cc.Node.EventType.TOUCH_END, function (o) {
        var a = o.target.getChildByName("SpSeleIcon");
        a.active = !a.active;
        var i = _e;
        a.active ? t.curSeleIdList.push(i) : t.curSeleIdList.splice(t.curSeleIdList.indexOf(i), 1);
      });
    }, o = this, a = 1; a <= 5; a++) {
      e(a);
    }
  }, e.prototype.closeView = function () {
    p["default"].getInstance().isOverEquipBagForIndex() && c.UIMgr.getInstance().openUI(l.UIID.UINotBagIndex, -1, this.curTurnView), this.closeUI();
  }, r([h(cc.Node)], e.prototype, "LayoutSell", void 0), r([h(cc.Node)], e.prototype, "BtnClose", void 0), r([h(cc.Node)], e.prototype, "BtnSellQuick", void 0), r([d], e);
}(n["default"]);

o["default"] = f;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcVUlTZWxsVmlldy5qcyJdLCJuYW1lcyI6WyJ0IiwicmVxdWlyZSIsImUiLCJtb2R1bGUiLCJvIiwiZXhwb3J0cyIsImEiLCJpIiwiX19leHRlbmRzIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiciIsIl9fZGVjb3JhdGUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJuIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUmVmbGVjdCIsImRlY29yYXRlIiwicyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJjIiwibCIsInUiLCJwIiwiZyIsImNjIiwiX2RlY29yYXRvciIsImQiLCJjY2NsYXNzIiwiaCIsInByb3BlcnR5IiwiZiIsImFwcGx5IiwiTGF5b3V0U2VsbCIsIkJ0bkNsb3NlIiwiQnRuU2VsbFF1aWNrIiwiY3VyU2VsZUlkTGlzdCIsImN1clR1cm5WaWV3IiwiVUlJRCIsIlVJSG9tZSIsImluaXQiLCJzdGFydCIsIkV2ZW50TWdyIiwiZ2V0SW5zdGFuY2UiLCJlbWl0IiwiRXZlbnROYW1lIiwiU2hvd1VJVG9wIiwicmVnaXN0ZXJCdG5FdmVudCIsIm9uIiwiTm9kZSIsIkV2ZW50VHlwZSIsIlRPVUNIX0VORCIsImNsb3NlVmlldyIsIlVJRXF1aXAiLCJzZW5kRXZlbnQiLCJTZWxsUXVpY2tFcXVpcCIsInF1aWNrU2VsbEZvclNhdmVEYXRhIiwiUmVmcmVzaFJlZERvdCIsImdldENoaWxkQnlOYW1lIiwiaXNWYWxpZCIsInRhcmdldCIsImFjdGl2ZSIsInB1c2giLCJzcGxpY2UiLCJpbmRleE9mIiwiaXNPdmVyRXF1aXBCYWdGb3JJbmRleCIsIlVJTWdyIiwib3BlblVJIiwiVUlOb3RCYWdJbmRleCIsImNsb3NlVUkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsQ0FBQyxHQUFHQyxPQUFSO0FBQ0EsSUFBSUMsQ0FBQyxHQUFHQyxNQUFSO0FBQ0EsSUFBSUMsQ0FBQyxHQUFHQyxPQUFSOztBQUNBLElBQUlDLEVBQUo7QUFBQSxJQUFPQyxDQUFDLEdBQUcsVUFBUSxTQUFLQyxTQUFiLEtBQTJCRixFQUFDLEdBQUcsV0FBU04sQ0FBVCxFQUFZRSxDQUFaLEVBQWU7RUFDckQsT0FBTyxDQUFDSSxFQUFDLEdBQUdHLE1BQU0sQ0FBQ0MsY0FBUCxJQUF5QjtJQUNqQ0MsU0FBUyxFQUFFO0VBRHNCLGFBRzFCQyxLQUgwQixJQUlyQyxVQUFTWixDQUFULEVBQVlFLENBQVosRUFBZTtJQUNYRixDQUFDLENBQUNXLFNBQUYsR0FBY1QsQ0FBZDtFQUNILENBTlcsSUFPWixVQUFTRixDQUFULEVBQVlFLENBQVosRUFBZTtJQUNYLEtBQUssSUFBSUUsQ0FBVCxJQUFjRixDQUFkO01BQWlCTyxNQUFNLENBQUNJLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ2IsQ0FBckMsRUFBd0NFLENBQXhDLE1BQStDSixDQUFDLENBQUNJLENBQUQsQ0FBRCxHQUFPRixDQUFDLENBQUNFLENBQUQsQ0FBdkQ7SUFBakI7RUFDSCxDQVRNLEVBU0pKLENBVEksRUFTREUsQ0FUQyxDQUFQO0FBVUgsQ0FYcUMsRUFZdEMsVUFBU0YsQ0FBVCxFQUFZRSxDQUFaLEVBQWU7RUFDWCxTQUFTRSxDQUFULEdBQWE7SUFDVCxLQUFLWSxXQUFMLEdBQW1CaEIsQ0FBbkI7RUFDSDs7RUFDRE0sRUFBQyxDQUFDTixDQUFELEVBQUlFLENBQUosQ0FBRCxFQUNBRixDQUFDLENBQUNhLFNBQUYsR0FBYyxTQUFTWCxDQUFULEdBQWFPLE1BQU0sQ0FBQ1EsTUFBUCxDQUFjZixDQUFkLENBQWIsSUFBaUNFLENBQUMsQ0FBQ1MsU0FBRixHQUFjWCxDQUFDLENBQUNXLFNBQWhCLEVBQTJCLElBQUlULENBQUosRUFBNUQsQ0FEZDtBQUVILENBbEJVLENBQVg7QUFBQSxJQW1CQWMsQ0FBQyxHQUFHLFVBQVEsU0FBS0MsVUFBYixJQUNKLFVBQVNuQixDQUFULEVBQVlFLENBQVosRUFBZUUsQ0FBZixFQUFrQkUsQ0FBbEIsRUFBcUI7RUFDakIsSUFBSUMsQ0FBSjtFQUFBLElBQU9XLENBQUMsR0FBR0UsU0FBUyxDQUFDQyxNQUFyQjtFQUFBLElBQ0FDLENBQUMsR0FBR0osQ0FBQyxHQUFHLENBQUosR0FBUWhCLENBQVIsR0FBVyxTQUFTSSxDQUFULEdBQWFBLENBQUMsR0FBR0csTUFBTSxDQUFDYyx3QkFBUCxDQUFnQ3JCLENBQWhDLEVBQW1DRSxDQUFuQyxDQUFqQixHQUF5REUsQ0FEeEU7RUFFQSxJQUFJLFlBQVksT0FBT2tCLE9BQW5CLElBQThCLGNBQWMsT0FBT0EsT0FBTyxDQUFDQyxRQUEvRCxFQUF5RUgsQ0FBQyxHQUFHRSxPQUFPLENBQUNDLFFBQVIsQ0FBaUJ6QixDQUFqQixFQUFvQkUsQ0FBcEIsRUFBdUJFLENBQXZCLEVBQTBCRSxDQUExQixDQUFKLENBQXpFLEtBQ0ssS0FBSyxJQUFJb0IsQ0FBQyxHQUFHMUIsQ0FBQyxDQUFDcUIsTUFBRixHQUFXLENBQXhCLEVBQTJCSyxDQUFDLElBQUksQ0FBaEMsRUFBbUNBLENBQUMsRUFBcEM7SUFBdUMsQ0FBQ25CLENBQUMsR0FBR1AsQ0FBQyxDQUFDMEIsQ0FBRCxDQUFOLE1BQWVKLENBQUMsR0FBRyxDQUFDSixDQUFDLEdBQUcsQ0FBSixHQUFRWCxDQUFDLENBQUNlLENBQUQsQ0FBVCxHQUFlSixDQUFDLEdBQUcsQ0FBSixHQUFRWCxDQUFDLENBQUNMLENBQUQsRUFBSUUsQ0FBSixFQUFPa0IsQ0FBUCxDQUFULEdBQXFCZixDQUFDLENBQUNMLENBQUQsRUFBSUUsQ0FBSixDQUF0QyxLQUFpRGtCLENBQXBFO0VBQXZDO0VBQ0wsT0FBT0osQ0FBQyxHQUFHLENBQUosSUFBU0ksQ0FBVCxJQUFjYixNQUFNLENBQUNrQixjQUFQLENBQXNCekIsQ0FBdEIsRUFBeUJFLENBQXpCLEVBQTRCa0IsQ0FBNUIsQ0FBZCxFQUNQQSxDQURBO0FBRUgsQ0EzQkQ7O0FBNEJBYixNQUFNLENBQUNrQixjQUFQLENBQXNCdkIsQ0FBdEIsRUFBeUIsWUFBekIsRUFBdUM7RUFDbkN3QixLQUFLLEVBQUUsQ0FBQztBQUQyQixDQUF2Qzs7QUFHQSxJQUFJTixDQUFDLEdBQUd0QixDQUFDLENBQUMsUUFBRCxDQUFUO0FBQUEsSUFDQTBCLENBQUMsR0FBRzFCLENBQUMsQ0FBQyxVQUFELENBREw7QUFBQSxJQUVBNkIsQ0FBQyxHQUFHN0IsQ0FBQyxDQUFDLE9BQUQsQ0FGTDtBQUFBLElBR0E4QixDQUFDLEdBQUc5QixDQUFDLENBQUMsUUFBRCxDQUhMO0FBQUEsSUFJQStCLENBQUMsR0FBRy9CLENBQUMsQ0FBQyxVQUFELENBSkw7QUFBQSxJQUtBZ0MsQ0FBQyxHQUFHaEMsQ0FBQyxDQUFDLGNBQUQsQ0FMTDtBQUFBLElBTUFpQyxDQUFDLEdBQUdDLEVBQUUsQ0FBQ0MsVUFOUDtBQUFBLElBT0FDLENBQUMsR0FBR0gsQ0FBQyxDQUFDSSxPQVBOO0FBQUEsSUFRQUMsQ0FBQyxHQUFHTCxDQUFDLENBQUNNLFFBUk47QUFBQSxJQVNBQyxDQUFDLEdBQUcsVUFBU3hDLENBQVQsRUFBWTtFQUNaLFNBQVNFLENBQVQsR0FBYTtJQUNULElBQUlBLENBQUMsR0FBRyxTQUFTRixDQUFULElBQWNBLENBQUMsQ0FBQ3lDLEtBQUYsQ0FBUSxJQUFSLEVBQWNyQixTQUFkLENBQWQsSUFBMEMsSUFBbEQ7SUFDQSxPQUFPbEIsQ0FBQyxDQUFDd0MsVUFBRixHQUFlLElBQWYsRUFDUHhDLENBQUMsQ0FBQ3lDLFFBQUYsR0FBYSxJQUROLEVBRVB6QyxDQUFDLENBQUMwQyxZQUFGLEdBQWlCLElBRlYsRUFHUDFDLENBQUMsQ0FBQzJDLGFBQUYsR0FBa0IsQ0FBQyxDQUFELENBSFgsRUFJUDNDLENBQUMsQ0FBQzRDLFdBQUYsR0FBZ0JoQixDQUFDLENBQUNpQixJQUFGLENBQU9DLE1BSmhCLEVBS1A5QyxDQUxBO0VBTUg7O0VBQ0QsT0FBT0ssQ0FBQyxDQUFDTCxDQUFELEVBQUlGLENBQUosQ0FBRCxFQUNQRSxDQUFDLENBQUNXLFNBQUYsQ0FBWW9DLElBQVosR0FBbUIsVUFBU2pELENBQVQsRUFBWTtJQUMzQixLQUFLOEMsV0FBTCxHQUFtQjlDLENBQUMsSUFBSThCLENBQUMsQ0FBQ2lCLElBQUYsQ0FBT0MsTUFBL0I7RUFDSCxDQUhNLEVBSVA5QyxDQUFDLENBQUNXLFNBQUYsQ0FBWXFDLEtBQVosR0FBb0IsWUFBVztJQUMzQnhCLENBQUMsQ0FBQ3lCLFFBQUYsQ0FBV0MsV0FBWCxHQUF5QkMsSUFBekIsQ0FBOEJ2QixDQUFDLENBQUN3QixTQUFGLENBQVlDLFNBQTFDLEVBQXFELENBQUMsQ0FBdEQsR0FDQSxLQUFLQyxnQkFBTCxFQURBO0VBRUgsQ0FQTSxFQVFQdEQsQ0FBQyxDQUFDVyxTQUFGLENBQVkyQyxnQkFBWixHQUErQixZQUFXO0lBQ3RDLElBQUl4RCxDQUFDLEdBQUcsSUFBUjtJQUNBLEtBQUsyQyxRQUFMLENBQWNjLEVBQWQsQ0FBaUJ2QixFQUFFLENBQUN3QixJQUFILENBQVFDLFNBQVIsQ0FBa0JDLFNBQW5DLEVBQ0EsWUFBVztNQUNQNUQsQ0FBQyxDQUFDNkQsU0FBRjtJQUNILENBSEQsR0FJQSxLQUFLakIsWUFBTCxDQUFrQmEsRUFBbEIsQ0FBcUJ2QixFQUFFLENBQUN3QixJQUFILENBQVFDLFNBQVIsQ0FBa0JDLFNBQXZDLEVBQ0EsWUFBVztNQUNQNUQsQ0FBQyxDQUFDOEMsV0FBRixJQUFpQmhCLENBQUMsQ0FBQ2lCLElBQUYsQ0FBT2UsT0FBeEIsR0FBa0M5RCxDQUFDLENBQUMrRCxTQUFGLENBQVlqQyxDQUFDLENBQUN3QixTQUFGLENBQVlVLGNBQXhCLEVBQXdDaEUsQ0FBQyxDQUFDNkMsYUFBMUMsQ0FBbEMsR0FBNkZkLENBQUMsV0FBRCxDQUFVcUIsV0FBVixHQUF3QmEsb0JBQXhCLENBQTZDakUsQ0FBQyxDQUFDNkMsYUFBL0MsQ0FBN0YsRUFDQW5CLENBQUMsQ0FBQ3lCLFFBQUYsQ0FBV0MsV0FBWCxHQUF5QkMsSUFBekIsQ0FBOEJ2QixDQUFDLENBQUN3QixTQUFGLENBQVlZLGFBQTFDLEVBQXlELENBQUMsQ0FBMUQsRUFBNkQsQ0FBQyxDQUE5RCxFQUFpRSxDQUFDLENBQWxFLEVBQXFFLENBQUMsQ0FBdEUsRUFBeUUsQ0FBQyxDQUExRSxDQURBLEVBRUFsRSxDQUFDLENBQUM2RCxTQUFGLEVBRkE7SUFHSCxDQUxELENBSkE7O0lBVUEsS0FBSyxJQUFJM0QsQ0FBQyxHQUFHLFdBQVNBLEVBQVQsRUFBWTtNQUNyQixJQUFJSSxDQUFDLEdBQUdGLENBQUMsQ0FBQ3NDLFVBQUYsQ0FBYXlCLGNBQWIsQ0FBNEIsZUFBZWpFLEVBQTNDLENBQVI7TUFDQWdDLEVBQUUsQ0FBQ2tDLE9BQUgsQ0FBVzlELENBQVgsS0FBaUJBLENBQUMsQ0FBQ21ELEVBQUYsQ0FBS3ZCLEVBQUUsQ0FBQ3dCLElBQUgsQ0FBUUMsU0FBUixDQUFrQkMsU0FBdkIsRUFDakIsVUFBU3hELENBQVQsRUFBWTtRQUNSLElBQUlFLENBQUMsR0FBR0YsQ0FBQyxDQUFDaUUsTUFBRixDQUFTRixjQUFULENBQXdCLFlBQXhCLENBQVI7UUFDQTdELENBQUMsQ0FBQ2dFLE1BQUYsR0FBVyxDQUFDaEUsQ0FBQyxDQUFDZ0UsTUFBZDtRQUNBLElBQUkvRCxDQUFDLEdBQUdMLEVBQVI7UUFDQUksQ0FBQyxDQUFDZ0UsTUFBRixHQUFXdEUsQ0FBQyxDQUFDNkMsYUFBRixDQUFnQjBCLElBQWhCLENBQXFCaEUsQ0FBckIsQ0FBWCxHQUFxQ1AsQ0FBQyxDQUFDNkMsYUFBRixDQUFnQjJCLE1BQWhCLENBQXVCeEUsQ0FBQyxDQUFDNkMsYUFBRixDQUFnQjRCLE9BQWhCLENBQXdCbEUsQ0FBeEIsQ0FBdkIsRUFBbUQsQ0FBbkQsQ0FBckM7TUFDSCxDQU5nQixDQUFqQjtJQU9ILENBVEksRUFVTEgsQ0FBQyxHQUFHLElBVkMsRUFVS0UsQ0FBQyxHQUFHLENBVmQsRUFVaUJBLENBQUMsSUFBSSxDQVZ0QixFQVV5QkEsQ0FBQyxFQVYxQjtNQVU4QkosQ0FBQyxDQUFDSSxDQUFELENBQUQ7SUFWOUI7RUFXSCxDQS9CTSxFQWdDUEosQ0FBQyxDQUFDVyxTQUFGLENBQVlnRCxTQUFaLEdBQXdCLFlBQVc7SUFDL0I3QixDQUFDLFdBQUQsQ0FBVW9CLFdBQVYsR0FBd0JzQixzQkFBeEIsTUFBb0Q3QyxDQUFDLENBQUM4QyxLQUFGLENBQVF2QixXQUFSLEdBQXNCd0IsTUFBdEIsQ0FBNkI5QyxDQUFDLENBQUNpQixJQUFGLENBQU84QixhQUFwQyxFQUFtRCxDQUFDLENBQXBELEVBQXVELEtBQUsvQixXQUE1RCxDQUFwRCxFQUNBLEtBQUtnQyxPQUFMLEVBREE7RUFFSCxDQW5DTSxFQW9DUDVELENBQUMsQ0FBQyxDQUFDb0IsQ0FBQyxDQUFDSixFQUFFLENBQUN3QixJQUFKLENBQUYsQ0FBRCxFQUFleEQsQ0FBQyxDQUFDVyxTQUFqQixFQUE0QixZQUE1QixFQUEwQyxLQUFLLENBQS9DLENBcENNLEVBcUNQSyxDQUFDLENBQUMsQ0FBQ29CLENBQUMsQ0FBQ0osRUFBRSxDQUFDd0IsSUFBSixDQUFGLENBQUQsRUFBZXhELENBQUMsQ0FBQ1csU0FBakIsRUFBNEIsVUFBNUIsRUFBd0MsS0FBSyxDQUE3QyxDQXJDTSxFQXNDUEssQ0FBQyxDQUFDLENBQUNvQixDQUFDLENBQUNKLEVBQUUsQ0FBQ3dCLElBQUosQ0FBRixDQUFELEVBQWV4RCxDQUFDLENBQUNXLFNBQWpCLEVBQTRCLGNBQTVCLEVBQTRDLEtBQUssQ0FBakQsQ0F0Q00sRUF1Q1BLLENBQUMsQ0FBQyxDQUFDa0IsQ0FBRCxDQUFELEVBQU1sQyxDQUFOLENBdkNEO0FBd0NILENBbERHLENBa0REb0IsQ0FBQyxXQWxEQSxDQVRKOztBQTREQWxCLENBQUMsV0FBRCxHQUFZb0MsQ0FBWiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHQgPSByZXF1aXJlO1xudmFyIGUgPSBtb2R1bGU7XG52YXIgbyA9IGV4cG9ydHM7XG52YXIgYSwgaSA9IHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMgfHwgKGEgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgcmV0dXJuIChhID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IHtcbiAgICAgICAgX19wcm90b19fOiBbXVxuICAgIH1cbiAgICBpbnN0YW5jZW9mIEFycmF5ICYmXG4gICAgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB0Ll9fcHJvdG9fXyA9IGVcbiAgICB9IHx8XG4gICAgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBmb3IgKHZhciBvIGluIGUpIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBvKSAmJiAodFtvXSA9IGVbb10pXG4gICAgfSkodCwgZSlcbn0sXG5mdW5jdGlvbih0LCBlKSB7XG4gICAgZnVuY3Rpb24gbygpIHtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IHRcbiAgICB9XG4gICAgYSh0LCBlKSxcbiAgICB0LnByb3RvdHlwZSA9IG51bGwgPT09IGUgPyBPYmplY3QuY3JlYXRlKGUpIDogKG8ucHJvdG90eXBlID0gZS5wcm90b3R5cGUsIG5ldyBvKVxufSksXG5yID0gdGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUgfHxcbmZ1bmN0aW9uKHQsIGUsIG8sIGEpIHtcbiAgICB2YXIgaSwgciA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgbiA9IHIgPCAzID8gZTogbnVsbCA9PT0gYSA/IGEgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIG8pIDogYTtcbiAgICBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgUmVmbGVjdCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUpIG4gPSBSZWZsZWN0LmRlY29yYXRlKHQsIGUsIG8sIGEpO1xuICAgIGVsc2UgZm9yICh2YXIgcyA9IHQubGVuZ3RoIC0gMTsgcyA+PSAwOyBzLS0pKGkgPSB0W3NdKSAmJiAobiA9IChyIDwgMyA/IGkobikgOiByID4gMyA/IGkoZSwgbywgbikgOiBpKGUsIG8pKSB8fCBuKTtcbiAgICByZXR1cm4gciA+IDMgJiYgbiAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgbywgbiksXG4gICAgblxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiAhMFxufSk7XG52YXIgbiA9IHQoXCJCYXNlVUlcIiksXG5zID0gdChcIkV2ZW50TWdyXCIpLFxuYyA9IHQoXCJVSU1nclwiKSxcbmwgPSB0KFwiQ29uZmlnXCIpLFxudSA9IHQoXCJFcXVpcE1nclwiKSxcbnAgPSB0KFwiR29vZHNNYW5hZ2VyXCIpLFxuZyA9IGNjLl9kZWNvcmF0b3IsXG5kID0gZy5jY2NsYXNzLFxuaCA9IGcucHJvcGVydHksXG5mID0gZnVuY3Rpb24odCkge1xuICAgIGZ1bmN0aW9uIGUoKSB7XG4gICAgICAgIHZhciBlID0gbnVsbCAhPT0gdCAmJiB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgcmV0dXJuIGUuTGF5b3V0U2VsbCA9IG51bGwsXG4gICAgICAgIGUuQnRuQ2xvc2UgPSBudWxsLFxuICAgICAgICBlLkJ0blNlbGxRdWljayA9IG51bGwsXG4gICAgICAgIGUuY3VyU2VsZUlkTGlzdCA9IFsxXSxcbiAgICAgICAgZS5jdXJUdXJuVmlldyA9IGwuVUlJRC5VSUhvbWUsXG4gICAgICAgIGVcbiAgICB9XG4gICAgcmV0dXJuIGkoZSwgdCksXG4gICAgZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5jdXJUdXJuVmlldyA9IHQgfHwgbC5VSUlELlVJSG9tZVxuICAgIH0sXG4gICAgZS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcy5FdmVudE1nci5nZXRJbnN0YW5jZSgpLmVtaXQobC5FdmVudE5hbWUuU2hvd1VJVG9wLCAhMSksXG4gICAgICAgIHRoaXMucmVnaXN0ZXJCdG5FdmVudCgpXG4gICAgfSxcbiAgICBlLnByb3RvdHlwZS5yZWdpc3RlckJ0bkV2ZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgdGhpcy5CdG5DbG9zZS5vbihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9FTkQsXG4gICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdC5jbG9zZVZpZXcoKVxuICAgICAgICB9KSxcbiAgICAgICAgdGhpcy5CdG5TZWxsUXVpY2sub24oY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfRU5ELFxuICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHQuY3VyVHVyblZpZXcgPT0gbC5VSUlELlVJRXF1aXAgPyB0LnNlbmRFdmVudChsLkV2ZW50TmFtZS5TZWxsUXVpY2tFcXVpcCwgdC5jdXJTZWxlSWRMaXN0KSA6IHUuZGVmYXVsdC5nZXRJbnN0YW5jZSgpLnF1aWNrU2VsbEZvclNhdmVEYXRhKHQuY3VyU2VsZUlkTGlzdCksXG4gICAgICAgICAgICBzLkV2ZW50TWdyLmdldEluc3RhbmNlKCkuZW1pdChsLkV2ZW50TmFtZS5SZWZyZXNoUmVkRG90LCAhMSwgITEsICExLCAhMCwgITEpLFxuICAgICAgICAgICAgdC5jbG9zZVZpZXcoKVxuICAgICAgICB9KTtcbiAgICAgICAgZm9yICh2YXIgZSA9IGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgIHZhciBhID0gby5MYXlvdXRTZWxsLmdldENoaWxkQnlOYW1lKFwiQnRuUXVhbGl0eVwiICsgZSk7XG4gICAgICAgICAgICBjYy5pc1ZhbGlkKGEpICYmIGEub24oY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfRU5ELFxuICAgICAgICAgICAgZnVuY3Rpb24obykge1xuICAgICAgICAgICAgICAgIHZhciBhID0gby50YXJnZXQuZ2V0Q2hpbGRCeU5hbWUoXCJTcFNlbGVJY29uXCIpO1xuICAgICAgICAgICAgICAgIGEuYWN0aXZlID0gIWEuYWN0aXZlO1xuICAgICAgICAgICAgICAgIHZhciBpID0gZTtcbiAgICAgICAgICAgICAgICBhLmFjdGl2ZSA/IHQuY3VyU2VsZUlkTGlzdC5wdXNoKGkpIDogdC5jdXJTZWxlSWRMaXN0LnNwbGljZSh0LmN1clNlbGVJZExpc3QuaW5kZXhPZihpKSwgMSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIG8gPSB0aGlzLCBhID0gMTsgYSA8PSA1OyBhKyspIGUoYSlcbiAgICB9LFxuICAgIGUucHJvdG90eXBlLmNsb3NlVmlldyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBwLmRlZmF1bHQuZ2V0SW5zdGFuY2UoKS5pc092ZXJFcXVpcEJhZ0ZvckluZGV4KCkgJiYgYy5VSU1nci5nZXRJbnN0YW5jZSgpLm9wZW5VSShsLlVJSUQuVUlOb3RCYWdJbmRleCwgLTEsIHRoaXMuY3VyVHVyblZpZXcpLFxuICAgICAgICB0aGlzLmNsb3NlVUkoKVxuICAgIH0sXG4gICAgcihbaChjYy5Ob2RlKV0sIGUucHJvdG90eXBlLCBcIkxheW91dFNlbGxcIiwgdm9pZCAwKSxcbiAgICByKFtoKGNjLk5vZGUpXSwgZS5wcm90b3R5cGUsIFwiQnRuQ2xvc2VcIiwgdm9pZCAwKSxcbiAgICByKFtoKGNjLk5vZGUpXSwgZS5wcm90b3R5cGUsIFwiQnRuU2VsbFF1aWNrXCIsIHZvaWQgMCksXG4gICAgcihbZF0sIGUpXG59IChuLmRlZmF1bHQpO1xuby5kZWZhdWx0ID0gZiJdfQ==