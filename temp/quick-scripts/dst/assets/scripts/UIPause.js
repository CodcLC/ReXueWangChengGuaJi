
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/UIPause.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '509f8YaN4xM67GQE8D6pOgv', 'UIPause');
// scripts/UIPause.js

"use strict";

var t = require;
var e = module;
var o = exports;

var _a,
    i = void 0 && (void 0).__extends || (_a = function a(t, e) {
  return (_a = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (t, e) {
    t.__proto__ = e;
  } || function (t, e) {
    for (var o in e) {
      Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
    }
  })(t, e);
}, function (t, e) {
  function o() {
    this.constructor = t;
  }

  _a(t, e), t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o());
}),
    r = void 0 && (void 0).__decorate || function (t, e, o, a) {
  var i,
      r = arguments.length,
      n = r < 3 ? e : null === a ? a = Object.getOwnPropertyDescriptor(e, o) : a;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) n = Reflect.decorate(t, e, o, a);else for (var s = t.length - 1; s >= 0; s--) {
    (i = t[s]) && (n = (r < 3 ? i(n) : r > 3 ? i(e, o, n) : i(e, o)) || n);
  }
  return r > 3 && n && Object.defineProperty(e, o, n), n;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});

var n = t("BaseUI"),
    s = t("AudioMgr"),
    c = t("ResourceMgr"),
    l = t("SdkMgr"),
    u = t("UIMgr"),
    p = t("Main"),
    g = t("Config"),
    d = t("DataMgr"),
    h = t("GameDataMgr"),
    f = t("GameMgr"),
    m = t("GoodsManager"),
    y = cc._decorator,
    v = y.ccclass,
    I = y.property,
    k = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    return e.NodeRewardItem = null, e.BtnContinue = null, e.BtnFreeGet = null, e.LayoutReward = null, e.SpLevelBar = null, e.LabLevelNum = null, e.callback = function () {}, e.curSec = 1, e.curLevel = 1, e;
  }

  return i(e, t), e.prototype.init = function (t, e, o) {
    this.callback = t || function () {}, this.curSec = e || 1, this.curLevel = o || 1;
  }, e.prototype.onLoad = function () {}, e.prototype.start = function () {
    this.registerBtnEvent(), l.SdkMgr.getInstance().showBanner(), this.initData(), this.initView();
  }, e.prototype.carryCallback = function () {
    this.callback && this.callback();
  }, e.prototype.registerBtnEvent = function () {
    var t = this;
    this.BtnContinue.on(cc.Node.EventType.TOUCH_END, function () {
      p["default"].instance.isLookSkill || h["default"].getInstance().setGameState(g.EnumGameState.GameDoing), p["default"].instance.controlObjectsAnim(!1), t.closeView();
    }), this.BtnFreeGet.on(cc.Node.EventType.TOUCH_END, function () {
      p["default"].instance.isLookSkill && u.UIMgr.getInstance().closeById(g.UIID.UIDrawCard), p["default"].instance.openPetTimer(), t.carryCallback();
      var e = h["default"].getInstance().getDropGoodsList();
      m["default"].getInstance().getReward(e), h["default"].getInstance().resetDropGoodsData(), f["default"].getInstance().openHomeUI(), s.AudioMgr.getInstance().playMusic(g.AudioId.BGM_Main, "bg"), h["default"].getInstance().setGameState(g.EnumGameState.GamePrePare), t.closeView();
    });
  }, e.prototype.initData = function () {}, e.prototype.initView = function () {
    this.initBarView(), this.initRewardView();
  }, e.prototype.initBarView = function () {
    var t = d.DataMgr.getInstance().getSecCfg(this.curSec).levelCount;
    this.LabLevelNum.string = this.curLevel + "/" + t, this.SpLevelBar.fillRange = this.curLevel / t;
  }, e.prototype.initRewardView = function () {
    for (var t = this, e = h["default"].getInstance().getDropGoodsList(), o = function o(_o) {
      a.scheduleOnce(function () {
        var a = cc.instantiate(t.NodeRewardItem);
        a.parent = t.LayoutReward, a.position = cc.Vec3.ZERO;
        var i,
            r = d.DataMgr.getInstance().getGoodsCfg(e[_o].id);

        switch (c.ResourceMgr.getInstance().loadSpriteframe(r.bundleQuality, r.iconQuality, function (t) {
          a.getComponent(cc.Sprite).spriteFrame = t;
        }), a.getChildByName("LabName").color = m["default"].getInstance().seleColor(r.goodsQualityId), e[_o].goodsType) {
          case "gold":
          case "inGot":
          case "power":
            i = d.DataMgr.getInstance().getGoodsCfg(e[_o].goodsId), c.ResourceMgr.getInstance().loadSpriteframe(i.bundle, i.goodsGameIcon, function (t) {
              a.getChildByName("SpIcon").getComponent(cc.Sprite).spriteFrame = t;
            }), a.getChildByName("LabCount").getComponent(cc.Label).string = "x" + e[_o].iCount, a.getChildByName("LabName").getComponent(cc.Label).string = "" + i.goodsName;
            break;

          case "equip":
            i = d.DataMgr.getInstance().getEquipCfg(e[_o].goodsId), c.ResourceMgr.getInstance().loadSpriteframe(i.bundle, i.equipIcon, function (t) {
              a.getChildByName("SpIcon").getComponent(cc.Sprite).spriteFrame = t;
            }), a.getChildByName("LabCount").active = !1, a.getChildByName("LabName").getComponent(cc.Label).string = "" + i.equipName;
            break;

          case "skillBook":
            i = d.DataMgr.getInstance().getSkillBook(e[_o].goodsId);
            var n = d.DataMgr.getInstance().getSkillQuality(i.qualityId);
            a.getChildByName("LabSkillBookName").active = !0, a.getChildByName("LabSkillBookName").getComponent(cc.Label).string = i.name, a.getChildByName("SpIcon").scale = .75, c.ResourceMgr.getInstance().loadSpriteframe(n.bundle, n.iconImg, function (t) {
              a.getChildByName("SpIcon").getComponent(cc.Sprite).spriteFrame = t;
            }), a.getChildByName("LabCount").active = !1, a.getChildByName("LabName").getComponent(cc.Label).string = "" + i.name;
        }
      }, .02 * _o);
    }, a = this, i = 0; i < e.length; i++) {
      o(i);
    }
  }, e.prototype.closeView = function () {
    l.SdkMgr.getInstance().hideBanner(), this.closeUI();
  }, r([I({
    type: cc.Prefab,
    tooltip: "奖励item"
  })], e.prototype, "NodeRewardItem", void 0), r([I(cc.Node)], e.prototype, "BtnContinue", void 0), r([I(cc.Node)], e.prototype, "BtnFreeGet", void 0), r([I(cc.Node)], e.prototype, "LayoutReward", void 0), r([I(cc.Sprite)], e.prototype, "SpLevelBar", void 0), r([I(cc.Label)], e.prototype, "LabLevelNum", void 0), r([v], e);
}(n["default"]);

o["default"] = k;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcVUlQYXVzZS5qcyJdLCJuYW1lcyI6WyJ0IiwicmVxdWlyZSIsImUiLCJtb2R1bGUiLCJvIiwiZXhwb3J0cyIsImEiLCJpIiwiX19leHRlbmRzIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiciIsIl9fZGVjb3JhdGUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJuIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUmVmbGVjdCIsImRlY29yYXRlIiwicyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJjIiwibCIsInUiLCJwIiwiZyIsImQiLCJoIiwiZiIsIm0iLCJ5IiwiY2MiLCJfZGVjb3JhdG9yIiwidiIsImNjY2xhc3MiLCJJIiwicHJvcGVydHkiLCJrIiwiYXBwbHkiLCJOb2RlUmV3YXJkSXRlbSIsIkJ0bkNvbnRpbnVlIiwiQnRuRnJlZUdldCIsIkxheW91dFJld2FyZCIsIlNwTGV2ZWxCYXIiLCJMYWJMZXZlbE51bSIsImNhbGxiYWNrIiwiY3VyU2VjIiwiY3VyTGV2ZWwiLCJpbml0Iiwib25Mb2FkIiwic3RhcnQiLCJyZWdpc3RlckJ0bkV2ZW50IiwiU2RrTWdyIiwiZ2V0SW5zdGFuY2UiLCJzaG93QmFubmVyIiwiaW5pdERhdGEiLCJpbml0VmlldyIsImNhcnJ5Q2FsbGJhY2siLCJvbiIsIk5vZGUiLCJFdmVudFR5cGUiLCJUT1VDSF9FTkQiLCJpbnN0YW5jZSIsImlzTG9va1NraWxsIiwic2V0R2FtZVN0YXRlIiwiRW51bUdhbWVTdGF0ZSIsIkdhbWVEb2luZyIsImNvbnRyb2xPYmplY3RzQW5pbSIsImNsb3NlVmlldyIsIlVJTWdyIiwiY2xvc2VCeUlkIiwiVUlJRCIsIlVJRHJhd0NhcmQiLCJvcGVuUGV0VGltZXIiLCJnZXREcm9wR29vZHNMaXN0IiwiZ2V0UmV3YXJkIiwicmVzZXREcm9wR29vZHNEYXRhIiwib3BlbkhvbWVVSSIsIkF1ZGlvTWdyIiwicGxheU11c2ljIiwiQXVkaW9JZCIsIkJHTV9NYWluIiwiR2FtZVByZVBhcmUiLCJpbml0QmFyVmlldyIsImluaXRSZXdhcmRWaWV3IiwiRGF0YU1nciIsImdldFNlY0NmZyIsImxldmVsQ291bnQiLCJzdHJpbmciLCJmaWxsUmFuZ2UiLCJzY2hlZHVsZU9uY2UiLCJpbnN0YW50aWF0ZSIsInBhcmVudCIsInBvc2l0aW9uIiwiVmVjMyIsIlpFUk8iLCJnZXRHb29kc0NmZyIsImlkIiwiUmVzb3VyY2VNZ3IiLCJsb2FkU3ByaXRlZnJhbWUiLCJidW5kbGVRdWFsaXR5IiwiaWNvblF1YWxpdHkiLCJnZXRDb21wb25lbnQiLCJTcHJpdGUiLCJzcHJpdGVGcmFtZSIsImdldENoaWxkQnlOYW1lIiwiY29sb3IiLCJzZWxlQ29sb3IiLCJnb29kc1F1YWxpdHlJZCIsImdvb2RzVHlwZSIsImdvb2RzSWQiLCJidW5kbGUiLCJnb29kc0dhbWVJY29uIiwiTGFiZWwiLCJpQ291bnQiLCJnb29kc05hbWUiLCJnZXRFcXVpcENmZyIsImVxdWlwSWNvbiIsImFjdGl2ZSIsImVxdWlwTmFtZSIsImdldFNraWxsQm9vayIsImdldFNraWxsUXVhbGl0eSIsInF1YWxpdHlJZCIsIm5hbWUiLCJzY2FsZSIsImljb25JbWciLCJoaWRlQmFubmVyIiwiY2xvc2VVSSIsInR5cGUiLCJQcmVmYWIiLCJ0b29sdGlwIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLENBQUMsR0FBR0MsT0FBUjtBQUNBLElBQUlDLENBQUMsR0FBR0MsTUFBUjtBQUNBLElBQUlDLENBQUMsR0FBR0MsT0FBUjs7QUFDQSxJQUFJQyxFQUFKO0FBQUEsSUFBT0MsQ0FBQyxHQUFHLFVBQVEsU0FBS0MsU0FBYixLQUEyQkYsRUFBQyxHQUFHLFdBQVNOLENBQVQsRUFBWUUsQ0FBWixFQUFlO0VBQ3JELE9BQU8sQ0FBQ0ksRUFBQyxHQUFHRyxNQUFNLENBQUNDLGNBQVAsSUFBeUI7SUFDakNDLFNBQVMsRUFBRTtFQURzQixhQUcxQkMsS0FIMEIsSUFJckMsVUFBU1osQ0FBVCxFQUFZRSxDQUFaLEVBQWU7SUFDWEYsQ0FBQyxDQUFDVyxTQUFGLEdBQWNULENBQWQ7RUFDSCxDQU5XLElBT1osVUFBU0YsQ0FBVCxFQUFZRSxDQUFaLEVBQWU7SUFDWCxLQUFLLElBQUlFLENBQVQsSUFBY0YsQ0FBZDtNQUFpQk8sTUFBTSxDQUFDSSxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUNiLENBQXJDLEVBQXdDRSxDQUF4QyxNQUErQ0osQ0FBQyxDQUFDSSxDQUFELENBQUQsR0FBT0YsQ0FBQyxDQUFDRSxDQUFELENBQXZEO0lBQWpCO0VBQ0gsQ0FUTSxFQVNKSixDQVRJLEVBU0RFLENBVEMsQ0FBUDtBQVVILENBWHFDLEVBWXRDLFVBQVNGLENBQVQsRUFBWUUsQ0FBWixFQUFlO0VBQ1gsU0FBU0UsQ0FBVCxHQUFhO0lBQ1QsS0FBS1ksV0FBTCxHQUFtQmhCLENBQW5CO0VBQ0g7O0VBQ0RNLEVBQUMsQ0FBQ04sQ0FBRCxFQUFJRSxDQUFKLENBQUQsRUFDQUYsQ0FBQyxDQUFDYSxTQUFGLEdBQWMsU0FBU1gsQ0FBVCxHQUFhTyxNQUFNLENBQUNRLE1BQVAsQ0FBY2YsQ0FBZCxDQUFiLElBQWlDRSxDQUFDLENBQUNTLFNBQUYsR0FBY1gsQ0FBQyxDQUFDVyxTQUFoQixFQUEyQixJQUFJVCxDQUFKLEVBQTVELENBRGQ7QUFFSCxDQWxCVSxDQUFYO0FBQUEsSUFtQkFjLENBQUMsR0FBRyxVQUFRLFNBQUtDLFVBQWIsSUFDSixVQUFTbkIsQ0FBVCxFQUFZRSxDQUFaLEVBQWVFLENBQWYsRUFBa0JFLENBQWxCLEVBQXFCO0VBQ2pCLElBQUlDLENBQUo7RUFBQSxJQUFPVyxDQUFDLEdBQUdFLFNBQVMsQ0FBQ0MsTUFBckI7RUFBQSxJQUNBQyxDQUFDLEdBQUdKLENBQUMsR0FBRyxDQUFKLEdBQVFoQixDQUFSLEdBQVcsU0FBU0ksQ0FBVCxHQUFhQSxDQUFDLEdBQUdHLE1BQU0sQ0FBQ2Msd0JBQVAsQ0FBZ0NyQixDQUFoQyxFQUFtQ0UsQ0FBbkMsQ0FBakIsR0FBeURFLENBRHhFO0VBRUEsSUFBSSxZQUFZLE9BQU9rQixPQUFuQixJQUE4QixjQUFjLE9BQU9BLE9BQU8sQ0FBQ0MsUUFBL0QsRUFBeUVILENBQUMsR0FBR0UsT0FBTyxDQUFDQyxRQUFSLENBQWlCekIsQ0FBakIsRUFBb0JFLENBQXBCLEVBQXVCRSxDQUF2QixFQUEwQkUsQ0FBMUIsQ0FBSixDQUF6RSxLQUNLLEtBQUssSUFBSW9CLENBQUMsR0FBRzFCLENBQUMsQ0FBQ3FCLE1BQUYsR0FBVyxDQUF4QixFQUEyQkssQ0FBQyxJQUFJLENBQWhDLEVBQW1DQSxDQUFDLEVBQXBDO0lBQXVDLENBQUNuQixDQUFDLEdBQUdQLENBQUMsQ0FBQzBCLENBQUQsQ0FBTixNQUFlSixDQUFDLEdBQUcsQ0FBQ0osQ0FBQyxHQUFHLENBQUosR0FBUVgsQ0FBQyxDQUFDZSxDQUFELENBQVQsR0FBZUosQ0FBQyxHQUFHLENBQUosR0FBUVgsQ0FBQyxDQUFDTCxDQUFELEVBQUlFLENBQUosRUFBT2tCLENBQVAsQ0FBVCxHQUFxQmYsQ0FBQyxDQUFDTCxDQUFELEVBQUlFLENBQUosQ0FBdEMsS0FBaURrQixDQUFwRTtFQUF2QztFQUNMLE9BQU9KLENBQUMsR0FBRyxDQUFKLElBQVNJLENBQVQsSUFBY2IsTUFBTSxDQUFDa0IsY0FBUCxDQUFzQnpCLENBQXRCLEVBQXlCRSxDQUF6QixFQUE0QmtCLENBQTVCLENBQWQsRUFDUEEsQ0FEQTtBQUVILENBM0JEOztBQTRCQWIsTUFBTSxDQUFDa0IsY0FBUCxDQUFzQnZCLENBQXRCLEVBQXlCLFlBQXpCLEVBQXVDO0VBQ25Dd0IsS0FBSyxFQUFFLENBQUM7QUFEMkIsQ0FBdkM7O0FBR0EsSUFBSU4sQ0FBQyxHQUFHdEIsQ0FBQyxDQUFDLFFBQUQsQ0FBVDtBQUFBLElBQ0EwQixDQUFDLEdBQUcxQixDQUFDLENBQUMsVUFBRCxDQURMO0FBQUEsSUFFQTZCLENBQUMsR0FBRzdCLENBQUMsQ0FBQyxhQUFELENBRkw7QUFBQSxJQUdBOEIsQ0FBQyxHQUFHOUIsQ0FBQyxDQUFDLFFBQUQsQ0FITDtBQUFBLElBSUErQixDQUFDLEdBQUcvQixDQUFDLENBQUMsT0FBRCxDQUpMO0FBQUEsSUFLQWdDLENBQUMsR0FBR2hDLENBQUMsQ0FBQyxNQUFELENBTEw7QUFBQSxJQU1BaUMsQ0FBQyxHQUFHakMsQ0FBQyxDQUFDLFFBQUQsQ0FOTDtBQUFBLElBT0FrQyxDQUFDLEdBQUdsQyxDQUFDLENBQUMsU0FBRCxDQVBMO0FBQUEsSUFRQW1DLENBQUMsR0FBR25DLENBQUMsQ0FBQyxhQUFELENBUkw7QUFBQSxJQVNBb0MsQ0FBQyxHQUFHcEMsQ0FBQyxDQUFDLFNBQUQsQ0FUTDtBQUFBLElBVUFxQyxDQUFDLEdBQUdyQyxDQUFDLENBQUMsY0FBRCxDQVZMO0FBQUEsSUFXQXNDLENBQUMsR0FBR0MsRUFBRSxDQUFDQyxVQVhQO0FBQUEsSUFZQUMsQ0FBQyxHQUFHSCxDQUFDLENBQUNJLE9BWk47QUFBQSxJQWFBQyxDQUFDLEdBQUdMLENBQUMsQ0FBQ00sUUFiTjtBQUFBLElBY0FDLENBQUMsR0FBRyxVQUFTN0MsQ0FBVCxFQUFZO0VBQ1osU0FBU0UsQ0FBVCxHQUFhO0lBQ1QsSUFBSUEsQ0FBQyxHQUFHLFNBQVNGLENBQVQsSUFBY0EsQ0FBQyxDQUFDOEMsS0FBRixDQUFRLElBQVIsRUFBYzFCLFNBQWQsQ0FBZCxJQUEwQyxJQUFsRDtJQUNBLE9BQU9sQixDQUFDLENBQUM2QyxjQUFGLEdBQW1CLElBQW5CLEVBQ1A3QyxDQUFDLENBQUM4QyxXQUFGLEdBQWdCLElBRFQsRUFFUDlDLENBQUMsQ0FBQytDLFVBQUYsR0FBZSxJQUZSLEVBR1AvQyxDQUFDLENBQUNnRCxZQUFGLEdBQWlCLElBSFYsRUFJUGhELENBQUMsQ0FBQ2lELFVBQUYsR0FBZSxJQUpSLEVBS1BqRCxDQUFDLENBQUNrRCxXQUFGLEdBQWdCLElBTFQsRUFNUGxELENBQUMsQ0FBQ21ELFFBQUYsR0FBYSxZQUFXLENBQUUsQ0FObkIsRUFPUG5ELENBQUMsQ0FBQ29ELE1BQUYsR0FBVyxDQVBKLEVBUVBwRCxDQUFDLENBQUNxRCxRQUFGLEdBQWEsQ0FSTixFQVNQckQsQ0FUQTtFQVVIOztFQUNELE9BQU9LLENBQUMsQ0FBQ0wsQ0FBRCxFQUFJRixDQUFKLENBQUQsRUFDUEUsQ0FBQyxDQUFDVyxTQUFGLENBQVkyQyxJQUFaLEdBQW1CLFVBQVN4RCxDQUFULEVBQVlFLENBQVosRUFBZUUsQ0FBZixFQUFrQjtJQUNqQyxLQUFLaUQsUUFBTCxHQUFnQnJELENBQUMsSUFDakIsWUFBVyxDQUFFLENBRGIsRUFFQSxLQUFLc0QsTUFBTCxHQUFjcEQsQ0FBQyxJQUFJLENBRm5CLEVBR0EsS0FBS3FELFFBQUwsR0FBZ0JuRCxDQUFDLElBQUksQ0FIckI7RUFJSCxDQU5NLEVBT1BGLENBQUMsQ0FBQ1csU0FBRixDQUFZNEMsTUFBWixHQUFxQixZQUFXLENBQUUsQ0FQM0IsRUFRUHZELENBQUMsQ0FBQ1csU0FBRixDQUFZNkMsS0FBWixHQUFvQixZQUFXO0lBQzNCLEtBQUtDLGdCQUFMLElBQ0E3QixDQUFDLENBQUM4QixNQUFGLENBQVNDLFdBQVQsR0FBdUJDLFVBQXZCLEVBREEsRUFFQSxLQUFLQyxRQUFMLEVBRkEsRUFHQSxLQUFLQyxRQUFMLEVBSEE7RUFJSCxDQWJNLEVBY1A5RCxDQUFDLENBQUNXLFNBQUYsQ0FBWW9ELGFBQVosR0FBNEIsWUFBVztJQUNuQyxLQUFLWixRQUFMLElBQWlCLEtBQUtBLFFBQUwsRUFBakI7RUFDSCxDQWhCTSxFQWlCUG5ELENBQUMsQ0FBQ1csU0FBRixDQUFZOEMsZ0JBQVosR0FBK0IsWUFBVztJQUN0QyxJQUFJM0QsQ0FBQyxHQUFHLElBQVI7SUFDQSxLQUFLZ0QsV0FBTCxDQUFpQmtCLEVBQWpCLENBQW9CM0IsRUFBRSxDQUFDNEIsSUFBSCxDQUFRQyxTQUFSLENBQWtCQyxTQUF0QyxFQUNBLFlBQVc7TUFDUHJDLENBQUMsV0FBRCxDQUFVc0MsUUFBVixDQUFtQkMsV0FBbkIsSUFBa0NwQyxDQUFDLFdBQUQsQ0FBVTBCLFdBQVYsR0FBd0JXLFlBQXhCLENBQXFDdkMsQ0FBQyxDQUFDd0MsYUFBRixDQUFnQkMsU0FBckQsQ0FBbEMsRUFDQTFDLENBQUMsV0FBRCxDQUFVc0MsUUFBVixDQUFtQkssa0JBQW5CLENBQXNDLENBQUMsQ0FBdkMsQ0FEQSxFQUVBM0UsQ0FBQyxDQUFDNEUsU0FBRixFQUZBO0lBR0gsQ0FMRCxHQU1BLEtBQUszQixVQUFMLENBQWdCaUIsRUFBaEIsQ0FBbUIzQixFQUFFLENBQUM0QixJQUFILENBQVFDLFNBQVIsQ0FBa0JDLFNBQXJDLEVBQ0EsWUFBVztNQUNQckMsQ0FBQyxXQUFELENBQVVzQyxRQUFWLENBQW1CQyxXQUFuQixJQUFrQ3hDLENBQUMsQ0FBQzhDLEtBQUYsQ0FBUWhCLFdBQVIsR0FBc0JpQixTQUF0QixDQUFnQzdDLENBQUMsQ0FBQzhDLElBQUYsQ0FBT0MsVUFBdkMsQ0FBbEMsRUFDQWhELENBQUMsV0FBRCxDQUFVc0MsUUFBVixDQUFtQlcsWUFBbkIsRUFEQSxFQUVBakYsQ0FBQyxDQUFDaUUsYUFBRixFQUZBO01BR0EsSUFBSS9ELENBQUMsR0FBR2lDLENBQUMsV0FBRCxDQUFVMEIsV0FBVixHQUF3QnFCLGdCQUF4QixFQUFSO01BQ0E3QyxDQUFDLFdBQUQsQ0FBVXdCLFdBQVYsR0FBd0JzQixTQUF4QixDQUFrQ2pGLENBQWxDLEdBQ0FpQyxDQUFDLFdBQUQsQ0FBVTBCLFdBQVYsR0FBd0J1QixrQkFBeEIsRUFEQSxFQUVBaEQsQ0FBQyxXQUFELENBQVV5QixXQUFWLEdBQXdCd0IsVUFBeEIsRUFGQSxFQUdBM0QsQ0FBQyxDQUFDNEQsUUFBRixDQUFXekIsV0FBWCxHQUF5QjBCLFNBQXpCLENBQW1DdEQsQ0FBQyxDQUFDdUQsT0FBRixDQUFVQyxRQUE3QyxFQUF1RCxJQUF2RCxDQUhBLEVBSUF0RCxDQUFDLFdBQUQsQ0FBVTBCLFdBQVYsR0FBd0JXLFlBQXhCLENBQXFDdkMsQ0FBQyxDQUFDd0MsYUFBRixDQUFnQmlCLFdBQXJELENBSkEsRUFLQTFGLENBQUMsQ0FBQzRFLFNBQUYsRUFMQTtJQU1ILENBWkQsQ0FOQTtFQW1CSCxDQXRDTSxFQXVDUDFFLENBQUMsQ0FBQ1csU0FBRixDQUFZa0QsUUFBWixHQUF1QixZQUFXLENBQUUsQ0F2QzdCLEVBd0NQN0QsQ0FBQyxDQUFDVyxTQUFGLENBQVltRCxRQUFaLEdBQXVCLFlBQVc7SUFDOUIsS0FBSzJCLFdBQUwsSUFDQSxLQUFLQyxjQUFMLEVBREE7RUFFSCxDQTNDTSxFQTRDUDFGLENBQUMsQ0FBQ1csU0FBRixDQUFZOEUsV0FBWixHQUEwQixZQUFXO0lBQ2pDLElBQUkzRixDQUFDLEdBQUdrQyxDQUFDLENBQUMyRCxPQUFGLENBQVVoQyxXQUFWLEdBQXdCaUMsU0FBeEIsQ0FBa0MsS0FBS3hDLE1BQXZDLEVBQStDeUMsVUFBdkQ7SUFDQSxLQUFLM0MsV0FBTCxDQUFpQjRDLE1BQWpCLEdBQTBCLEtBQUt6QyxRQUFMLEdBQWdCLEdBQWhCLEdBQXNCdkQsQ0FBaEQsRUFDQSxLQUFLbUQsVUFBTCxDQUFnQjhDLFNBQWhCLEdBQTRCLEtBQUsxQyxRQUFMLEdBQWdCdkQsQ0FENUM7RUFFSCxDQWhETSxFQWlEUEUsQ0FBQyxDQUFDVyxTQUFGLENBQVkrRSxjQUFaLEdBQTZCLFlBQVc7SUFDcEMsS0FBSyxJQUFJNUYsQ0FBQyxHQUFHLElBQVIsRUFDTEUsQ0FBQyxHQUFHaUMsQ0FBQyxXQUFELENBQVUwQixXQUFWLEdBQXdCcUIsZ0JBQXhCLEVBREMsRUFDMkM5RSxDQUFDLEdBQUcsV0FBU0EsRUFBVCxFQUFZO01BQzVERSxDQUFDLENBQUM0RixZQUFGLENBQWUsWUFBVztRQUN0QixJQUFJNUYsQ0FBQyxHQUFHaUMsRUFBRSxDQUFDNEQsV0FBSCxDQUFlbkcsQ0FBQyxDQUFDK0MsY0FBakIsQ0FBUjtRQUNBekMsQ0FBQyxDQUFDOEYsTUFBRixHQUFXcEcsQ0FBQyxDQUFDa0QsWUFBYixFQUNBNUMsQ0FBQyxDQUFDK0YsUUFBRixHQUFhOUQsRUFBRSxDQUFDK0QsSUFBSCxDQUFRQyxJQURyQjtRQUVBLElBQUloRyxDQUFKO1FBQUEsSUFBT1csQ0FBQyxHQUFHZ0IsQ0FBQyxDQUFDMkQsT0FBRixDQUFVaEMsV0FBVixHQUF3QjJDLFdBQXhCLENBQW9DdEcsQ0FBQyxDQUFDRSxFQUFELENBQUQsQ0FBS3FHLEVBQXpDLENBQVg7O1FBQ0EsUUFBUTVFLENBQUMsQ0FBQzZFLFdBQUYsQ0FBYzdDLFdBQWQsR0FBNEI4QyxlQUE1QixDQUE0Q3pGLENBQUMsQ0FBQzBGLGFBQTlDLEVBQTZEMUYsQ0FBQyxDQUFDMkYsV0FBL0QsRUFDUixVQUFTN0csQ0FBVCxFQUFZO1VBQ1JNLENBQUMsQ0FBQ3dHLFlBQUYsQ0FBZXZFLEVBQUUsQ0FBQ3dFLE1BQWxCLEVBQTBCQyxXQUExQixHQUF3Q2hILENBQXhDO1FBQ0gsQ0FITyxHQUdKTSxDQUFDLENBQUMyRyxjQUFGLENBQWlCLFNBQWpCLEVBQTRCQyxLQUE1QixHQUFvQzdFLENBQUMsV0FBRCxDQUFVd0IsV0FBVixHQUF3QnNELFNBQXhCLENBQWtDakcsQ0FBQyxDQUFDa0csY0FBcEMsQ0FIaEMsRUFHcUZsSCxDQUFDLENBQUNFLEVBQUQsQ0FBRCxDQUFLaUgsU0FIbEc7VUFJSSxLQUFLLE1BQUw7VUFDQSxLQUFLLE9BQUw7VUFDQSxLQUFLLE9BQUw7WUFDSTlHLENBQUMsR0FBRzJCLENBQUMsQ0FBQzJELE9BQUYsQ0FBVWhDLFdBQVYsR0FBd0IyQyxXQUF4QixDQUFvQ3RHLENBQUMsQ0FBQ0UsRUFBRCxDQUFELENBQUtrSCxPQUF6QyxDQUFKLEVBQ0p6RixDQUFDLENBQUM2RSxXQUFGLENBQWM3QyxXQUFkLEdBQTRCOEMsZUFBNUIsQ0FBNENwRyxDQUFDLENBQUNnSCxNQUE5QyxFQUFzRGhILENBQUMsQ0FBQ2lILGFBQXhELEVBQ0EsVUFBU3hILENBQVQsRUFBWTtjQUNSTSxDQUFDLENBQUMyRyxjQUFGLENBQWlCLFFBQWpCLEVBQTJCSCxZQUEzQixDQUF3Q3ZFLEVBQUUsQ0FBQ3dFLE1BQTNDLEVBQW1EQyxXQUFuRCxHQUFpRWhILENBQWpFO1lBQ0gsQ0FIRCxDQURJLEVBS0pNLENBQUMsQ0FBQzJHLGNBQUYsQ0FBaUIsVUFBakIsRUFBNkJILFlBQTdCLENBQTBDdkUsRUFBRSxDQUFDa0YsS0FBN0MsRUFBb0R6QixNQUFwRCxHQUE2RCxNQUFNOUYsQ0FBQyxDQUFDRSxFQUFELENBQUQsQ0FBS3NILE1BTHBFLEVBTUpwSCxDQUFDLENBQUMyRyxjQUFGLENBQWlCLFNBQWpCLEVBQTRCSCxZQUE1QixDQUF5Q3ZFLEVBQUUsQ0FBQ2tGLEtBQTVDLEVBQW1EekIsTUFBbkQsR0FBNEQsS0FBS3pGLENBQUMsQ0FBQ29ILFNBTi9EO1lBT0o7O1VBQ0EsS0FBSyxPQUFMO1lBQ0lwSCxDQUFDLEdBQUcyQixDQUFDLENBQUMyRCxPQUFGLENBQVVoQyxXQUFWLEdBQXdCK0QsV0FBeEIsQ0FBb0MxSCxDQUFDLENBQUNFLEVBQUQsQ0FBRCxDQUFLa0gsT0FBekMsQ0FBSixFQUNKekYsQ0FBQyxDQUFDNkUsV0FBRixDQUFjN0MsV0FBZCxHQUE0QjhDLGVBQTVCLENBQTRDcEcsQ0FBQyxDQUFDZ0gsTUFBOUMsRUFBc0RoSCxDQUFDLENBQUNzSCxTQUF4RCxFQUNBLFVBQVM3SCxDQUFULEVBQVk7Y0FDUk0sQ0FBQyxDQUFDMkcsY0FBRixDQUFpQixRQUFqQixFQUEyQkgsWUFBM0IsQ0FBd0N2RSxFQUFFLENBQUN3RSxNQUEzQyxFQUFtREMsV0FBbkQsR0FBaUVoSCxDQUFqRTtZQUNILENBSEQsQ0FESSxFQUtKTSxDQUFDLENBQUMyRyxjQUFGLENBQWlCLFVBQWpCLEVBQTZCYSxNQUE3QixHQUFzQyxDQUFDLENBTG5DLEVBTUp4SCxDQUFDLENBQUMyRyxjQUFGLENBQWlCLFNBQWpCLEVBQTRCSCxZQUE1QixDQUF5Q3ZFLEVBQUUsQ0FBQ2tGLEtBQTVDLEVBQW1EekIsTUFBbkQsR0FBNEQsS0FBS3pGLENBQUMsQ0FBQ3dILFNBTi9EO1lBT0o7O1VBQ0EsS0FBSyxXQUFMO1lBQ0l4SCxDQUFDLEdBQUcyQixDQUFDLENBQUMyRCxPQUFGLENBQVVoQyxXQUFWLEdBQXdCbUUsWUFBeEIsQ0FBcUM5SCxDQUFDLENBQUNFLEVBQUQsQ0FBRCxDQUFLa0gsT0FBMUMsQ0FBSjtZQUNKLElBQUloRyxDQUFDLEdBQUdZLENBQUMsQ0FBQzJELE9BQUYsQ0FBVWhDLFdBQVYsR0FBd0JvRSxlQUF4QixDQUF3QzFILENBQUMsQ0FBQzJILFNBQTFDLENBQVI7WUFDQTVILENBQUMsQ0FBQzJHLGNBQUYsQ0FBaUIsa0JBQWpCLEVBQXFDYSxNQUFyQyxHQUE4QyxDQUFDLENBQS9DLEVBQ0F4SCxDQUFDLENBQUMyRyxjQUFGLENBQWlCLGtCQUFqQixFQUFxQ0gsWUFBckMsQ0FBa0R2RSxFQUFFLENBQUNrRixLQUFyRCxFQUE0RHpCLE1BQTVELEdBQXFFekYsQ0FBQyxDQUFDNEgsSUFEdkUsRUFFQTdILENBQUMsQ0FBQzJHLGNBQUYsQ0FBaUIsUUFBakIsRUFBMkJtQixLQUEzQixHQUFtQyxHQUZuQyxFQUdBdkcsQ0FBQyxDQUFDNkUsV0FBRixDQUFjN0MsV0FBZCxHQUE0QjhDLGVBQTVCLENBQTRDckYsQ0FBQyxDQUFDaUcsTUFBOUMsRUFBc0RqRyxDQUFDLENBQUMrRyxPQUF4RCxFQUNBLFVBQVNySSxDQUFULEVBQVk7Y0FDUk0sQ0FBQyxDQUFDMkcsY0FBRixDQUFpQixRQUFqQixFQUEyQkgsWUFBM0IsQ0FBd0N2RSxFQUFFLENBQUN3RSxNQUEzQyxFQUFtREMsV0FBbkQsR0FBaUVoSCxDQUFqRTtZQUNILENBSEQsQ0FIQSxFQU9BTSxDQUFDLENBQUMyRyxjQUFGLENBQWlCLFVBQWpCLEVBQTZCYSxNQUE3QixHQUFzQyxDQUFDLENBUHZDLEVBUUF4SCxDQUFDLENBQUMyRyxjQUFGLENBQWlCLFNBQWpCLEVBQTRCSCxZQUE1QixDQUF5Q3ZFLEVBQUUsQ0FBQ2tGLEtBQTVDLEVBQW1EekIsTUFBbkQsR0FBNEQsS0FBS3pGLENBQUMsQ0FBQzRILElBUm5FO1FBM0JKO01BcUNILENBMUNELEVBMkNBLE1BQU0vSCxFQTNDTjtJQTRDSCxDQTlDSSxFQStDTEUsQ0FBQyxHQUFHLElBL0NDLEVBK0NLQyxDQUFDLEdBQUcsQ0EvQ2QsRUErQ2lCQSxDQUFDLEdBQUdMLENBQUMsQ0FBQ21CLE1BL0N2QixFQStDK0JkLENBQUMsRUEvQ2hDO01BK0NvQ0gsQ0FBQyxDQUFDRyxDQUFELENBQUQ7SUEvQ3BDO0VBZ0RILENBbEdNLEVBbUdQTCxDQUFDLENBQUNXLFNBQUYsQ0FBWStELFNBQVosR0FBd0IsWUFBVztJQUMvQjlDLENBQUMsQ0FBQzhCLE1BQUYsQ0FBU0MsV0FBVCxHQUF1QnlFLFVBQXZCLElBQ0EsS0FBS0MsT0FBTCxFQURBO0VBRUgsQ0F0R00sRUF1R1BySCxDQUFDLENBQUMsQ0FBQ3lCLENBQUMsQ0FBQztJQUNENkYsSUFBSSxFQUFFakcsRUFBRSxDQUFDa0csTUFEUjtJQUVEQyxPQUFPLEVBQUU7RUFGUixDQUFELENBQUYsQ0FBRCxFQUdJeEksQ0FBQyxDQUFDVyxTQUhOLEVBR2lCLGdCQUhqQixFQUdtQyxLQUFLLENBSHhDLENBdkdNLEVBMkdQSyxDQUFDLENBQUMsQ0FBQ3lCLENBQUMsQ0FBQ0osRUFBRSxDQUFDNEIsSUFBSixDQUFGLENBQUQsRUFBZWpFLENBQUMsQ0FBQ1csU0FBakIsRUFBNEIsYUFBNUIsRUFBMkMsS0FBSyxDQUFoRCxDQTNHTSxFQTRHUEssQ0FBQyxDQUFDLENBQUN5QixDQUFDLENBQUNKLEVBQUUsQ0FBQzRCLElBQUosQ0FBRixDQUFELEVBQWVqRSxDQUFDLENBQUNXLFNBQWpCLEVBQTRCLFlBQTVCLEVBQTBDLEtBQUssQ0FBL0MsQ0E1R00sRUE2R1BLLENBQUMsQ0FBQyxDQUFDeUIsQ0FBQyxDQUFDSixFQUFFLENBQUM0QixJQUFKLENBQUYsQ0FBRCxFQUFlakUsQ0FBQyxDQUFDVyxTQUFqQixFQUE0QixjQUE1QixFQUE0QyxLQUFLLENBQWpELENBN0dNLEVBOEdQSyxDQUFDLENBQUMsQ0FBQ3lCLENBQUMsQ0FBQ0osRUFBRSxDQUFDd0UsTUFBSixDQUFGLENBQUQsRUFBaUI3RyxDQUFDLENBQUNXLFNBQW5CLEVBQThCLFlBQTlCLEVBQTRDLEtBQUssQ0FBakQsQ0E5R00sRUErR1BLLENBQUMsQ0FBQyxDQUFDeUIsQ0FBQyxDQUFDSixFQUFFLENBQUNrRixLQUFKLENBQUYsQ0FBRCxFQUFnQnZILENBQUMsQ0FBQ1csU0FBbEIsRUFBNkIsYUFBN0IsRUFBNEMsS0FBSyxDQUFqRCxDQS9HTSxFQWdIUEssQ0FBQyxDQUFDLENBQUN1QixDQUFELENBQUQsRUFBTXZDLENBQU4sQ0FoSEQ7QUFpSEgsQ0EvSEcsQ0ErSERvQixDQUFDLFdBL0hBLENBZEo7O0FBOElBbEIsQ0FBQyxXQUFELEdBQVl5QyxDQUFaIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdCA9IHJlcXVpcmU7XG52YXIgZSA9IG1vZHVsZTtcbnZhciBvID0gZXhwb3J0cztcbnZhciBhLCBpID0gdGhpcyAmJiB0aGlzLl9fZXh0ZW5kcyB8fCAoYSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICByZXR1cm4gKGEgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwge1xuICAgICAgICBfX3Byb3RvX186IFtdXG4gICAgfVxuICAgIGluc3RhbmNlb2YgQXJyYXkgJiZcbiAgICBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHQuX19wcm90b19fID0gZVxuICAgIH0gfHxcbiAgICBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGZvciAodmFyIG8gaW4gZSkgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIG8pICYmICh0W29dID0gZVtvXSlcbiAgICB9KSh0LCBlKVxufSxcbmZ1bmN0aW9uKHQsIGUpIHtcbiAgICBmdW5jdGlvbiBvKCkge1xuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yID0gdFxuICAgIH1cbiAgICBhKHQsIGUpLFxuICAgIHQucHJvdG90eXBlID0gbnVsbCA9PT0gZSA/IE9iamVjdC5jcmVhdGUoZSkgOiAoby5wcm90b3R5cGUgPSBlLnByb3RvdHlwZSwgbmV3IG8pXG59KSxcbnIgPSB0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSB8fFxuZnVuY3Rpb24odCwgZSwgbywgYSkge1xuICAgIHZhciBpLCByID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICBuID0gciA8IDMgPyBlOiBudWxsID09PSBhID8gYSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgbykgOiBhO1xuICAgIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBSZWZsZWN0ICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSkgbiA9IFJlZmxlY3QuZGVjb3JhdGUodCwgZSwgbywgYSk7XG4gICAgZWxzZSBmb3IgKHZhciBzID0gdC5sZW5ndGggLSAxOyBzID49IDA7IHMtLSkoaSA9IHRbc10pICYmIChuID0gKHIgPCAzID8gaShuKSA6IHIgPiAzID8gaShlLCBvLCBuKSA6IGkoZSwgbykpIHx8IG4pO1xuICAgIHJldHVybiByID4gMyAmJiBuICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBvLCBuKSxcbiAgICBuXG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6ICEwXG59KTtcbnZhciBuID0gdChcIkJhc2VVSVwiKSxcbnMgPSB0KFwiQXVkaW9NZ3JcIiksXG5jID0gdChcIlJlc291cmNlTWdyXCIpLFxubCA9IHQoXCJTZGtNZ3JcIiksXG51ID0gdChcIlVJTWdyXCIpLFxucCA9IHQoXCJNYWluXCIpLFxuZyA9IHQoXCJDb25maWdcIiksXG5kID0gdChcIkRhdGFNZ3JcIiksXG5oID0gdChcIkdhbWVEYXRhTWdyXCIpLFxuZiA9IHQoXCJHYW1lTWdyXCIpLFxubSA9IHQoXCJHb29kc01hbmFnZXJcIiksXG55ID0gY2MuX2RlY29yYXRvcixcbnYgPSB5LmNjY2xhc3MsXG5JID0geS5wcm9wZXJ0eSxcbmsgPSBmdW5jdGlvbih0KSB7XG4gICAgZnVuY3Rpb24gZSgpIHtcbiAgICAgICAgdmFyIGUgPSBudWxsICE9PSB0ICYmIHQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gZS5Ob2RlUmV3YXJkSXRlbSA9IG51bGwsXG4gICAgICAgIGUuQnRuQ29udGludWUgPSBudWxsLFxuICAgICAgICBlLkJ0bkZyZWVHZXQgPSBudWxsLFxuICAgICAgICBlLkxheW91dFJld2FyZCA9IG51bGwsXG4gICAgICAgIGUuU3BMZXZlbEJhciA9IG51bGwsXG4gICAgICAgIGUuTGFiTGV2ZWxOdW0gPSBudWxsLFxuICAgICAgICBlLmNhbGxiYWNrID0gZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgZS5jdXJTZWMgPSAxLFxuICAgICAgICBlLmN1ckxldmVsID0gMSxcbiAgICAgICAgZVxuICAgIH1cbiAgICByZXR1cm4gaShlLCB0KSxcbiAgICBlLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24odCwgZSwgbykge1xuICAgICAgICB0aGlzLmNhbGxiYWNrID0gdCB8fFxuICAgICAgICBmdW5jdGlvbigpIHt9LFxuICAgICAgICB0aGlzLmN1clNlYyA9IGUgfHwgMSxcbiAgICAgICAgdGhpcy5jdXJMZXZlbCA9IG8gfHwgMVxuICAgIH0sXG4gICAgZS5wcm90b3R5cGUub25Mb2FkID0gZnVuY3Rpb24oKSB7fSxcbiAgICBlLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnJlZ2lzdGVyQnRuRXZlbnQoKSxcbiAgICAgICAgbC5TZGtNZ3IuZ2V0SW5zdGFuY2UoKS5zaG93QmFubmVyKCksXG4gICAgICAgIHRoaXMuaW5pdERhdGEoKSxcbiAgICAgICAgdGhpcy5pbml0VmlldygpXG4gICAgfSxcbiAgICBlLnByb3RvdHlwZS5jYXJyeUNhbGxiYWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgJiYgdGhpcy5jYWxsYmFjaygpXG4gICAgfSxcbiAgICBlLnByb3RvdHlwZS5yZWdpc3RlckJ0bkV2ZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgdGhpcy5CdG5Db250aW51ZS5vbihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9FTkQsXG4gICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcC5kZWZhdWx0Lmluc3RhbmNlLmlzTG9va1NraWxsIHx8IGguZGVmYXVsdC5nZXRJbnN0YW5jZSgpLnNldEdhbWVTdGF0ZShnLkVudW1HYW1lU3RhdGUuR2FtZURvaW5nKSxcbiAgICAgICAgICAgIHAuZGVmYXVsdC5pbnN0YW5jZS5jb250cm9sT2JqZWN0c0FuaW0oITEpLFxuICAgICAgICAgICAgdC5jbG9zZVZpZXcoKVxuICAgICAgICB9KSxcbiAgICAgICAgdGhpcy5CdG5GcmVlR2V0Lm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX0VORCxcbiAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBwLmRlZmF1bHQuaW5zdGFuY2UuaXNMb29rU2tpbGwgJiYgdS5VSU1nci5nZXRJbnN0YW5jZSgpLmNsb3NlQnlJZChnLlVJSUQuVUlEcmF3Q2FyZCksXG4gICAgICAgICAgICBwLmRlZmF1bHQuaW5zdGFuY2Uub3BlblBldFRpbWVyKCksXG4gICAgICAgICAgICB0LmNhcnJ5Q2FsbGJhY2soKTtcbiAgICAgICAgICAgIHZhciBlID0gaC5kZWZhdWx0LmdldEluc3RhbmNlKCkuZ2V0RHJvcEdvb2RzTGlzdCgpO1xuICAgICAgICAgICAgbS5kZWZhdWx0LmdldEluc3RhbmNlKCkuZ2V0UmV3YXJkKGUpLFxuICAgICAgICAgICAgaC5kZWZhdWx0LmdldEluc3RhbmNlKCkucmVzZXREcm9wR29vZHNEYXRhKCksXG4gICAgICAgICAgICBmLmRlZmF1bHQuZ2V0SW5zdGFuY2UoKS5vcGVuSG9tZVVJKCksXG4gICAgICAgICAgICBzLkF1ZGlvTWdyLmdldEluc3RhbmNlKCkucGxheU11c2ljKGcuQXVkaW9JZC5CR01fTWFpbiwgXCJiZ1wiKSxcbiAgICAgICAgICAgIGguZGVmYXVsdC5nZXRJbnN0YW5jZSgpLnNldEdhbWVTdGF0ZShnLkVudW1HYW1lU3RhdGUuR2FtZVByZVBhcmUpLFxuICAgICAgICAgICAgdC5jbG9zZVZpZXcoKVxuICAgICAgICB9KVxuICAgIH0sXG4gICAgZS5wcm90b3R5cGUuaW5pdERhdGEgPSBmdW5jdGlvbigpIHt9LFxuICAgIGUucHJvdG90eXBlLmluaXRWaWV3ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuaW5pdEJhclZpZXcoKSxcbiAgICAgICAgdGhpcy5pbml0UmV3YXJkVmlldygpXG4gICAgfSxcbiAgICBlLnByb3RvdHlwZS5pbml0QmFyVmlldyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IGQuRGF0YU1nci5nZXRJbnN0YW5jZSgpLmdldFNlY0NmZyh0aGlzLmN1clNlYykubGV2ZWxDb3VudDtcbiAgICAgICAgdGhpcy5MYWJMZXZlbE51bS5zdHJpbmcgPSB0aGlzLmN1ckxldmVsICsgXCIvXCIgKyB0LFxuICAgICAgICB0aGlzLlNwTGV2ZWxCYXIuZmlsbFJhbmdlID0gdGhpcy5jdXJMZXZlbCAvIHRcbiAgICB9LFxuICAgIGUucHJvdG90eXBlLmluaXRSZXdhcmRWaWV3ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGZvciAodmFyIHQgPSB0aGlzLFxuICAgICAgICBlID0gaC5kZWZhdWx0LmdldEluc3RhbmNlKCkuZ2V0RHJvcEdvb2RzTGlzdCgpLCBvID0gZnVuY3Rpb24obykge1xuICAgICAgICAgICAgYS5zY2hlZHVsZU9uY2UoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSBjYy5pbnN0YW50aWF0ZSh0Lk5vZGVSZXdhcmRJdGVtKTtcbiAgICAgICAgICAgICAgICBhLnBhcmVudCA9IHQuTGF5b3V0UmV3YXJkLFxuICAgICAgICAgICAgICAgIGEucG9zaXRpb24gPSBjYy5WZWMzLlpFUk87XG4gICAgICAgICAgICAgICAgdmFyIGksIHIgPSBkLkRhdGFNZ3IuZ2V0SW5zdGFuY2UoKS5nZXRHb29kc0NmZyhlW29dLmlkKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGMuUmVzb3VyY2VNZ3IuZ2V0SW5zdGFuY2UoKS5sb2FkU3ByaXRlZnJhbWUoci5idW5kbGVRdWFsaXR5LCByLmljb25RdWFsaXR5LFxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgYS5nZXRDb21wb25lbnQoY2MuU3ByaXRlKS5zcHJpdGVGcmFtZSA9IHRcbiAgICAgICAgICAgICAgICB9KSwgYS5nZXRDaGlsZEJ5TmFtZShcIkxhYk5hbWVcIikuY29sb3IgPSBtLmRlZmF1bHQuZ2V0SW5zdGFuY2UoKS5zZWxlQ29sb3Ioci5nb29kc1F1YWxpdHlJZCksIGVbb10uZ29vZHNUeXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJnb2xkXCI6XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpbkdvdFwiOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwicG93ZXJcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBkLkRhdGFNZ3IuZ2V0SW5zdGFuY2UoKS5nZXRHb29kc0NmZyhlW29dLmdvb2RzSWQpLFxuICAgICAgICAgICAgICAgICAgICBjLlJlc291cmNlTWdyLmdldEluc3RhbmNlKCkubG9hZFNwcml0ZWZyYW1lKGkuYnVuZGxlLCBpLmdvb2RzR2FtZUljb24sXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuZ2V0Q2hpbGRCeU5hbWUoXCJTcEljb25cIikuZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSkuc3ByaXRlRnJhbWUgPSB0XG4gICAgICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICAgICAgICBhLmdldENoaWxkQnlOYW1lKFwiTGFiQ291bnRcIikuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSBcInhcIiArIGVbb10uaUNvdW50LFxuICAgICAgICAgICAgICAgICAgICBhLmdldENoaWxkQnlOYW1lKFwiTGFiTmFtZVwiKS5nZXRDb21wb25lbnQoY2MuTGFiZWwpLnN0cmluZyA9IFwiXCIgKyBpLmdvb2RzTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJlcXVpcFwiOlxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGQuRGF0YU1nci5nZXRJbnN0YW5jZSgpLmdldEVxdWlwQ2ZnKGVbb10uZ29vZHNJZCksXG4gICAgICAgICAgICAgICAgICAgIGMuUmVzb3VyY2VNZ3IuZ2V0SW5zdGFuY2UoKS5sb2FkU3ByaXRlZnJhbWUoaS5idW5kbGUsIGkuZXF1aXBJY29uLFxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhLmdldENoaWxkQnlOYW1lKFwiU3BJY29uXCIpLmdldENvbXBvbmVudChjYy5TcHJpdGUpLnNwcml0ZUZyYW1lID0gdFxuICAgICAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICAgICAgICAgYS5nZXRDaGlsZEJ5TmFtZShcIkxhYkNvdW50XCIpLmFjdGl2ZSA9ICExLFxuICAgICAgICAgICAgICAgICAgICBhLmdldENoaWxkQnlOYW1lKFwiTGFiTmFtZVwiKS5nZXRDb21wb25lbnQoY2MuTGFiZWwpLnN0cmluZyA9IFwiXCIgKyBpLmVxdWlwTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJza2lsbEJvb2tcIjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBkLkRhdGFNZ3IuZ2V0SW5zdGFuY2UoKS5nZXRTa2lsbEJvb2soZVtvXS5nb29kc0lkKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBkLkRhdGFNZ3IuZ2V0SW5zdGFuY2UoKS5nZXRTa2lsbFF1YWxpdHkoaS5xdWFsaXR5SWQpO1xuICAgICAgICAgICAgICAgICAgICBhLmdldENoaWxkQnlOYW1lKFwiTGFiU2tpbGxCb29rTmFtZVwiKS5hY3RpdmUgPSAhMCxcbiAgICAgICAgICAgICAgICAgICAgYS5nZXRDaGlsZEJ5TmFtZShcIkxhYlNraWxsQm9va05hbWVcIikuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSBpLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGEuZ2V0Q2hpbGRCeU5hbWUoXCJTcEljb25cIikuc2NhbGUgPSAuNzUsXG4gICAgICAgICAgICAgICAgICAgIGMuUmVzb3VyY2VNZ3IuZ2V0SW5zdGFuY2UoKS5sb2FkU3ByaXRlZnJhbWUobi5idW5kbGUsIG4uaWNvbkltZyxcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYS5nZXRDaGlsZEJ5TmFtZShcIlNwSWNvblwiKS5nZXRDb21wb25lbnQoY2MuU3ByaXRlKS5zcHJpdGVGcmFtZSA9IHRcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICAgIGEuZ2V0Q2hpbGRCeU5hbWUoXCJMYWJDb3VudFwiKS5hY3RpdmUgPSAhMSxcbiAgICAgICAgICAgICAgICAgICAgYS5nZXRDaGlsZEJ5TmFtZShcIkxhYk5hbWVcIikuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSBcIlwiICsgaS5uYW1lO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAuMDIgKiBvKVxuICAgICAgICB9LFxuICAgICAgICBhID0gdGhpcywgaSA9IDA7IGkgPCBlLmxlbmd0aDsgaSsrKSBvKGkpXG4gICAgfSxcbiAgICBlLnByb3RvdHlwZS5jbG9zZVZpZXcgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgbC5TZGtNZ3IuZ2V0SW5zdGFuY2UoKS5oaWRlQmFubmVyKCksXG4gICAgICAgIHRoaXMuY2xvc2VVSSgpXG4gICAgfSxcbiAgICByKFtJKHtcbiAgICAgICAgdHlwZTogY2MuUHJlZmFiLFxuICAgICAgICB0b29sdGlwOiBcIuWlluWKsWl0ZW1cIlxuICAgIH0pXSwgZS5wcm90b3R5cGUsIFwiTm9kZVJld2FyZEl0ZW1cIiwgdm9pZCAwKSxcbiAgICByKFtJKGNjLk5vZGUpXSwgZS5wcm90b3R5cGUsIFwiQnRuQ29udGludWVcIiwgdm9pZCAwKSxcbiAgICByKFtJKGNjLk5vZGUpXSwgZS5wcm90b3R5cGUsIFwiQnRuRnJlZUdldFwiLCB2b2lkIDApLFxuICAgIHIoW0koY2MuTm9kZSldLCBlLnByb3RvdHlwZSwgXCJMYXlvdXRSZXdhcmRcIiwgdm9pZCAwKSxcbiAgICByKFtJKGNjLlNwcml0ZSldLCBlLnByb3RvdHlwZSwgXCJTcExldmVsQmFyXCIsIHZvaWQgMCksXG4gICAgcihbSShjYy5MYWJlbCldLCBlLnByb3RvdHlwZSwgXCJMYWJMZXZlbE51bVwiLCB2b2lkIDApLFxuICAgIHIoW3ZdLCBlKVxufSAobi5kZWZhdWx0KTtcbm8uZGVmYXVsdCA9IGsiXX0=