
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/NodeDropGoods.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '8d537Ug8g5OLKw2AZ9crKno', 'NodeDropGoods');
// scripts/NodeDropGoods.js

"use strict";

var t = require;
var e = module;
var o = exports;

var _a,
    i = void 0 && (void 0).__extends || (_a = function a(t, e) {
  return (_a = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (t, e) {
    t.__proto__ = e;
  } || function (t, e) {
    for (var o in e) {
      Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
    }
  })(t, e);
}, function (t, e) {
  function o() {
    this.constructor = t;
  }

  _a(t, e), t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o());
}),
    r = void 0 && (void 0).__decorate || function (t, e, o, a) {
  var i,
      r = arguments.length,
      n = r < 3 ? e : null === a ? a = Object.getOwnPropertyDescriptor(e, o) : a;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) n = Reflect.decorate(t, e, o, a);else for (var s = t.length - 1; s >= 0; s--) {
    (i = t[s]) && (n = (r < 3 ? i(n) : r > 3 ? i(e, o, n) : i(e, o)) || n);
  }
  return r > 3 && n && Object.defineProperty(e, o, n), n;
};

Object.defineProperty(o, "__esModule", {
  value: !0
}), o.EnumGoodsType = void 0;

var n = t("AudioMgr"),
    s = t("PoolMgr"),
    c = t("ResourceMgr"),
    l = t("Main"),
    u = t("Config"),
    p = t("DataMgr"),
    g = t("PlayerMgr"),
    d = t("TaskMgr"),
    h = cc._decorator,
    f = h.ccclass,
    m = h.property,
    y = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    return e.LabCount = null, e.curtween = null, e;
  }

  return i(e, t), e.prototype.start = function () {}, e.prototype.initData = function (t, e) {
    this.dropGoodsData = t, this.node.setPosition(e), this.dealGoodsForCare(), this.autoDrop();
  }, e.prototype.dealGoodsForCare = function () {
    var t,
        e = this;

    switch (this.dropGoodsData.goodsType) {
      case "gold":
      case "inGot":
      case "power":
        t = p.DataMgr.getInstance().getGoodsCfg(this.dropGoodsData.goodsId), this.node.scale = .5, this.LabCount.node.scale = 2, this.node.getChildByName("LabName").active = !1, this.node.getChildByName("LabCount").scale = 2, c.ResourceMgr.getInstance().loadSpriteframe(t.bundle, t.goodsGameIcon, function (t) {
          e.node.getComponent(cc.Sprite).spriteFrame = t;
        });
        break;

      case "equip":
        t = p.DataMgr.getInstance().getEquipCfg(this.dropGoodsData.goodsId), this.node.scale = 1, this.node.getChildByName("LabName").active = !1, c.ResourceMgr.getInstance().loadSpriteframe(t.bundle, t.equipIcon, function (t) {
          e.node.getComponent(cc.Sprite).spriteFrame = t;
        });
        break;

      case "skillBook":
        t = p.DataMgr.getInstance().getSkillBook(this.dropGoodsData.goodsId), p.DataMgr.getInstance().getSkillQuality(t.qualityId), this.node.scale = .5, this.node.getChildByName("LabName").getComponent(cc.Label).string = t.name, g.PlayerMgr.getInstance().getTrackData().getAbType(), c.ResourceMgr.getInstance().loadSpriteframe("iconImg", t.SkillIcon, function (t) {
          e.node.getComponent(cc.Sprite).spriteFrame = t;
        }), this.node.getChildByName("LabName").active = !1;
    }

    this.dropGoodsData.iCount <= 1 ? this.LabCount.node.active = !1 : (this.LabCount.node.active = !0, this.LabCount.string = "+" + this.dropGoodsData.iCount);
  }, e.prototype.autoDrop = function () {
    var t = this;
    this.curtween = cc.tween(this.node).bezierBy(.5, cc.v2(), cc.v2(20, 200), cc.v2(40, 0)).delay(.5).call(function () {
      t.autoRecycle();
    }).start();
  }, e.prototype.autoRecycle = function () {
    var t = this,
        e = cc.v3();
    l["default"].instance.player && cc.isValid(l["default"].instance.player.object) && (e = cc.v3(l["default"].instance.player.object.x, 150, 0)), this.curtween && (this.curtween.stop(), this.curtween = null), n.AudioMgr.getInstance().playEffect(u.AudioId.BattleSound_PickUpThings), this.curtween = cc.tween(this.node).to(.5, {
      position: e
    }).call(function () {
      t.addToPool(t.node, "NodeDropGoods"), t.curtween = null;
    }).start();
  }, e.prototype.recycleGoods = function () {
    var t = g.PlayerMgr.getInstance().geUserData();

    switch (this.dropGoodsData.goodsType) {
      case "gold":
        t.addGoldNum(this.dropGoodsData.iCount);
        break;

      case "inGot":
        t.addInGotNum(this.dropGoodsData.iCount);
        break;

      case "power":
        t.addPowerNum(this.dropGoodsData.iCount);
        break;

      case "equip":
        t.addEquipForId(this.dropGoodsData.goodsId), d["default"].getInstance().addEquipCountForTask();
        break;

      case "skillBook":
        t.addSkillBookId(this.dropGoodsData.goodsId), d["default"].getInstance().addSkillBookCountForTask();
    }
  }, e.prototype.addToPool = function (t, e) {
    cc.isValid(t) && s.PoolMgr.getInstance().freeNode(e, t);
  }, r([m(cc.Label)], e.prototype, "LabCount", void 0), r([f], e);
}(cc.Component);

o["default"] = y, function (t) {
  t.EnumGold = "gold", t.EnumInGot = "inGot", t.EnumEquip = "equip", t.EnumSkillBook = "skillBook", t.EnumSalutation = "salutation";
}(o.EnumGoodsType || (o.EnumGoodsType = {}));

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcTm9kZURyb3BHb29kcy5qcyJdLCJuYW1lcyI6WyJ0IiwicmVxdWlyZSIsImUiLCJtb2R1bGUiLCJvIiwiZXhwb3J0cyIsImEiLCJpIiwiX19leHRlbmRzIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiciIsIl9fZGVjb3JhdGUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJuIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUmVmbGVjdCIsImRlY29yYXRlIiwicyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJFbnVtR29vZHNUeXBlIiwiYyIsImwiLCJ1IiwicCIsImciLCJkIiwiaCIsImNjIiwiX2RlY29yYXRvciIsImYiLCJjY2NsYXNzIiwibSIsInByb3BlcnR5IiwieSIsImFwcGx5IiwiTGFiQ291bnQiLCJjdXJ0d2VlbiIsInN0YXJ0IiwiaW5pdERhdGEiLCJkcm9wR29vZHNEYXRhIiwibm9kZSIsInNldFBvc2l0aW9uIiwiZGVhbEdvb2RzRm9yQ2FyZSIsImF1dG9Ecm9wIiwiZ29vZHNUeXBlIiwiRGF0YU1nciIsImdldEluc3RhbmNlIiwiZ2V0R29vZHNDZmciLCJnb29kc0lkIiwic2NhbGUiLCJnZXRDaGlsZEJ5TmFtZSIsImFjdGl2ZSIsIlJlc291cmNlTWdyIiwibG9hZFNwcml0ZWZyYW1lIiwiYnVuZGxlIiwiZ29vZHNHYW1lSWNvbiIsImdldENvbXBvbmVudCIsIlNwcml0ZSIsInNwcml0ZUZyYW1lIiwiZ2V0RXF1aXBDZmciLCJlcXVpcEljb24iLCJnZXRTa2lsbEJvb2siLCJnZXRTa2lsbFF1YWxpdHkiLCJxdWFsaXR5SWQiLCJMYWJlbCIsInN0cmluZyIsIm5hbWUiLCJQbGF5ZXJNZ3IiLCJnZXRUcmFja0RhdGEiLCJnZXRBYlR5cGUiLCJTa2lsbEljb24iLCJpQ291bnQiLCJ0d2VlbiIsImJlemllckJ5IiwidjIiLCJkZWxheSIsImF1dG9SZWN5Y2xlIiwidjMiLCJpbnN0YW5jZSIsInBsYXllciIsImlzVmFsaWQiLCJvYmplY3QiLCJ4Iiwic3RvcCIsIkF1ZGlvTWdyIiwicGxheUVmZmVjdCIsIkF1ZGlvSWQiLCJCYXR0bGVTb3VuZF9QaWNrVXBUaGluZ3MiLCJ0byIsInBvc2l0aW9uIiwiYWRkVG9Qb29sIiwicmVjeWNsZUdvb2RzIiwiZ2VVc2VyRGF0YSIsImFkZEdvbGROdW0iLCJhZGRJbkdvdE51bSIsImFkZFBvd2VyTnVtIiwiYWRkRXF1aXBGb3JJZCIsImFkZEVxdWlwQ291bnRGb3JUYXNrIiwiYWRkU2tpbGxCb29rSWQiLCJhZGRTa2lsbEJvb2tDb3VudEZvclRhc2siLCJQb29sTWdyIiwiZnJlZU5vZGUiLCJDb21wb25lbnQiLCJFbnVtR29sZCIsIkVudW1JbkdvdCIsIkVudW1FcXVpcCIsIkVudW1Ta2lsbEJvb2siLCJFbnVtU2FsdXRhdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxDQUFDLEdBQUdDLE9BQVI7QUFDQSxJQUFJQyxDQUFDLEdBQUdDLE1BQVI7QUFDQSxJQUFJQyxDQUFDLEdBQUdDLE9BQVI7O0FBQ0EsSUFBSUMsRUFBSjtBQUFBLElBQU9DLENBQUMsR0FBRyxVQUFRLFNBQUtDLFNBQWIsS0FBMkJGLEVBQUMsR0FBRyxXQUFTTixDQUFULEVBQVlFLENBQVosRUFBZTtFQUNyRCxPQUFPLENBQUNJLEVBQUMsR0FBR0csTUFBTSxDQUFDQyxjQUFQLElBQXlCO0lBQ2pDQyxTQUFTLEVBQUU7RUFEc0IsYUFHMUJDLEtBSDBCLElBSXJDLFVBQVNaLENBQVQsRUFBWUUsQ0FBWixFQUFlO0lBQ1hGLENBQUMsQ0FBQ1csU0FBRixHQUFjVCxDQUFkO0VBQ0gsQ0FOVyxJQU9aLFVBQVNGLENBQVQsRUFBWUUsQ0FBWixFQUFlO0lBQ1gsS0FBSyxJQUFJRSxDQUFULElBQWNGLENBQWQ7TUFBaUJPLE1BQU0s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LGFBQUYsS0FBb0J6QixDQUFDLENBQUN5QixhQUFGLEdBQWtCLEVBQXRDLENBTkgsQ0FEQSIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHQgPSByZXF1aXJlO1xudmFyIGUgPSBtb2R1bGU7XG52YXIgbyA9IGV4cG9ydHM7XG52YXIgYSwgaSA9IHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMgfHwgKGEgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgcmV0dXJuIChhID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IHtcbiAgICAgICAgX19wcm90b19fOiBbXVxuICAgIH1cbiAgICBpbnN0YW5jZW9mIEFycmF5ICYmXG4gICAgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB0Ll9fcHJvdG9fXyA9IGVcbiAgICB9IHx8XG4gICAgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBmb3IgKHZhciBvIGluIGUpIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBvKSAmJiAodFtvXSA9IGVbb10pXG4gICAgfSkodCwgZSlcbn0sXG5mdW5jdGlvbih0LCBlKSB7XG4gICAgZnVuY3Rpb24gbygpIHtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IHRcbiAgICB9XG4gICAgYSh0LCBlKSxcbiAgICB0LnByb3RvdHlwZSA9IG51bGwgPT09IGUgPyBPYmplY3QuY3JlYXRlKGUpIDogKG8ucHJvdG90eXBlID0gZS5wcm90b3R5cGUsIG5ldyBvKVxufSksXG5yID0gdGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUgfHxcbmZ1bmN0aW9uKHQsIGUsIG8sIGEpIHtcbiAgICB2YXIgaSwgciA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgbiA9IHIgPCAzID8gZTogbnVsbCA9PT0gYSA/IGEgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIG8pIDogYTtcbiAgICBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgUmVmbGVjdCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUpIG4gPSBSZWZsZWN0LmRlY29yYXRlKHQsIGUsIG8sIGEpO1xuICAgIGVsc2UgZm9yICh2YXIgcyA9IHQubGVuZ3RoIC0gMTsgcyA+PSAwOyBzLS0pKGkgPSB0W3NdKSAmJiAobiA9IChyIDwgMyA/IGkobikgOiByID4gMyA/IGkoZSwgbywgbikgOiBpKGUsIG8pKSB8fCBuKTtcbiAgICByZXR1cm4gciA+IDMgJiYgbiAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgbywgbiksXG4gICAgblxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiAhMFxufSksXG5vLkVudW1Hb29kc1R5cGUgPSB2b2lkIDA7XG52YXIgbiA9IHQoXCJBdWRpb01nclwiKSxcbnMgPSB0KFwiUG9vbE1nclwiKSxcbmMgPSB0KFwiUmVzb3VyY2VNZ3JcIiksXG5sID0gdChcIk1haW5cIiksXG51ID0gdChcIkNvbmZpZ1wiKSxcbnAgPSB0KFwiRGF0YU1nclwiKSxcbmcgPSB0KFwiUGxheWVyTWdyXCIpLFxuZCA9IHQoXCJUYXNrTWdyXCIpLFxuaCA9IGNjLl9kZWNvcmF0b3IsXG5mID0gaC5jY2NsYXNzLFxubSA9IGgucHJvcGVydHksXG55ID0gZnVuY3Rpb24odCkge1xuICAgIGZ1bmN0aW9uIGUoKSB7XG4gICAgICAgIHZhciBlID0gbnVsbCAhPT0gdCAmJiB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgcmV0dXJuIGUuTGFiQ291bnQgPSBudWxsLFxuICAgICAgICBlLmN1cnR3ZWVuID0gbnVsbCxcbiAgICAgICAgZVxuICAgIH1cbiAgICByZXR1cm4gaShlLCB0KSxcbiAgICBlLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKCkge30sXG4gICAgZS5wcm90b3R5cGUuaW5pdERhdGEgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHRoaXMuZHJvcEdvb2RzRGF0YSA9IHQsXG4gICAgICAgIHRoaXMubm9kZS5zZXRQb3NpdGlvbihlKSxcbiAgICAgICAgdGhpcy5kZWFsR29vZHNGb3JDYXJlKCksXG4gICAgICAgIHRoaXMuYXV0b0Ryb3AoKVxuICAgIH0sXG4gICAgZS5wcm90b3R5cGUuZGVhbEdvb2RzRm9yQ2FyZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCwgZSA9IHRoaXM7XG4gICAgICAgIHN3aXRjaCAodGhpcy5kcm9wR29vZHNEYXRhLmdvb2RzVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBcImdvbGRcIjpcbiAgICAgICAgICAgIGNhc2UgXCJpbkdvdFwiOlxuICAgICAgICAgICAgY2FzZSBcInBvd2VyXCI6XG4gICAgICAgICAgICAgICAgdCA9IHAuRGF0YU1nci5nZXRJbnN0YW5jZSgpLmdldEdvb2RzQ2ZnKHRoaXMuZHJvcEdvb2RzRGF0YS5nb29kc0lkKSxcbiAgICAgICAgICAgIHRoaXMubm9kZS5zY2FsZSA9IC41LFxuICAgICAgICAgICAgdGhpcy5MYWJDb3VudC5ub2RlLnNjYWxlID0gMixcbiAgICAgICAgICAgIHRoaXMubm9kZS5nZXRDaGlsZEJ5TmFtZShcIkxhYk5hbWVcIikuYWN0aXZlID0gITEsXG4gICAgICAgICAgICB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJMYWJDb3VudFwiKS5zY2FsZSA9IDIsXG4gICAgICAgICAgICBjLlJlc291cmNlTWdyLmdldEluc3RhbmNlKCkubG9hZFNwcml0ZWZyYW1lKHQuYnVuZGxlLCB0Lmdvb2RzR2FtZUljb24sXG4gICAgICAgICAgICBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgZS5ub2RlLmdldENvbXBvbmVudChjYy5TcHJpdGUpLnNwcml0ZUZyYW1lID0gdFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJlcXVpcFwiOlxuICAgICAgICAgICAgICAgIHQgPSBwLkRhdGFNZ3IuZ2V0SW5zdGFuY2UoKS5nZXRFcXVpcENmZyh0aGlzLmRyb3BHb29kc0RhdGEuZ29vZHNJZCksXG4gICAgICAgICAgICB0aGlzLm5vZGUuc2NhbGUgPSAxLFxuICAgICAgICAgICAgdGhpcy5ub2RlLmdldENoaWxkQnlOYW1lKFwiTGFiTmFtZVwiKS5hY3RpdmUgPSAhMSxcbiAgICAgICAgICAgIGMuUmVzb3VyY2VNZ3IuZ2V0SW5zdGFuY2UoKS5sb2FkU3ByaXRlZnJhbWUodC5idW5kbGUsIHQuZXF1aXBJY29uLFxuICAgICAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIGUubm9kZS5nZXRDb21wb25lbnQoY2MuU3ByaXRlKS5zcHJpdGVGcmFtZSA9IHRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwic2tpbGxCb29rXCI6XG4gICAgICAgICAgICAgICAgdCA9IHAuRGF0YU1nci5nZXRJbnN0YW5jZSgpLmdldFNraWxsQm9vayh0aGlzLmRyb3BHb29kc0RhdGEuZ29vZHNJZCksXG4gICAgICAgICAgICBwLkRhdGFNZ3IuZ2V0SW5zdGFuY2UoKS5nZXRTa2lsbFF1YWxpdHkodC5xdWFsaXR5SWQpLFxuICAgICAgICAgICAgdGhpcy5ub2RlLnNjYWxlID0gLjUsXG4gICAgICAgICAgICB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJMYWJOYW1lXCIpLmdldENvbXBvbmVudChjYy5MYWJlbCkuc3RyaW5nID0gdC5uYW1lLFxuICAgICAgICAgICAgZy5QbGF5ZXJNZ3IuZ2V0SW5zdGFuY2UoKS5nZXRUcmFja0RhdGEoKS5nZXRBYlR5cGUoKSxcbiAgICAgICAgICAgIGMuUmVzb3VyY2VNZ3IuZ2V0SW5zdGFuY2UoKS5sb2FkU3ByaXRlZnJhbWUoXCJpY29uSW1nXCIsIHQuU2tpbGxJY29uLFxuICAgICAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgIGUubm9kZS5nZXRDb21wb25lbnQoY2MuU3ByaXRlKS5zcHJpdGVGcmFtZSA9IHRcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgdGhpcy5ub2RlLmdldENoaWxkQnlOYW1lKFwiTGFiTmFtZVwiKS5hY3RpdmUgPSAhMTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRyb3BHb29kc0RhdGEuaUNvdW50IDw9IDEgPyB0aGlzLkxhYkNvdW50Lm5vZGUuYWN0aXZlID0gITEgOiAodGhpcy5MYWJDb3VudC5ub2RlLmFjdGl2ZSA9ICEwLCB0aGlzLkxhYkNvdW50LnN0cmluZyA9IFwiK1wiICsgdGhpcy5kcm9wR29vZHNEYXRhLmlDb3VudClcbiAgICB9LFxuICAgIGUucHJvdG90eXBlLmF1dG9Ecm9wID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgdGhpcy5jdXJ0d2VlbiA9IGNjLnR3ZWVuKHRoaXMubm9kZSkuYmV6aWVyQnkoLjUsIGNjLnYyKCksIGNjLnYyKDIwLCAyMDApLCBjYy52Mig0MCwgMCkpLmRlbGF5KC41KS5jYWxsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdC5hdXRvUmVjeWNsZSgpXG4gICAgICAgIH0pLnN0YXJ0KClcbiAgICB9LFxuICAgIGUucHJvdG90eXBlLmF1dG9SZWN5Y2xlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcyxcbiAgICAgICAgZSA9IGNjLnYzKCk7XG4gICAgICAgIGwuZGVmYXVsdC5pbnN0YW5jZS5wbGF5ZXIgJiYgY2MuaXNWYWxpZChsLmRlZmF1bHQuaW5zdGFuY2UucGxheWVyLm9iamVjdCkgJiYgKGUgPSBjYy52MyhsLmRlZmF1bHQuaW5zdGFuY2UucGxheWVyLm9iamVjdC54LCAxNTAsIDApKSxcbiAgICAgICAgdGhpcy5jdXJ0d2VlbiAmJiAodGhpcy5jdXJ0d2Vlbi5zdG9wKCksIHRoaXMuY3VydHdlZW4gPSBudWxsKSxcbiAgICAgICAgbi5BdWRpb01nci5nZXRJbnN0YW5jZSgpLnBsYXlFZmZlY3QodS5BdWRpb0lkLkJhdHRsZVNvdW5kX1BpY2tVcFRoaW5ncyksXG4gICAgICAgIHRoaXMuY3VydHdlZW4gPSBjYy50d2Vlbih0aGlzLm5vZGUpLnRvKC41LCB7XG4gICAgICAgICAgICBwb3NpdGlvbjogZVxuICAgICAgICB9KS5jYWxsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdC5hZGRUb1Bvb2wodC5ub2RlLCBcIk5vZGVEcm9wR29vZHNcIiksXG4gICAgICAgICAgICB0LmN1cnR3ZWVuID0gbnVsbFxuICAgICAgICB9KS5zdGFydCgpXG4gICAgfSxcbiAgICBlLnByb3RvdHlwZS5yZWN5Y2xlR29vZHMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSBnLlBsYXllck1nci5nZXRJbnN0YW5jZSgpLmdlVXNlckRhdGEoKTtcbiAgICAgICAgc3dpdGNoICh0aGlzLmRyb3BHb29kc0RhdGEuZ29vZHNUeXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiZ29sZFwiOlxuICAgICAgICAgICAgICAgIHQuYWRkR29sZE51bSh0aGlzLmRyb3BHb29kc0RhdGEuaUNvdW50KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImluR290XCI6XG4gICAgICAgICAgICAgICAgdC5hZGRJbkdvdE51bSh0aGlzLmRyb3BHb29kc0RhdGEuaUNvdW50KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInBvd2VyXCI6XG4gICAgICAgICAgICAgICAgdC5hZGRQb3dlck51bSh0aGlzLmRyb3BHb29kc0RhdGEuaUNvdW50KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcImVxdWlwXCI6XG4gICAgICAgICAgICAgICAgdC5hZGRFcXVpcEZvcklkKHRoaXMuZHJvcEdvb2RzRGF0YS5nb29kc0lkKSxcbiAgICAgICAgICAgIGQuZGVmYXVsdC5nZXRJbnN0YW5jZSgpLmFkZEVxdWlwQ291bnRGb3JUYXNrKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgXCJza2lsbEJvb2tcIjpcbiAgICAgICAgICAgICAgICB0LmFkZFNraWxsQm9va0lkKHRoaXMuZHJvcEdvb2RzRGF0YS5nb29kc0lkKSxcbiAgICAgICAgICAgIGQuZGVmYXVsdC5nZXRJbnN0YW5jZSgpLmFkZFNraWxsQm9va0NvdW50Rm9yVGFzaygpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBlLnByb3RvdHlwZS5hZGRUb1Bvb2wgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGNjLmlzVmFsaWQodCkgJiYgcy5Qb29sTWdyLmdldEluc3RhbmNlKCkuZnJlZU5vZGUoZSwgdClcbiAgICB9LFxuICAgIHIoW20oY2MuTGFiZWwpXSwgZS5wcm90b3R5cGUsIFwiTGFiQ291bnRcIiwgdm9pZCAwKSxcbiAgICByKFtmXSwgZSlcbn0gKGNjLkNvbXBvbmVudCk7XG5vLmRlZmF1bHQgPSB5LFxuZnVuY3Rpb24odCkge1xuICAgIHQuRW51bUdvbGQgPSBcImdvbGRcIixcbiAgICB0LkVudW1JbkdvdCA9IFwiaW5Hb3RcIixcbiAgICB0LkVudW1FcXVpcCA9IFwiZXF1aXBcIixcbiAgICB0LkVudW1Ta2lsbEJvb2sgPSBcInNraWxsQm9va1wiLFxuICAgIHQuRW51bVNhbHV0YXRpb24gPSBcInNhbHV0YXRpb25cIlxufSAoby5FbnVtR29vZHNUeXBlIHx8IChvLkVudW1Hb29kc1R5cGUgPSB7fSkpIl19