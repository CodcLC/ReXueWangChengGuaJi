
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/NodeCurrency.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'b1253WL8TRCvJL9aKkGuDpv', 'NodeCurrency');
// scripts/NodeCurrency.js

"use strict";

var t = require;
var e = module;
var o = exports;

var _a,
    i = void 0 && (void 0).__extends || (_a = function a(t, e) {
  return (_a = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (t, e) {
    t.__proto__ = e;
  } || function (t, e) {
    for (var o in e) {
      Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
    }
  })(t, e);
}, function (t, e) {
  function o() {
    this.constructor = t;
  }

  _a(t, e), t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o());
}),
    r = void 0 && (void 0).__decorate || function (t, e, o, a) {
  var i,
      r = arguments.length,
      n = r < 3 ? e : null === a ? a = Object.getOwnPropertyDescriptor(e, o) : a;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) n = Reflect.decorate(t, e, o, a);else for (var s = t.length - 1; s >= 0; s--) {
    (i = t[s]) && (n = (r < 3 ? i(n) : r > 3 ? i(e, o, n) : i(e, o)) || n);
  }
  return r > 3 && n && Object.defineProperty(e, o, n), n;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});

var n = t("EventMgr"),
    s = t("UIMgr"),
    c = t("Config"),
    l = t("PlayerMgr"),
    u = cc._decorator,
    p = u.ccclass,
    g = u.property,
    d = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    return e.GoldBg = null, e.InGotBg = null, e.GoldNum = null, e.InGotNum = null, e;
  }

  return i(e, t), e.prototype.onLoad = function () {
    this.registerEvent(), this.registerBtnEvent();
  }, e.prototype.start = function () {
    this.initData(), this.initView();
  }, e.prototype.registerEvent = function () {
    n.EventMgr.getInstance().on(c.EventName.RefreshGoldNumAndShow, this, this.refreshGoldNumAndShow), n.EventMgr.getInstance().on(c.EventName.RefreshInGotNumAndShow, this, this.refreshInGotNumAndShow);
  }, e.prototype.registerBtnEvent = function () {
    this.GoldBg.on(cc.Node.EventType.TOUCH_END, function () {
      s.UIMgr.getInstance().openUI(c.UIID.UIGeneralWindow, -1, c.GeneralWindowType.GoldWindow);
    }), this.InGotBg.on(cc.Node.EventType.TOUCH_END, function () {
      s.UIMgr.getInstance().openUI(c.UIID.UIGeneralWindow, -1, c.GeneralWindowType.InGotWindow);
    });
  }, e.prototype.initData = function () {
    this.userData = l.PlayerMgr.getInstance().geUserData();
  }, e.prototype.initView = function () {
    this.refreshGoldNumAndShow(), this.refreshInGotNumAndShow();
  }, e.prototype.refreshGoldNumAndShow = function () {
    this.GoldNum.string = "" + this.userData.getGoldNum();
  }, e.prototype.refreshInGotNumAndShow = function () {
    this.InGotNum.string = "" + this.userData.getInGotNum();
  }, e.prototype.onDestroy = function () {
    n.EventMgr.getInstance().off(c.EventName.RefreshGoldNumAndShow, this, this.refreshGoldNumAndShow), n.EventMgr.getInstance().off(c.EventName.RefreshInGotNumAndShow, this, this.refreshInGotNumAndShow);
  }, r([g({
    type: cc.Node,
    tooltip: "金币点击框"
  })], e.prototype, "GoldBg", void 0), r([g({
    type: cc.Node,
    tooltip: "元宝点击框"
  })], e.prototype, "InGotBg", void 0), r([g({
    type: cc.Label,
    tooltip: "金币标签"
  })], e.prototype, "GoldNum", void 0), r([g({
    type: cc.Label,
    tooltip: "元宝标签"
  })], e.prototype, "InGotNum", void 0), r([p], e);
}(cc.Component);

o["default"] = d;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcTm9kZUN1cnJlbmN5LmpzIl0sIm5hbWVzIjpbInQiLCJyZXF1aXJlIiwiZSIsIm1vZHVsZSIsIm8iLCJleHBvcnRzIiwiYSIsImkiLCJfX2V4dGVuZHMiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJyIiwiX19kZWNvcmF0ZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsIm4iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJzIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImMiLCJsIiwidSIsImNjIiwiX2RlY29yYXRvciIsInAiLCJjY2NsYXNzIiwiZyIsInByb3BlcnR5IiwiZCIsImFwcGx5IiwiR29sZEJnIiwiSW5Hb3RCZyIsIkdvbGROdW0iLCJJbkdvdE51bSIsIm9uTG9hZCIsInJlZ2lzdGVyRXZlbnQiLCJyZWdpc3RlckJ0bkV2ZW50Iiwic3RhcnQiLCJpbml0RGF0YSIsImluaXRWaWV3IiwiRXZlbnRNZ3IiLCJnZXRJbnN0YW5jZSIsIm9uIiwiRXZlbnROYW1lIiwiUmVmcmVzaEdvbGROdW1BbmRTaG93IiwicmVmcmVzaEdvbGROdW1BbmRTaG93IiwiUmVmcmVzaEluR290TnVtQW5kU2hvdyIsInJlZnJlc2hJbkdvdE51bUFuZFNob3ciLCJOb2RlIiwiRXZlbnRUeXBlIiwiVE9VQ0hfRU5EIiwiVUlNZ3IiLCJvcGVuVUkiLCJVSUlEIiwiVUlHZW5lcmFsV2luZG93IiwiR2VuZXJhbFdpbmRvd1R5cGUiLCJHb2xkV2luZG93IiwiSW5Hb3RXaW5kb3ciLCJ1c2VyRGF0YSIsIlBsYXllck1nciIsImdlVXNlckRhdGEiLCJzdHJpbmciLCJnZXRHb2xkTnVtIiwiZ2V0SW5Hb3ROdW0iLCJvbkRlc3Ryb3kiLCJvZmYiLCJ0eXBlIiwidG9v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UixDQUFELENBQUYsQ0FBRCxFQUdJM0UsQ0FBQyxDQUFDVyxTQUhOLEVBR2lCLFFBSGpCLEVBRzJCLEtBQUssQ0FIaEMsQ0F4Q00sRUE0Q1BLLENBQUMsQ0FBQyxDQUFDa0IsQ0FBQyxDQUFDO0lBQ0R3QyxJQUFJLEVBQUU1QyxFQUFFLENBQUMwQixJQURSO0lBRURtQixPQUFPLEVBQUU7RUFGUixDQUFELENBQUYsQ0FBRCxFQUdJM0UsQ0FBQyxDQUFDVyxTQUhOLEVBR2lCLFNBSGpCLEVBRzRCLEtBQUssQ0FIakMsQ0E1Q00sRUFnRFBLLENBQUMsQ0FBQyxDQUFDa0IsQ0FBQyxDQUFDO0lBQ0R3QyxJQUFJLEVBQUU1QyxFQUFFLENBQUM4QyxLQURSO0lBRURELE9BQU8sRUFBRTtFQUZSLENBQUQsQ0FBRixDQUFELEVBR0kzRSxDQUFDLENBQUNXLFNBSE4sRUFHaUIsU0FIakIsRUFHNEIsS0FBSyxDQUhqQyxDQWhETSxFQW9EUEssQ0FBQyxDQUFDLENBQUNrQixDQUFDLENBQUM7SUFDRHdDLElBQUksRUFBRTVDLEVBQUUsQ0FBQzhDLEtBRFI7SUFFREQsT0FBTyxFQUFFO0VBRlIsQ0FBRCxDQUFGLENBQUQsRUFHSTNFLENBQUMsQ0FBQ1csU0FITixFQUdpQixVQUhqQixFQUc2QixLQUFLLENBSGxDLENBcERNLEVBd0RQSyxDQUFDLENBQUMsQ0FBQ2dCLENBQUQsQ0FBRCxFQUFNaEMsQ0FBTixDQXhERDtBQXlESCxDQWxFRyxDQWtFRDhCLEVBQUUsQ0FBQytDLFNBbEVGLENBUEo7O0FBMEVBM0UsQ0FBQyxXQUFELEdBQVlrQyxDQUFaIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdCA9IHJlcXVpcmU7XG52YXIgZSA9IG1vZHVsZTtcbnZhciBvID0gZXhwb3J0cztcbnZhciBhLCBpID0gdGhpcyAmJiB0aGlzLl9fZXh0ZW5kcyB8fCAoYSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICByZXR1cm4gKGEgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwge1xuICAgICAgICBfX3Byb3RvX186IFtdXG4gICAgfVxuICAgIGluc3RhbmNlb2YgQXJyYXkgJiZcbiAgICBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHQuX19wcm90b19fID0gZVxuICAgIH0gfHxcbiAgICBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGZvciAodmFyIG8gaW4gZSkgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIG8pICYmICh0W29dID0gZVtvXSlcbiAgICB9KSh0LCBlKVxufSxcbmZ1bmN0aW9uKHQsIGUpIHtcbiAgICBmdW5jdGlvbiBvKCkge1xuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yID0gdFxuICAgIH1cbiAgICBhKHQsIGUpLFxuICAgIHQucHJvdG90eXBlID0gbnVsbCA9PT0gZSA/IE9iamVjdC5jcmVhdGUoZSkgOiAoby5wcm90b3R5cGUgPSBlLnByb3RvdHlwZSwgbmV3IG8pXG59KSxcbnIgPSB0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSB8fFxuZnVuY3Rpb24odCwgZSwgbywgYSkge1xuICAgIHZhciBpLCByID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICBuID0gciA8IDMgPyBlOiBudWxsID09PSBhID8gYSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgbykgOiBhO1xuICAgIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBSZWZsZWN0ICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSkgbiA9IFJlZmxlY3QuZGVjb3JhdGUodCwgZSwgbywgYSk7XG4gICAgZWxzZSBmb3IgKHZhciBzID0gdC5sZW5ndGggLSAxOyBzID49IDA7IHMtLSkoaSA9IHRbc10pICYmIChuID0gKHIgPCAzID8gaShuKSA6IHIgPiAzID8gaShlLCBvLCBuKSA6IGkoZSwgbykpIHx8IG4pO1xuICAgIHJldHVybiByID4gMyAmJiBuICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBvLCBuKSxcbiAgICBuXG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6ICEwXG59KTtcbnZhciBuID0gdChcIkV2ZW50TWdyXCIpLFxucyA9IHQoXCJVSU1nclwiKSxcbmMgPSB0KFwiQ29uZmlnXCIpLFxubCA9IHQoXCJQbGF5ZXJNZ3JcIiksXG51ID0gY2MuX2RlY29yYXRvcixcbnAgPSB1LmNjY2xhc3MsXG5nID0gdS5wcm9wZXJ0eSxcbmQgPSBmdW5jdGlvbih0KSB7XG4gICAgZnVuY3Rpb24gZSgpIHtcbiAgICAgICAgdmFyIGUgPSBudWxsICE9PSB0ICYmIHQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICByZXR1cm4gZS5Hb2xkQmcgPSBudWxsLFxuICAgICAgICBlLkluR290QmcgPSBudWxsLFxuICAgICAgICBlLkdvbGROdW0gPSBudWxsLFxuICAgICAgICBlLkluR290TnVtID0gbnVsbCxcbiAgICAgICAgZVxuICAgIH1cbiAgICByZXR1cm4gaShlLCB0KSxcbiAgICBlLnByb3RvdHlwZS5vbkxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50KCksXG4gICAgICAgIHRoaXMucmVnaXN0ZXJCdG5FdmVudCgpXG4gICAgfSxcbiAgICBlLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmluaXREYXRhKCksXG4gICAgICAgIHRoaXMuaW5pdFZpZXcoKVxuICAgIH0sXG4gICAgZS5wcm90b3R5cGUucmVnaXN0ZXJFdmVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBuLkV2ZW50TWdyLmdldEluc3RhbmNlKCkub24oYy5FdmVudE5hbWUuUmVmcmVzaEdvbGROdW1BbmRTaG93LCB0aGlzLCB0aGlzLnJlZnJlc2hHb2xkTnVtQW5kU2hvdyksXG4gICAgICAgIG4uRXZlbnRNZ3IuZ2V0SW5zdGFuY2UoKS5vbihjLkV2ZW50TmFtZS5SZWZyZXNoSW5Hb3ROdW1BbmRTaG93LCB0aGlzLCB0aGlzLnJlZnJlc2hJbkdvdE51bUFuZFNob3cpXG4gICAgfSxcbiAgICBlLnByb3RvdHlwZS5yZWdpc3RlckJ0bkV2ZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuR29sZEJnLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX0VORCxcbiAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBzLlVJTWdyLmdldEluc3RhbmNlKCkub3BlblVJKGMuVUlJRC5VSUdlbmVyYWxXaW5kb3csIC0xLCBjLkdlbmVyYWxXaW5kb3dUeXBlLkdvbGRXaW5kb3cpXG4gICAgICAgIH0pLFxuICAgICAgICB0aGlzLkluR290Qmcub24oY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfRU5ELFxuICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHMuVUlNZ3IuZ2V0SW5zdGFuY2UoKS5vcGVuVUkoYy5VSUlELlVJR2VuZXJhbFdpbmRvdywgLTEsIGMuR2VuZXJhbFdpbmRvd1R5cGUuSW5Hb3RXaW5kb3cpXG4gICAgICAgIH0pXG4gICAgfSxcbiAgICBlLnByb3RvdHlwZS5pbml0RGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnVzZXJEYXRhID0gbC5QbGF5ZXJNZ3IuZ2V0SW5zdGFuY2UoKS5nZVVzZXJEYXRhKClcbiAgICB9LFxuICAgIGUucHJvdG90eXBlLmluaXRWaWV3ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMucmVmcmVzaEdvbGROdW1BbmRTaG93KCksXG4gICAgICAgIHRoaXMucmVmcmVzaEluR290TnVtQW5kU2hvdygpXG4gICAgfSxcbiAgICBlLnByb3RvdHlwZS5yZWZyZXNoR29sZE51bUFuZFNob3cgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5Hb2xkTnVtLnN0cmluZyA9IFwiXCIgKyB0aGlzLnVzZXJEYXRhLmdldEdvbGROdW0oKVxuICAgIH0sXG4gICAgZS5wcm90b3R5cGUucmVmcmVzaEluR290TnVtQW5kU2hvdyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLkluR290TnVtLnN0cmluZyA9IFwiXCIgKyB0aGlzLnVzZXJEYXRhLmdldEluR290TnVtKClcbiAgICB9LFxuICAgIGUucHJvdG90eXBlLm9uRGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBuLkV2ZW50TWdyLmdldEluc3RhbmNlKCkub2ZmKGMuRXZlbnROYW1lLlJlZnJlc2hHb2xkTnVtQW5kU2hvdywgdGhpcywgdGhpcy5yZWZyZXNoR29sZE51bUFuZFNob3cpLFxuICAgICAgICBuLkV2ZW50TWdyLmdldEluc3RhbmNlKCkub2ZmKGMuRXZlbnROYW1lLlJlZnJlc2hJbkdvdE51bUFuZFNob3csIHRoaXMsIHRoaXMucmVmcmVzaEluR290TnVtQW5kU2hvdylcbiAgICB9LFxuICAgIHIoW2coe1xuICAgICAgICB0eXBlOiBjYy5Ob2RlLFxuICAgICAgICB0b29sdGlwOiBcIumHkeW4geeCueWHu+ahhlwiXG4gICAgfSldLCBlLnByb3RvdHlwZSwgXCJHb2xkQmdcIiwgdm9pZCAwKSxcbiAgICByKFtnKHtcbiAgICAgICAgdHlwZTogY2MuTm9kZSxcbiAgICAgICAgdG9vbHRpcDogXCLlhYPlrp3ngrnlh7vmoYZcIlxuICAgIH0pXSwgZS5wcm90b3R5cGUsIFwiSW5Hb3RCZ1wiLCB2b2lkIDApLFxuICAgIHIoW2coe1xuICAgICAgICB0eXBlOiBjYy5MYWJlbCxcbiAgICAgICAgdG9vbHRpcDogXCLph5HluIHmoIfnrb5cIlxuICAgIH0pXSwgZS5wcm90b3R5cGUsIFwiR29sZE51bVwiLCB2b2lkIDApLFxuICAgIHIoW2coe1xuICAgICAgICB0eXBlOiBjYy5MYWJlbCxcbiAgICAgICAgdG9vbHRpcDogXCLlhYPlrp3moIfnrb5cIlxuICAgIH0pXSwgZS5wcm90b3R5cGUsIFwiSW5Hb3ROdW1cIiwgdm9pZCAwKSxcbiAgICByKFtwXSwgZSlcbn0gKGNjLkNvbXBvbmVudCk7XG5vLmRlZmF1bHQgPSBkIl19