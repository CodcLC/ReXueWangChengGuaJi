
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/UIFreeTime.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'ff99crJvAVHW7/eEtlw8hQN', 'UIFreeTime');
// scripts/UIFreeTime.js

"use strict";

var t = require;
var e = module;
var o = exports;

var _a,
    i = void 0 && (void 0).__extends || (_a = function a(t, e) {
  return (_a = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (t, e) {
    t.__proto__ = e;
  } || function (t, e) {
    for (var o in e) {
      Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
    }
  })(t, e);
}, function (t, e) {
  function o() {
    this.constructor = t;
  }

  _a(t, e), t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o());
}),
    r = void 0 && (void 0).__decorate || function (t, e, o, a) {
  var i,
      r = arguments.length,
      n = r < 3 ? e : null === a ? a = Object.getOwnPropertyDescriptor(e, o) : a;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) n = Reflect.decorate(t, e, o, a);else for (var s = t.length - 1; s >= 0; s--) {
    (i = t[s]) && (n = (r < 3 ? i(n) : r > 3 ? i(e, o, n) : i(e, o)) || n);
  }
  return r > 3 && n && Object.defineProperty(e, o, n), n;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});

var n = t("BaseUI"),
    s = t("Appcfg"),
    c = t("SdkMgr"),
    l = t("Config"),
    u = t("CommonBirge"),
    p = t("CommonCfg"),
    g = t("ComDataMgr"),
    d = t("ComPlayerMgr"),
    h = cc._decorator,
    f = h.ccclass,
    m = h.property,
    y = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    return e.btnClose = null, e.itemLayout = null, e;
  }

  return i(e, t), e.prototype.onLoad = function () {
    this.addEvent(s.BaseEventName.CloseUI, this.eventCloseUI), this.addEvent(p.CommonEventName.GetRewardEnd, this.refreshRewardEnd);
  }, e.prototype.start = function () {
    var t = this;
    this.freeTimeData = d.ComPlayerMgr.getInstance().getFreeTimeData(), this.initBtn();

    for (var e = function e(_e) {
      var a = o.itemLayout.children[_e];
      if (null == g.ComDataMgr.getInstance().getFreeTimeById(_e + 1)) return a.active = !1, "continue";
      a.name = _e + 1 + "";
      var i = o.freeTimeData.getDataById(_e + 1),
          r = a.getChildByName("mask"),
          n = r.getChildByName("icon").getComponent(cc.Sprite);
      r.getChildByName("icon2").y = 150;
      var s = a.getChildByName("num").getComponent(cc.Label),
          c = a.getChildByName("btnOk"),
          l = g.ComDataMgr.getInstance().getFreeTimeItemById(i.itemId),
          u = g.ComDataMgr.getInstance().getGoodsById(l.goodsId);
      o.loadSpriteFrame(u.bundleName, u.rewardIcon, function (t) {
        n.spriteFrame = t;
      }), s.string = "x" + l.rewardNum, l.adNum > 0 ? i.adNum + 1 < l.adNum ? o.refreshItem(a, 1, l.adNum - i.adNum, 0) : o.refreshItem(a, 0, 0, l.goldNum) : o.refreshItem(a, 2, 0, l.goldNum), c.on(cc.Node.EventType.TOUCH_END, function () {
        t.clickItem(_e + 1, a);
      });
    }, o = this, a = 0; a < this.itemLayout.childrenCount; a++) {
      e(a);
    }
  }, e.prototype.clickItem = function (t, e) {
    var o = this,
        a = this.freeTimeData.getDataById(t),
        i = g.ComDataMgr.getInstance().getFreeTimeItemById(a.itemId);
    if (i.adNum > 0) a.adNum + 1 >= i.adNum ? c.SdkMgr.getInstance().playVideo(c.AdType.AdFreeTime, function () {
      var t = a.goodsId + p.CommonCfg.splitNum + i.rewardNum,
          r = e.convertToWorldSpaceAR(cc.Vec2.ZERO);
      d.ComPlayerMgr.getInstance().checkOpenReward(t, r), o.freeTimeData.changleFreeTimedata(a.id), o.item = e, o.curData = a;
    }) : c.SdkMgr.getInstance().playVideo(c.AdType.AdFreeTime, function () {
      o.freeTimeData.addAdNumByData(a), a.adNum + 1 >= i.adNum ? o.refreshItem(e, 0, 0, 0) : o.refreshItem(e, 1, i.adNum - a.adNum, 0);
    });else if (u.CommonBrige.Instance().subGoodsNum(i.goldId, i.goldNum)) {
      var r = a.goodsId + p.CommonCfg.splitNum + i.rewardNum,
          n = e.convertToWorldSpaceAR(cc.Vec2.ZERO);
      d.ComPlayerMgr.getInstance().checkOpenReward(r, n), this.freeTimeData.changleFreeTimedata(a.id), this.item = e, this.curData = a;
    } else this.openUI(l.UIID.UITips, "物品不足");
  }, e.prototype.refreshRewardEnd = function () {
    this.changleItemAni(this.item, this.curData);
  }, e.prototype.eventCloseUI = function (t) {
    t == p.ComUIID.UIReward && this.changleItemAni(this.item, this.curData);
  }, e.prototype.changleItemAni = function (t, e) {
    var o,
        a,
        i = t.getChildByName("mask"),
        r = i.getChildByName("icon").getComponent(cc.Sprite),
        n = i.getChildByName("icon2").getComponent(cc.Sprite);
    r.node.y > 50 ? (a = r, o = n) : (a = n, o = r);
    var s = t.getChildByName("num").getComponent(cc.Label),
        c = g.ComDataMgr.getInstance().getFreeTimeItemById(e.itemId),
        l = g.ComDataMgr.getInstance().getGoodsById(c.goodsId),
        u = t.getChildByName("btnOk");
    u.active = !1, s.string = "", this.loadSpriteFrame(l.bundleName, l.rewardIcon, function (t) {
      a.spriteFrame = t;
    }), cc.tween(o.node).to(1, {
      position: new cc.Vec3(0, -150)
    }).call(function () {
      o.spriteFrame = null, o.node.y = 150;
    }).start(), cc.tween(a.node).to(1, {
      position: new cc.Vec3(0, 12)
    }).call(function () {
      s.string = "x" + c.rewardNum, u.active = !0;
    }).start(), c.adNum > 0 ? e.adNum + 1 < c.adNum ? this.refreshItem(t, 1, c.adNum - e.adNum, 0) : this.refreshItem(t, 0, 0, c.goldNum) : this.refreshItem(t, 2, 0, c.goldNum);
  }, e.prototype.refreshItem = function (t, e, o, a) {
    var i = t.getChildByName("btnOk"),
        r = i.getChildByName("num"),
        n = i.getComponent(cc.Sprite);
    0 == e ? (r.active = !1, this.loadSpriteFrame("comimgs", "button/btn2_adget", function (t) {
      n.spriteFrame = t;
    })) : 1 == e ? (r.active = !0, r.getComponent(cc.Label).string = "x" + o, this.loadSpriteFrame("comimgs", "button/btn2_adNum", function (t) {
      n.spriteFrame = t;
    })) : 2 == e && (r.active = !0, r.getComponent(cc.Label).string = "x" + a, this.loadSpriteFrame("comimgs", "button/btn2_gold", function (t) {
      n.spriteFrame = t;
    }));
  }, e.prototype.initBtn = function () {
    var t = this;
    this.btnClose.on(cc.Node.EventType.TOUCH_END, function () {
      t.closeUI();
    });
  }, r([m(cc.Node)], e.prototype, "btnClose", void 0), r([m(cc.Node)], e.prototype, "itemLayout", void 0), r([f], e);
}(n["default"]);

o["default"] = y;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcVUlGcmVlVGltZS5qcyJdLCJuYW1lcyI6WyJ0IiwicmVxdWlyZSIsImUiLCJtb2R1bGUiLCJvIiwiZXhwb3J0cyIsImEiLCJpIiwiX19leHRlbmRzIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiciIsIl9fZGVjb3JhdGUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJuIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUmVmbGVjdCIsImRlY29yYXRlIiwicyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJjIiwibCIsInUiLCJwIiwiZyIsImQiLCJoIiwiY2MiLCJfZGVjb3JhdG9yIiwiZiIsImNjY2xhc3MiLCJtIiwicHJvcGVydHkiLCJ5IiwiYXBwbHkiLCJidG5DbG9zZSIsIml0ZW1MYXlvdXQiLCJvbkxvYWQiLCJhZGRFdmVudCIsIkJhc2VFdmVudE5hbWUiLCJDbG9zZVVJIiwiZXZlbnRDbG9zZVVJIiwiQ29tbW9uRXZlbnROYW1lIiwiR2V0UmV3YXJkRW5kIiwicmVmcmVzaFJld2FyZEVuZCIsInN0YXJ0IiwiZnJlZVRpbWVEYXRhIiwiQ29tUGxheWVyTWdyIiwiZ2V0SW5zdGFuY2UiLCJnZXRGcmVlVGltZURhdGEiLCJpbml0QnRuIiwiY2hpbGRyZW4iLCJDb21EYXRhTWdyIiwiZ2V0RnJlZVRpbWVCeUlkIiwiYWN0aXZlIiwibmFtZSIsImdldERhdGFCeUlkIiwiZ2V0Q2hpbGRCeU5hbWUiLCJnZXRDb21wb25lbnQiLCJTcHJpdGUiLCJMYWJlbCIsImdldEZyZWVUaW1lSXRlbUJ5SWQiLCJpdGVtSWQiLCJnZXRHb29kc0J5SWQiLCJnb29kc0lkIiwibG9hZFNwcml0ZUZyYW1lIiwiYnVuZGxlTmFtZSIsInJld2FyZEljb24iLCJzcHJpdGVGcmFtZSIsInN0cmluZyIsInJld2FyZE51bSIsImFkTnVtIiwicmVmcmVzaEl0ZW0iLCJnb2xkTnVtIiwib24iLCJOb2RlIiwiRXZlbnRUeXBlIiwiVE9VQ0hfRU5EIiwiY2xpY2tJdGVtIiwiY2hpbGRyZW5Db3VudCIsIlNka01nciIsInBsYXlWaWRlbyIsIkFkVHlwZSIsIkFkRnJlZVRpbWUiLCJDb21tb25DZmciLCJzcGxpdE51bSIsImNvbnZlcnRUb1dvcmxkU3BhY2VBUiIsIlZlYzIiLCJaRVJPIiwiY2hlY2tPcGVuUmV3YXJkIiwiY2hhbmdsZUZyZWVUaW1lZGF0YSIsImlkIiwiaXRlbSIsImN1ckRhdGEiLCJhZGRBZE51bUJ5RGF0YSIsIkNvbW1vbkJyaWdlIiwiSW5zdGFuY2UiLCJzdWJHb29kc051bSIsImdvbGRJZCIsIm9wZW5VSSIsIlVJSUQiLCJVSVRpcHMiLCJjaGFuZ2xlSXRlbUFuaSIsIkNvbVVJSUQiLCJVSVJld2FyZCIsIm5vZGUiLCJ0d2VlbiIsInRvIiwicG9zaXRpb24iLCJWZWMzIiwiY2xvc2VVSSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxDQUFDLEdBQUdDLE9BQVI7QUFDQSxJQUFJQyxDQUFDLEdBQUdDLE1BQVI7QUFDQSxJQUFJQyxDQUFDLEdBQUdDLE9BQVI7O0FBQ0EsSUFBSUMsRUFBSjtBQUFBLElBQU9DLENBQUMsR0FBRyxVQUFRLFNBQUtDLFNBQWIsS0FBMkJGLEVBQUMsR0FBRyxXQUFTTixDQUFULEVBQVlFLENBQVosRUFBZTtFQUNyRCxPQUFPLENBQUNJLEVBQUMsR0FBR0csTUFBTSxDQUFDQyxjQUFQLElBQXlCO0lBQ2pDQyxTQUFTLEVBQUU7RUFEc0IsYUFHMUJDLEtBSDBCLElBSXJDLFVBQVNaLENBQVQsRUFBWUUsQ0FBWixFQUFlO0lBQ1hGLENBQUMsQ0FBQ1csU0FBRixHQUFjVCxDQUFkO0VBQ0gsQ0FOVyxJQU9aLFVBQVNGLENBQVQsRUFBWUUsQ0FBWixFQUFlO0lBQ1gsS0FBSyxJQUFJRSxDQUFULElBQWNGLENBQWQ7TUFBaUJPLE1BQU0sQ0FB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RUFBRSxDQUFDZ0QsSUFBSixDQUFGLENBQUQsRUFBZWxGLENBQUMsQ0FBQ1csU0FBakIsRUFBNEIsVUFBNUIsRUFBd0MsS0FBSyxDQUE3QyxDQXRITSxFQXVIUEssQ0FBQyxDQUFDLENBQUNzQixDQUFDLENBQUNKLEVBQUUsQ0FBQ2dELElBQUosQ0FBRixDQUFELEVBQWVsRixDQUFDLENBQUNXLFNBQWpCLEVBQTRCLFlBQTVCLEVBQTBDLEtBQUssQ0FBL0MsQ0F2SE0sRUF3SFBLLENBQUMsQ0FBQyxDQUFDb0IsQ0FBRCxDQUFELEVBQU1wQyxDQUFOLENBeEhEO0FBeUhILENBaElHLENBZ0lEb0IsQ0FBQyxXQWhJQSxDQVhKOztBQTRJQWxCLENBQUMsV0FBRCxHQUFZc0MsQ0FBWiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHQgPSByZXF1aXJlO1xudmFyIGUgPSBtb2R1bGU7XG52YXIgbyA9IGV4cG9ydHM7XG52YXIgYSwgaSA9IHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMgfHwgKGEgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgcmV0dXJuIChhID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IHtcbiAgICAgICAgX19wcm90b19fOiBbXVxuICAgIH1cbiAgICBpbnN0YW5jZW9mIEFycmF5ICYmXG4gICAgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB0Ll9fcHJvdG9fXyA9IGVcbiAgICB9IHx8XG4gICAgZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBmb3IgKHZhciBvIGluIGUpIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChlLCBvKSAmJiAodFtvXSA9IGVbb10pXG4gICAgfSkodCwgZSlcbn0sXG5mdW5jdGlvbih0LCBlKSB7XG4gICAgZnVuY3Rpb24gbygpIHtcbiAgICAgICAgdGhpcy5jb25zdHJ1Y3RvciA9IHRcbiAgICB9XG4gICAgYSh0LCBlKSxcbiAgICB0LnByb3RvdHlwZSA9IG51bGwgPT09IGUgPyBPYmplY3QuY3JlYXRlKGUpIDogKG8ucHJvdG90eXBlID0gZS5wcm90b3R5cGUsIG5ldyBvKVxufSksXG5yID0gdGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUgfHxcbmZ1bmN0aW9uKHQsIGUsIG8sIGEpIHtcbiAgICB2YXIgaSwgciA9IGFyZ3VtZW50cy5sZW5ndGgsXG4gICAgbiA9IHIgPCAzID8gZTogbnVsbCA9PT0gYSA/IGEgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIG8pIDogYTtcbiAgICBpZiAoXCJvYmplY3RcIiA9PSB0eXBlb2YgUmVmbGVjdCAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUpIG4gPSBSZWZsZWN0LmRlY29yYXRlKHQsIGUsIG8sIGEpO1xuICAgIGVsc2UgZm9yICh2YXIgcyA9IHQubGVuZ3RoIC0gMTsgcyA+PSAwOyBzLS0pKGkgPSB0W3NdKSAmJiAobiA9IChyIDwgMyA/IGkobikgOiByID4gMyA/IGkoZSwgbywgbikgOiBpKGUsIG8pKSB8fCBuKTtcbiAgICByZXR1cm4gciA+IDMgJiYgbiAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgbywgbiksXG4gICAgblxufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiAhMFxufSk7XG52YXIgbiA9IHQoXCJCYXNlVUlcIiksXG5zID0gdChcIkFwcGNmZ1wiKSxcbmMgPSB0KFwiU2RrTWdyXCIpLFxubCA9IHQoXCJDb25maWdcIiksXG51ID0gdChcIkNvbW1vbkJpcmdlXCIpLFxucCA9IHQoXCJDb21tb25DZmdcIiksXG5nID0gdChcIkNvbURhdGFNZ3JcIiksXG5kID0gdChcIkNvbVBsYXllck1nclwiKSxcbmggPSBjYy5fZGVjb3JhdG9yLFxuZiA9IGguY2NjbGFzcyxcbm0gPSBoLnByb3BlcnR5LFxueSA9IGZ1bmN0aW9uKHQpIHtcbiAgICBmdW5jdGlvbiBlKCkge1xuICAgICAgICB2YXIgZSA9IG51bGwgIT09IHQgJiYgdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIHJldHVybiBlLmJ0bkNsb3NlID0gbnVsbCxcbiAgICAgICAgZS5pdGVtTGF5b3V0ID0gbnVsbCxcbiAgICAgICAgZVxuICAgIH1cbiAgICByZXR1cm4gaShlLCB0KSxcbiAgICBlLnByb3RvdHlwZS5vbkxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5hZGRFdmVudChzLkJhc2VFdmVudE5hbWUuQ2xvc2VVSSwgdGhpcy5ldmVudENsb3NlVUkpLFxuICAgICAgICB0aGlzLmFkZEV2ZW50KHAuQ29tbW9uRXZlbnROYW1lLkdldFJld2FyZEVuZCwgdGhpcy5yZWZyZXNoUmV3YXJkRW5kKVxuICAgIH0sXG4gICAgZS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzO1xuICAgICAgICB0aGlzLmZyZWVUaW1lRGF0YSA9IGQuQ29tUGxheWVyTWdyLmdldEluc3RhbmNlKCkuZ2V0RnJlZVRpbWVEYXRhKCksXG4gICAgICAgIHRoaXMuaW5pdEJ0bigpO1xuICAgICAgICBmb3IgKHZhciBlID0gZnVuY3Rpb24oZSkge1xuICAgICAgICAgICAgdmFyIGEgPSBvLml0ZW1MYXlvdXQuY2hpbGRyZW5bZV07XG4gICAgICAgICAgICBpZiAobnVsbCA9PSBnLkNvbURhdGFNZ3IuZ2V0SW5zdGFuY2UoKS5nZXRGcmVlVGltZUJ5SWQoZSArIDEpKSByZXR1cm4gYS5hY3RpdmUgPSAhMSxcbiAgICAgICAgICAgIFwiY29udGludWVcIjtcbiAgICAgICAgICAgIGEubmFtZSA9IGUgKyAxICsgXCJcIjtcbiAgICAgICAgICAgIHZhciBpID0gby5mcmVlVGltZURhdGEuZ2V0RGF0YUJ5SWQoZSArIDEpLFxuICAgICAgICAgICAgciA9IGEuZ2V0Q2hpbGRCeU5hbWUoXCJtYXNrXCIpLFxuICAgICAgICAgICAgbiA9IHIuZ2V0Q2hpbGRCeU5hbWUoXCJpY29uXCIpLmdldENvbXBvbmVudChjYy5TcHJpdGUpO1xuICAgICAgICAgICAgci5nZXRDaGlsZEJ5TmFtZShcImljb24yXCIpLnkgPSAxNTA7XG4gICAgICAgICAgICB2YXIgcyA9IGEuZ2V0Q2hpbGRCeU5hbWUoXCJudW1cIikuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKSxcbiAgICAgICAgICAgIGMgPSBhLmdldENoaWxkQnlOYW1lKFwiYnRuT2tcIiksXG4gICAgICAgICAgICBsID0gZy5Db21EYXRhTWdyLmdldEluc3RhbmNlKCkuZ2V0RnJlZVRpbWVJdGVtQnlJZChpLml0ZW1JZCksXG4gICAgICAgICAgICB1ID0gZy5Db21EYXRhTWdyLmdldEluc3RhbmNlKCkuZ2V0R29vZHNCeUlkKGwuZ29vZHNJZCk7XG4gICAgICAgICAgICBvLmxvYWRTcHJpdGVGcmFtZSh1LmJ1bmRsZU5hbWUsIHUucmV3YXJkSWNvbixcbiAgICAgICAgICAgIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICBuLnNwcml0ZUZyYW1lID0gdFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBzLnN0cmluZyA9IFwieFwiICsgbC5yZXdhcmROdW0sXG4gICAgICAgICAgICBsLmFkTnVtID4gMCA/IGkuYWROdW0gKyAxIDwgbC5hZE51bSA/IG8ucmVmcmVzaEl0ZW0oYSwgMSwgbC5hZE51bSAtIGkuYWROdW0sIDApIDogby5yZWZyZXNoSXRlbShhLCAwLCAwLCBsLmdvbGROdW0pIDogby5yZWZyZXNoSXRlbShhLCAyLCAwLCBsLmdvbGROdW0pLFxuICAgICAgICAgICAgYy5vbihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9FTkQsXG4gICAgICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0LmNsaWNrSXRlbShlICsgMSwgYSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0sXG4gICAgICAgIG8gPSB0aGlzLCBhID0gMDsgYSA8IHRoaXMuaXRlbUxheW91dC5jaGlsZHJlbkNvdW50OyBhKyspIGUoYSlcbiAgICB9LFxuICAgIGUucHJvdG90eXBlLmNsaWNrSXRlbSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdmFyIG8gPSB0aGlzLFxuICAgICAgICBhID0gdGhpcy5mcmVlVGltZURhdGEuZ2V0RGF0YUJ5SWQodCksXG4gICAgICAgIGkgPSBnLkNvbURhdGFNZ3IuZ2V0SW5zdGFuY2UoKS5nZXRGcmVlVGltZUl0ZW1CeUlkKGEuaXRlbUlkKTtcbiAgICAgICAgaWYgKGkuYWROdW0gPiAwKSBhLmFkTnVtICsgMSA+PSBpLmFkTnVtID8gYy5TZGtNZ3IuZ2V0SW5zdGFuY2UoKS5wbGF5VmlkZW8oYy5BZFR5cGUuQWRGcmVlVGltZSxcbiAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgdCA9IGEuZ29vZHNJZCArIHAuQ29tbW9uQ2ZnLnNwbGl0TnVtICsgaS5yZXdhcmROdW0sXG4gICAgICAgICAgICByID0gZS5jb252ZXJ0VG9Xb3JsZFNwYWNlQVIoY2MuVmVjMi5aRVJPKTtcbiAgICAgICAgICAgIGQuQ29tUGxheWVyTWdyLmdldEluc3RhbmNlKCkuY2hlY2tPcGVuUmV3YXJkKHQsIHIpLFxuICAgICAgICAgICAgby5mcmVlVGltZURhdGEuY2hhbmdsZUZyZWVUaW1lZGF0YShhLmlkKSxcbiAgICAgICAgICAgIG8uaXRlbSA9IGUsXG4gICAgICAgICAgICBvLmN1ckRhdGEgPSBhXG4gICAgICAgIH0pIDogYy5TZGtNZ3IuZ2V0SW5zdGFuY2UoKS5wbGF5VmlkZW8oYy5BZFR5cGUuQWRGcmVlVGltZSxcbiAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBvLmZyZWVUaW1lRGF0YS5hZGRBZE51bUJ5RGF0YShhKSxcbiAgICAgICAgICAgIGEuYWROdW0gKyAxID49IGkuYWROdW0gPyBvLnJlZnJlc2hJdGVtKGUsIDAsIDAsIDApIDogby5yZWZyZXNoSXRlbShlLCAxLCBpLmFkTnVtIC0gYS5hZE51bSwgMClcbiAgICAgICAgfSk7XG4gICAgICAgIGVsc2UgaWYgKHUuQ29tbW9uQnJpZ2UuSW5zdGFuY2UoKS5zdWJHb29kc051bShpLmdvbGRJZCwgaS5nb2xkTnVtKSkge1xuICAgICAgICAgICAgdmFyIHIgPSBhLmdvb2RzSWQgKyBwLkNvbW1vbkNmZy5zcGxpdE51bSArIGkucmV3YXJkTnVtLFxuICAgICAgICAgICAgbiA9IGUuY29udmVydFRvV29ybGRTcGFjZUFSKGNjLlZlYzIuWkVSTyk7XG4gICAgICAgICAgICBkLkNvbVBsYXllck1nci5nZXRJbnN0YW5jZSgpLmNoZWNrT3BlblJld2FyZChyLCBuKSxcbiAgICAgICAgICAgIHRoaXMuZnJlZVRpbWVEYXRhLmNoYW5nbGVGcmVlVGltZWRhdGEoYS5pZCksXG4gICAgICAgICAgICB0aGlzLml0ZW0gPSBlLFxuICAgICAgICAgICAgdGhpcy5jdXJEYXRhID0gYVxuICAgICAgICB9IGVsc2UgdGhpcy5vcGVuVUkobC5VSUlELlVJVGlwcywgXCLnianlk4HkuI3otrNcIilcbiAgICB9LFxuICAgIGUucHJvdG90eXBlLnJlZnJlc2hSZXdhcmRFbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2xlSXRlbUFuaSh0aGlzLml0ZW0sIHRoaXMuY3VyRGF0YSlcbiAgICB9LFxuICAgIGUucHJvdG90eXBlLmV2ZW50Q2xvc2VVSSA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdCA9PSBwLkNvbVVJSUQuVUlSZXdhcmQgJiYgdGhpcy5jaGFuZ2xlSXRlbUFuaSh0aGlzLml0ZW0sIHRoaXMuY3VyRGF0YSlcbiAgICB9LFxuICAgIGUucHJvdG90eXBlLmNoYW5nbGVJdGVtQW5pID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICB2YXIgbywgYSwgaSA9IHQuZ2V0Q2hpbGRCeU5hbWUoXCJtYXNrXCIpLFxuICAgICAgICByID0gaS5nZXRDaGlsZEJ5TmFtZShcImljb25cIikuZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSksXG4gICAgICAgIG4gPSBpLmdldENoaWxkQnlOYW1lKFwiaWNvbjJcIikuZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSk7XG4gICAgICAgIHIubm9kZS55ID4gNTAgPyAoYSA9IHIsIG8gPSBuKSA6IChhID0gbiwgbyA9IHIpO1xuICAgICAgICB2YXIgcyA9IHQuZ2V0Q2hpbGRCeU5hbWUoXCJudW1cIikuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKSxcbiAgICAgICAgYyA9IGcuQ29tRGF0YU1nci5nZXRJbnN0YW5jZSgpLmdldEZyZWVUaW1lSXRlbUJ5SWQoZS5pdGVtSWQpLFxuICAgICAgICBsID0gZy5Db21EYXRhTWdyLmdldEluc3RhbmNlKCkuZ2V0R29vZHNCeUlkKGMuZ29vZHNJZCksXG4gICAgICAgIHUgPSB0LmdldENoaWxkQnlOYW1lKFwiYnRuT2tcIik7XG4gICAgICAgIHUuYWN0aXZlID0gITEsXG4gICAgICAgIHMuc3RyaW5nID0gXCJcIixcbiAgICAgICAgdGhpcy5sb2FkU3ByaXRlRnJhbWUobC5idW5kbGVOYW1lLCBsLnJld2FyZEljb24sXG4gICAgICAgIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIGEuc3ByaXRlRnJhbWUgPSB0XG4gICAgICAgIH0pLFxuICAgICAgICBjYy50d2VlbihvLm5vZGUpLnRvKDEsIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgY2MuVmVjMygwLCAtMTUwKVxuICAgICAgICB9KS5jYWxsKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgby5zcHJpdGVGcmFtZSA9IG51bGwsXG4gICAgICAgICAgICBvLm5vZGUueSA9IDE1MFxuICAgICAgICB9KS5zdGFydCgpLFxuICAgICAgICBjYy50d2VlbihhLm5vZGUpLnRvKDEsIHtcbiAgICAgICAgICAgIHBvc2l0aW9uOiBuZXcgY2MuVmVjMygwLCAxMilcbiAgICAgICAgfSkuY2FsbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHMuc3RyaW5nID0gXCJ4XCIgKyBjLnJld2FyZE51bSxcbiAgICAgICAgICAgIHUuYWN0aXZlID0gITBcbiAgICAgICAgfSkuc3RhcnQoKSxcbiAgICAgICAgYy5hZE51bSA+IDAgPyBlLmFkTnVtICsgMSA8IGMuYWROdW0gPyB0aGlzLnJlZnJlc2hJdGVtKHQsIDEsIGMuYWROdW0gLSBlLmFkTnVtLCAwKSA6IHRoaXMucmVmcmVzaEl0ZW0odCwgMCwgMCwgYy5nb2xkTnVtKSA6IHRoaXMucmVmcmVzaEl0ZW0odCwgMiwgMCwgYy5nb2xkTnVtKVxuICAgIH0sXG4gICAgZS5wcm90b3R5cGUucmVmcmVzaEl0ZW0gPSBmdW5jdGlvbih0LCBlLCBvLCBhKSB7XG4gICAgICAgIHZhciBpID0gdC5nZXRDaGlsZEJ5TmFtZShcImJ0bk9rXCIpLFxuICAgICAgICByID0gaS5nZXRDaGlsZEJ5TmFtZShcIm51bVwiKSxcbiAgICAgICAgbiA9IGkuZ2V0Q29tcG9uZW50KGNjLlNwcml0ZSk7XG4gICAgICAgIDAgPT0gZSA/IChyLmFjdGl2ZSA9ICExLCB0aGlzLmxvYWRTcHJpdGVGcmFtZShcImNvbWltZ3NcIiwgXCJidXR0b24vYnRuMl9hZGdldFwiLFxuICAgICAgICBmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICBuLnNwcml0ZUZyYW1lID0gdFxuICAgICAgICB9KSkgOiAxID09IGUgPyAoci5hY3RpdmUgPSAhMCwgci5nZXRDb21wb25lbnQoY2MuTGFiZWwpLnN0cmluZyA9IFwieFwiICsgbywgdGhpcy5sb2FkU3ByaXRlRnJhbWUoXCJjb21pbWdzXCIsIFwiYnV0dG9uL2J0bjJfYWROdW1cIixcbiAgICAgICAgZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgbi5zcHJpdGVGcmFtZSA9IHRcbiAgICAgICAgfSkpIDogMiA9PSBlICYmIChyLmFjdGl2ZSA9ICEwLCByLmdldENvbXBvbmVudChjYy5MYWJlbCkuc3RyaW5nID0gXCJ4XCIgKyBhLCB0aGlzLmxvYWRTcHJpdGVGcmFtZShcImNvbWltZ3NcIiwgXCJidXR0b24vYnRuMl9nb2xkXCIsXG4gICAgICAgIGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgIG4uc3ByaXRlRnJhbWUgPSB0XG4gICAgICAgIH0pKVxuICAgIH0sXG4gICAgZS5wcm90b3R5cGUuaW5pdEJ0biA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgIHRoaXMuYnRuQ2xvc2Uub24oY2MuTm9kZS5FdmVudFR5cGUuVE9VQ0hfRU5ELFxuICAgICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHQuY2xvc2VVSSgpXG4gICAgICAgIH0pXG4gICAgfSxcbiAgICByKFttKGNjLk5vZGUpXSwgZS5wcm90b3R5cGUsIFwiYnRuQ2xvc2VcIiwgdm9pZCAwKSxcbiAgICByKFttKGNjLk5vZGUpXSwgZS5wcm90b3R5cGUsIFwiaXRlbUxheW91dFwiLCB2b2lkIDApLFxuICAgIHIoW2ZdLCBlKVxufSAobi5kZWZhdWx0KTtcbm8uZGVmYXVsdCA9IHkiXX0=