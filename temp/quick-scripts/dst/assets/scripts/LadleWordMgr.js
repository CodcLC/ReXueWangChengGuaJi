
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/LadleWordMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'd0c2cY/ROZDxLAJUQBp7rUC', 'LadleWordMgr');
// scripts/LadleWordMgr.js

"use strict";

var t = require;
var e = module;
var o = exports;
Object.defineProperty(o, "__esModule", {
  value: !0
});

var a = t("PoolMgr"),
    i = t("ResourceMgr"),
    r = function () {
  function t() {}

  return t.LabLoad = function (t, e, o, r, n, s, c) {
    var l = this;

    if (void 0 === r && (r = 60), cc.isValid(t)) {
      var u = a.PoolMgr.getInstance().getNode("LabLadleWord");

      if (u) {
        u.parent = t, u.opacity = 255, e && u.setPosition(cc.v2(e.x, e.y + r));
        var p = u.getChildByName("labStr");
        o && (p.getComponent(cc.Label).string = o), n && (p.getComponent(cc.Label).fontSize = n), s && (p.color = s), this.LadEff(u), c && c();
      } else console.log("动态加载"), i.ResourceMgr.getInstance().loadRes("prefabs", "widget/LabLadleWord", cc.Prefab, function (a) {
        (u = cc.instantiate(a)).parent = t, u.opacity = 255, e && u.setPosition(e);
        var i = u.getChildByName("labStr");
        o && (i.getComponent(cc.Label).string = o), n && (i.getComponent(cc.Label).fontSize = n), s && (i.color = s), l.LadEff(u), c && c();
      });
    } else console.log("瓢字父节点不存在！！！");
  }, t.LabLoadForSkill = function (t, e, o, r, n, s, c) {
    var l = this;

    if (void 0 === r && (r = 60), cc.isValid(t)) {
      var u = a.PoolMgr.getInstance().getNode("LabLadleWord");

      if (u) {
        u.parent = t, u.opacity = 127, u.scale = 3.5, e && u.setPosition(cc.v2(e.x, e.y + r));
        var p = u.getChildByName("labStr");
        o && (p.getComponent(cc.Label).string = o), n && (p.getComponent(cc.Label).fontSize = n), s && (p.color = s), this.LadEffForSkill(u), c && c();
      } else console.log("动态加载"), i.ResourceMgr.getInstance().loadRes("prefabs", "widget/LabLadleWord", cc.Prefab, function (a) {
        (u = cc.instantiate(a)).parent = t, u.opacity = 127, u.scale = 3.5, e && u.setPosition(e);
        var i = u.getChildByName("labStr");
        o && (i.getComponent(cc.Label).string = o), n && (i.getComponent(cc.Label).fontSize = n), s && (i.color = s), l.LadEffForSkill(u), c && c();
      });
    } else console.log("瓢字父节点不存在！！！");
  }, t.LadEff = function (t) {
    var e = this;
    cc.isValid(t) && cc.tween(t).parallel(cc.tween().by(1, {
      y: 50
    }), cc.tween().to(1, {
      opacity: 0
    })).call(function () {
      e.LabPool("LabLadleWord", t);
    }).start();
  }, t.LadEffForSkill = function (t) {
    var e = this;
    cc.isValid(t) && cc.tween(t).parallel(cc.tween().to(.1, {
      opacity: 255
    }), cc.tween().to(.1, {
      scale: 1.2
    })).delay(.6).parallel(cc.tween().to(.3, {
      opacity: 0
    }), cc.tween().to(.3, {
      scale: 4
    })).call(function () {
      e.LabPool("LabLadleWord", t);
    }).start();
  }, t.LabPool = function (t, e) {
    cc.isValid(e) && (e.opacity = 255, e.scale = 1, a.PoolMgr.getInstance().freeNode(t, e));
  }, t.height_ladleWord = {
    height_type: 75,
    height_number: 35,
    hegiht_skill: 115
  }, t;
}();

o["default"] = r;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcTGFkbGVXb3JkTWdyLmpzIl0sIm5hbWVzIjpbInQiLCJyZXF1aXJlIiwiZSIsIm1vZHVsZSIsIm8iLCJleHBvcnRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImEiLCJpIiwiciIsIkxhYkxvYWQiLCJuIiwicyIsImMiLCJsIiwiY2MiLCJpc1ZhbGlkIiwidSIsIlBvb2xNZ3IiLCJnZXRJbnN0YW5jZSIsImdldE5vZGUiLCJwYXJlbnQiLCJvcGFjaXR5Iiwic2V0UG9zaXRpb24iLCJ2MiIsIngiLCJ5IiwicCIsImdldENoaWxkQnlOYW1lIiwiZ2V0Q29tcG9uZW50IiwiTGFiZWwiLCJzdHJpbmciLCJmb250U2l6ZSIsImNvbG9yIiwiTGFkRWZmIiwiY29uc29sZSIsImxvZyIsIlJlc291cmNlTWdyIiwibG9hZFJlcyIsIlByZWZhYiIsImluc3RhbnRpYXRlIiwiTGFiTG9hZEZvclNraWxsIiwic2NhbGUiLCJMYWRFZmZGb3JTa2lsbCIsInR3ZWVuIiwicGFyYWxsZWwiLCJieSIsInRvIiwiY2FsbCIsIkxhYlBvb2wiLCJzdGFydCIsImRlbGF5IiwiZnJlZU5vZGUiLCJoZWlnaHRfbGFkbGVXb3JkIiwiaGVpZ2h0X3R5cGUiLCJoZWlnaHRfbnVtYmVyIiwiaGVnaWh0X3NraWxsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLENBQUMsR0FBR0MsT0FBUjtBQUNBLElBQUlDLENBQUMsR0FBR0MsTUFBUjtBQUNBLElBQUlDLENBQUMsR0FBR0MsT0FBUjtBQUNBQyxNQUFNLENBQUNDLGNBQVAsQ0FBc0JILENBQXRCLEVBQXlCLFlBQXpCLEVBQXVDO0VBQ25DSSxLQUFLLEVBQUUsQ0FBQztBQUQyQixDQUF2Qzs7QUFHQSxJQUFJQyxDQUFDLEdBQUdULENBQUMsQ0FBQyxTQUFELENBQVQ7QUFBQSxJQUNBVSxDQUFDLEdBQUdWLENBQUMsQ0FBQyxhQUFELENBREw7QUFBQSxJQUVBVyxD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RlBwRCxDQUFDLENBQUNtRCxPQUFGLEdBQVksVUFBU25ELENBQVQsRUFBWUUsQ0FBWixFQUFlO0lBQ3ZCZSxFQUFFLENBQUNDLE9BQUgsQ0FBV2hCLENBQVgsTUFBa0JBLENBQUMsQ0FBQ3NCLE9BQUYsR0FBWSxHQUFaLEVBQWlCdEIsQ0FBQyxDQUFDMEMsS0FBRixHQUFVLENBQTNCLEVBQThCbkMsQ0FBQyxDQUFDVyxPQUFGLENBQVVDLFdBQVYsR0FBd0JpQyxRQUF4QixDQUFpQ3RELENBQWpDLEVBQW9DRSxDQUFwQyxDQUFoRDtFQUNILENBcEZNLEVBcUZQRixDQUFDLENBQUN1RCxnQkFBRixHQUFxQjtJQUNqQkMsV0FBVyxFQUFFLEVBREk7SUFFakJDLGFBQWEsRUFBRSxFQUZFO0lBR2pCQyxZQUFZLEVBQUU7RUFIRyxDQXJGZCxFQTBGUDFELENBMUZBO0FBMkZILENBN0ZHLEVBRko7O0FBZ0dBSSxDQUFDLFdBQUQsR0FBWU8sQ0FBWiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHQgPSByZXF1aXJlO1xudmFyIGUgPSBtb2R1bGU7XG52YXIgbyA9IGV4cG9ydHM7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogITBcbn0pO1xudmFyIGEgPSB0KFwiUG9vbE1nclwiKSxcbmkgPSB0KFwiUmVzb3VyY2VNZ3JcIiksXG5yID0gZnVuY3Rpb24oKSB7XG4gICAgZnVuY3Rpb24gdCgpIHt9XG4gICAgcmV0dXJuIHQuTGFiTG9hZCA9IGZ1bmN0aW9uKHQsIGUsIG8sIHIsIG4sIHMsIGMpIHtcbiAgICAgICAgdmFyIGwgPSB0aGlzO1xuICAgICAgICBpZiAodm9pZCAwID09PSByICYmIChyID0gNjApLCBjYy5pc1ZhbGlkKHQpKSB7XG4gICAgICAgICAgICB2YXIgdSA9IGEuUG9vbE1nci5nZXRJbnN0YW5jZSgpLmdldE5vZGUoXCJMYWJMYWRsZVdvcmRcIik7XG4gICAgICAgICAgICBpZiAodSkge1xuICAgICAgICAgICAgICAgIHUucGFyZW50ID0gdCxcbiAgICAgICAgICAgICAgICB1Lm9wYWNpdHkgPSAyNTUsXG4gICAgICAgICAgICAgICAgZSAmJiB1LnNldFBvc2l0aW9uKGNjLnYyKGUueCwgZS55ICsgcikpO1xuICAgICAgICAgICAgICAgIHZhciBwID0gdS5nZXRDaGlsZEJ5TmFtZShcImxhYlN0clwiKTtcbiAgICAgICAgICAgICAgICBvICYmIChwLmdldENvbXBvbmVudChjYy5MYWJlbCkuc3RyaW5nID0gbyksXG4gICAgICAgICAgICAgICAgbiAmJiAocC5nZXRDb21wb25lbnQoY2MuTGFiZWwpLmZvbnRTaXplID0gbiksXG4gICAgICAgICAgICAgICAgcyAmJiAocC5jb2xvciA9IHMpLFxuICAgICAgICAgICAgICAgIHRoaXMuTGFkRWZmKHUpLFxuICAgICAgICAgICAgICAgIGMgJiYgYygpXG4gICAgICAgICAgICB9IGVsc2UgY29uc29sZS5sb2coXCLliqjmgIHliqDovb1cIiksXG4gICAgICAgICAgICBpLlJlc291cmNlTWdyLmdldEluc3RhbmNlKCkubG9hZFJlcyhcInByZWZhYnNcIiwgXCJ3aWRnZXQvTGFiTGFkbGVXb3JkXCIsIGNjLlByZWZhYixcbiAgICAgICAgICAgIGZ1bmN0aW9uKGEpIHsgKHUgPSBjYy5pbnN0YW50aWF0ZShhKSkucGFyZW50ID0gdCxcbiAgICAgICAgICAgICAgICB1Lm9wYWNpdHkgPSAyNTUsXG4gICAgICAgICAgICAgICAgZSAmJiB1LnNldFBvc2l0aW9uKGUpO1xuICAgICAgICAgICAgICAgIHZhciBpID0gdS5nZXRDaGlsZEJ5TmFtZShcImxhYlN0clwiKTtcbiAgICAgICAgICAgICAgICBvICYmIChpLmdldENvbXBvbmVudChjYy5MYWJlbCkuc3RyaW5nID0gbyksXG4gICAgICAgICAgICAgICAgbiAmJiAoaS5nZXRDb21wb25lbnQoY2MuTGFiZWwpLmZvbnRTaXplID0gbiksXG4gICAgICAgICAgICAgICAgcyAmJiAoaS5jb2xvciA9IHMpLFxuICAgICAgICAgICAgICAgIGwuTGFkRWZmKHUpLFxuICAgICAgICAgICAgICAgIGMgJiYgYygpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2UgY29uc29sZS5sb2coXCLnk6LlrZfniLboioLngrnkuI3lrZjlnKjvvIHvvIHvvIFcIilcbiAgICB9LFxuICAgIHQuTGFiTG9hZEZvclNraWxsID0gZnVuY3Rpb24odCwgZSwgbywgciwgbiwgcywgYykge1xuICAgICAgICB2YXIgbCA9IHRoaXM7XG4gICAgICAgIGlmICh2b2lkIDAgPT09IHIgJiYgKHIgPSA2MCksIGNjLmlzVmFsaWQodCkpIHtcbiAgICAgICAgICAgIHZhciB1ID0gYS5Qb29sTWdyLmdldEluc3RhbmNlKCkuZ2V0Tm9kZShcIkxhYkxhZGxlV29yZFwiKTtcbiAgICAgICAgICAgIGlmICh1KSB7XG4gICAgICAgICAgICAgICAgdS5wYXJlbnQgPSB0LFxuICAgICAgICAgICAgICAgIHUub3BhY2l0eSA9IDEyNyxcbiAgICAgICAgICAgICAgICB1LnNjYWxlID0gMy41LFxuICAgICAgICAgICAgICAgIGUgJiYgdS5zZXRQb3NpdGlvbihjYy52MihlLngsIGUueSArIHIpKTtcbiAgICAgICAgICAgICAgICB2YXIgcCA9IHUuZ2V0Q2hpbGRCeU5hbWUoXCJsYWJTdHJcIik7XG4gICAgICAgICAgICAgICAgbyAmJiAocC5nZXRDb21wb25lbnQoY2MuTGFiZWwpLnN0cmluZyA9IG8pLFxuICAgICAgICAgICAgICAgIG4gJiYgKHAuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5mb250U2l6ZSA9IG4pLFxuICAgICAgICAgICAgICAgIHMgJiYgKHAuY29sb3IgPSBzKSxcbiAgICAgICAgICAgICAgICB0aGlzLkxhZEVmZkZvclNraWxsKHUpLFxuICAgICAgICAgICAgICAgIGMgJiYgYygpXG4gICAgICAgICAgICB9IGVsc2UgY29uc29sZS5sb2coXCLliqjmgIHliqDovb1cIiksXG4gICAgICAgICAgICBpLlJlc291cmNlTWdyLmdldEluc3RhbmNlKCkubG9hZFJlcyhcInByZWZhYnNcIiwgXCJ3aWRnZXQvTGFiTGFkbGVXb3JkXCIsIGNjLlByZWZhYixcbiAgICAgICAgICAgIGZ1bmN0aW9uKGEpIHsgKHUgPSBjYy5pbnN0YW50aWF0ZShhKSkucGFyZW50ID0gdCxcbiAgICAgICAgICAgICAgICB1Lm9wYWNpdHkgPSAxMjcsXG4gICAgICAgICAgICAgICAgdS5zY2FsZSA9IDMuNSxcbiAgICAgICAgICAgICAgICBlICYmIHUuc2V0UG9zaXRpb24oZSk7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSB1LmdldENoaWxkQnlOYW1lKFwibGFiU3RyXCIpO1xuICAgICAgICAgICAgICAgIG8gJiYgKGkuZ2V0Q29tcG9uZW50KGNjLkxhYmVsKS5zdHJpbmcgPSBvKSxcbiAgICAgICAgICAgICAgICBuICYmIChpLmdldENvbXBvbmVudChjYy5MYWJlbCkuZm9udFNpemUgPSBuKSxcbiAgICAgICAgICAgICAgICBzICYmIChpLmNvbG9yID0gcyksXG4gICAgICAgICAgICAgICAgbC5MYWRFZmZGb3JTa2lsbCh1KSxcbiAgICAgICAgICAgICAgICBjICYmIGMoKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIGNvbnNvbGUubG9nKFwi55Oi5a2X54i26IqC54K55LiN5a2Y5Zyo77yB77yB77yBXCIpXG4gICAgfSxcbiAgICB0LkxhZEVmZiA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdmFyIGUgPSB0aGlzO1xuICAgICAgICBjYy5pc1ZhbGlkKHQpICYmIGNjLnR3ZWVuKHQpLnBhcmFsbGVsKGNjLnR3ZWVuKCkuYnkoMSwge1xuICAgICAgICAgICAgeTogNTBcbiAgICAgICAgfSksIGNjLnR3ZWVuKCkudG8oMSwge1xuICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICB9KSkuY2FsbChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGUuTGFiUG9vbChcIkxhYkxhZGxlV29yZFwiLCB0KVxuICAgICAgICB9KS5zdGFydCgpXG4gICAgfSxcbiAgICB0LkxhZEVmZkZvclNraWxsID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHRoaXM7XG4gICAgICAgIGNjLmlzVmFsaWQodCkgJiYgY2MudHdlZW4odCkucGFyYWxsZWwoY2MudHdlZW4oKS50byguMSwge1xuICAgICAgICAgICAgb3BhY2l0eTogMjU1XG4gICAgICAgIH0pLCBjYy50d2VlbigpLnRvKC4xLCB7XG4gICAgICAgICAgICBzY2FsZTogMS4yXG4gICAgICAgIH0pKS5kZWxheSguNikucGFyYWxsZWwoY2MudHdlZW4oKS50byguMywge1xuICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICB9KSwgY2MudHdlZW4oKS50byguMywge1xuICAgICAgICAgICAgc2NhbGU6IDRcbiAgICAgICAgfSkpLmNhbGwoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBlLkxhYlBvb2woXCJMYWJMYWRsZVdvcmRcIiwgdClcbiAgICAgICAgfSkuc3RhcnQoKVxuICAgIH0sXG4gICAgdC5MYWJQb29sID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBjYy5pc1ZhbGlkKGUpICYmIChlLm9wYWNpdHkgPSAyNTUsIGUuc2NhbGUgPSAxLCBhLlBvb2xNZ3IuZ2V0SW5zdGFuY2UoKS5mcmVlTm9kZSh0LCBlKSlcbiAgICB9LFxuICAgIHQuaGVpZ2h0X2xhZGxlV29yZCA9IHtcbiAgICAgICAgaGVpZ2h0X3R5cGU6IDc1LFxuICAgICAgICBoZWlnaHRfbnVtYmVyOiAzNSxcbiAgICAgICAgaGVnaWh0X3NraWxsOiAxMTVcbiAgICB9LFxuICAgIHRcbn0gKCk7XG5vLmRlZmF1bHQgPSByIl19