
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/UIExit.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '82bc2SPrPdJJ5G4D88S1WdC', 'UIExit');
// scripts/UIExit.js

"use strict";

var t = require;
var e = module;
var o = exports;

var _a,
    i = void 0 && (void 0).__extends || (_a = function a(t, e) {
  return (_a = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (t, e) {
    t.__proto__ = e;
  } || function (t, e) {
    for (var o in e) {
      Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
    }
  })(t, e);
}, function (t, e) {
  function o() {
    this.constructor = t;
  }

  _a(t, e), t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o());
}),
    r = void 0 && (void 0).__decorate || function (t, e, o, a) {
  var i,
      r = arguments.length,
      n = r < 3 ? e : null === a ? a = Object.getOwnPropertyDescriptor(e, o) : a;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) n = Reflect.decorate(t, e, o, a);else for (var s = t.length - 1; s >= 0; s--) {
    (i = t[s]) && (n = (r < 3 ? i(n) : r > 3 ? i(e, o, n) : i(e, o)) || n);
  }
  return r > 3 && n && Object.defineProperty(e, o, n), n;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});

var n = t("BaseUI"),
    s = t("Appcfg"),
    c = t("EventMgr"),
    l = t("UIMgr"),
    u = t("CacheUtils"),
    p = t("Config"),
    g = cc._decorator,
    d = g.ccclass,
    h = g.property,
    f = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    return e.sceneName = "Main", e.label = null, e.again = null, e.btnClose = null, e.text = "hello", e;
  }

  return i(e, t), e.prototype.onLoad = function () {
    c.EventMgr.getInstance().off(s.BaseEventName.GoGame, this, this.goGame);
  }, e.prototype.start = function () {
    null == u.CacheUtils.getData(p.GameConfig.AppCacheName + "gddsmnq") ? (u.CacheUtils.saveData(p.GameConfig.AppCacheName + "gddsmnq", "1"), this.btnClose.x = 0, this.again.active = !1) : this.again.active = !0, this.btnClose.on(cc.Node.EventType.TOUCH_END, function () {
      cc.game.end();
    }), this.goGame();
  }, e.prototype.goGame = function () {
    var t = this;
    this.again.on(cc.Node.EventType.TOUCH_END, function () {
      t.closeUI(), l.UIMgr.getInstance().openUI(p.UIID.UIRealName, -1, function () {
        cc.director.loadScene("Main");
      });
    });
  }, r([h(cc.Label)], e.prototype, "label", void 0), r([h(cc.Node)], e.prototype, "again", void 0), r([h(cc.Node)], e.prototype, "btnClose", void 0), r([h], e.prototype, "text", void 0), r([d], e);
}(n["default"]);

o["default"] = f;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcVUlFeGl0LmpzIl0sIm5hbWVzIjpbInQiLCJyZXF1aXJlIiwiZSIsIm1vZHVsZSIsIm8iLCJleHBvcnRzIiwiYSIsImkiLCJfX2V4dGVuZHMiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJyIiwiX19kZWNvcmF0ZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsIm4iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJzIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImMiLCJsIiwidSIsInAiLCJnIiwiY2MiLCJfZGVjb3JhdG9yIiwiZCIsImNjY2xhc3MiLCJoIiwicHJvcGVydHkiLCJmIiwiYXBwbHkiLCJzY2VuZU5hbWUiLCJsYWJlbCIsImFnYWluIiwiYnRuQ2xvc2UiLCJ0ZXh0Iiwib25Mb2FkIiwiRXZlbnRNZ3IiLCJnZXRJbnN0YW5jZSIsIm9mZiIsIkJhc2VFdmVudE5hbWUiLCJHb0dhbWUiLCJnb0dhbWUiLCJzdGFydCIsIkNhY2hlVXRpbHMiLCJnZXREYXRhIiwiR2FtZUNvbmZpZyIsIkFwcENhY2hlTmFtZSIsInNhdmVEYXRhIiwieCIsImFjdGl2ZSIsIm9uIiwiTm9kZSIsIkV2ZW50VHlwZSIsIlRPVUNIX0VORCIsImdhbWUiLCJlbmQiLCJjbG9zZVVJIiwiVUlNZ3IiLCJvcGVuVUkiLCJVSUlEIiwiVUlSZWFsTmFtZSIsImRpcmVjdG9yIiwibG9hZFNjZW5lIiwiTGFiZWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsQ0FBQyxHQUFHQyxPQUFSO0FBQ0EsSUFBSUMsQ0FBQyxHQUFHQyxNQUFSO0FBQ0EsSUFBSUMsQ0FBQyxHQUFHQyxPQUFSOztBQUNBLElBQUlDLEVBQUo7QUFBQSxJQUFPQyxDQUFD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Q0FBc0IsTUFBdEI7TUFDSCxDQUhELENBREE7SUFLSCxDQVBEO0VBUUgsQ0F0Qk0sRUF1QlB4RCxDQUFDLENBQUMsQ0FBQ29CLENBQUMsQ0FBQ0osRUFBRSxDQUFDeUMsS0FBSixDQUFGLENBQUQsRUFBZ0J6RSxDQUFDLENBQUNXLFNBQWxCLEVBQTZCLE9BQTdCLEVBQXNDLEtBQUssQ0FBM0MsQ0F2Qk0sRUF3QlBLLENBQUMsQ0FBQyxDQUFDb0IsQ0FBQyxDQUFDSixFQUFFLENBQUM2QixJQUFKLENBQUYsQ0FBRCxFQUFlN0QsQ0FBQyxDQUFDVyxTQUFqQixFQUE0QixPQUE1QixFQUFxQyxLQUFLLENBQTFDLENBeEJNLEVBeUJQSyxDQUFDLENBQUMsQ0FBQ29CLENBQUMsQ0FBQ0osRUFBRSxDQUFDNkIsSUFBSixDQUFGLENBQUQsRUFBZTdELENBQUMsQ0FBQ1csU0FBakIsRUFBNEIsVUFBNUIsRUFBd0MsS0FBSyxDQUE3QyxDQXpCTSxFQTBCUEssQ0FBQyxDQUFDLENBQUNvQixDQUFELENBQUQsRUFBTXBDLENBQUMsQ0FBQ1csU0FBUixFQUFtQixNQUFuQixFQUEyQixLQUFLLENBQWhDLENBMUJNLEVBMkJQSyxDQUFDLENBQUMsQ0FBQ2tCLENBQUQsQ0FBRCxFQUFNbEMsQ0FBTixDQTNCRDtBQTRCSCxDQXRDRyxDQXNDRG9CLENBQUMsV0F0Q0EsQ0FUSjs7QUFnREFsQixDQUFDLFdBQUQsR0FBWW9DLENBQVoiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbInZhciB0ID0gcmVxdWlyZTtcbnZhciBlID0gbW9kdWxlO1xudmFyIG8gPSBleHBvcnRzO1xudmFyIGEsIGkgPSB0aGlzICYmIHRoaXMuX19leHRlbmRzIHx8IChhID0gZnVuY3Rpb24odCwgZSkge1xuICAgIHJldHVybiAoYSA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCB7XG4gICAgICAgIF9fcHJvdG9fXzogW11cbiAgICB9XG4gICAgaW5zdGFuY2VvZiBBcnJheSAmJlxuICAgIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdC5fX3Byb3RvX18gPSBlXG4gICAgfSB8fFxuICAgIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgZm9yICh2YXIgbyBpbiBlKSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgbykgJiYgKHRbb10gPSBlW29dKVxuICAgIH0pKHQsIGUpXG59LFxuZnVuY3Rpb24odCwgZSkge1xuICAgIGZ1bmN0aW9uIG8oKSB7XG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSB0XG4gICAgfVxuICAgIGEodCwgZSksXG4gICAgdC5wcm90b3R5cGUgPSBudWxsID09PSBlID8gT2JqZWN0LmNyZWF0ZShlKSA6IChvLnByb3RvdHlwZSA9IGUucHJvdG90eXBlLCBuZXcgbylcbn0pLFxuciA9IHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlIHx8XG5mdW5jdGlvbih0LCBlLCBvLCBhKSB7XG4gICAgdmFyIGksIHIgPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgIG4gPSByIDwgMyA/IGU6IG51bGwgPT09IGEgPyBhID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBvKSA6IGE7XG4gICAgaWYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIFJlZmxlY3QgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlKSBuID0gUmVmbGVjdC5kZWNvcmF0ZSh0LCBlLCBvLCBhKTtcbiAgICBlbHNlIGZvciAodmFyIHMgPSB0Lmxlbmd0aCAtIDE7IHMgPj0gMDsgcy0tKShpID0gdFtzXSkgJiYgKG4gPSAociA8IDMgPyBpKG4pIDogciA+IDMgPyBpKGUsIG8sIG4pIDogaShlLCBvKSkgfHwgbik7XG4gICAgcmV0dXJuIHIgPiAzICYmIG4gJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIG8sIG4pLFxuICAgIG5cbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogITBcbn0pO1xudmFyIG4gPSB0KFwiQmFzZVVJXCIpLFxucyA9IHQoXCJBcHBjZmdcIiksXG5jID0gdChcIkV2ZW50TWdyXCIpLFxubCA9IHQoXCJVSU1nclwiKSxcbnUgPSB0KFwiQ2FjaGVVdGlsc1wiKSxcbnAgPSB0KFwiQ29uZmlnXCIpLFxuZyA9IGNjLl9kZWNvcmF0b3IsXG5kID0gZy5jY2NsYXNzLFxuaCA9IGcucHJvcGVydHksXG5mID0gZnVuY3Rpb24odCkge1xuICAgIGZ1bmN0aW9uIGUoKSB7XG4gICAgICAgIHZhciBlID0gbnVsbCAhPT0gdCAmJiB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgcmV0dXJuIGUuc2NlbmVOYW1lID0gXCJNYWluXCIsXG4gICAgICAgIGUubGFiZWwgPSBudWxsLFxuICAgICAgICBlLmFnYWluID0gbnVsbCxcbiAgICAgICAgZS5idG5DbG9zZSA9IG51bGwsXG4gICAgICAgIGUudGV4dCA9IFwiaGVsbG9cIixcbiAgICAgICAgZVxuICAgIH1cbiAgICByZXR1cm4gaShlLCB0KSxcbiAgICBlLnByb3RvdHlwZS5vbkxvYWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgYy5FdmVudE1nci5nZXRJbnN0YW5jZSgpLm9mZihzLkJhc2VFdmVudE5hbWUuR29HYW1lLCB0aGlzLCB0aGlzLmdvR2FtZSlcbiAgICB9LFxuICAgIGUucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIG51bGwgPT0gdS5DYWNoZVV0aWxzLmdldERhdGEocC5HYW1lQ29uZmlnLkFwcENhY2hlTmFtZSArIFwiZ2Rkc21ucVwiKSA/ICh1LkNhY2hlVXRpbHMuc2F2ZURhdGEocC5HYW1lQ29uZmlnLkFwcENhY2hlTmFtZSArIFwiZ2Rkc21ucVwiLCBcIjFcIiksIHRoaXMuYnRuQ2xvc2UueCA9IDAsIHRoaXMuYWdhaW4uYWN0aXZlID0gITEpIDogdGhpcy5hZ2Fpbi5hY3RpdmUgPSAhMCxcbiAgICAgICAgdGhpcy5idG5DbG9zZS5vbihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9FTkQsXG4gICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY2MuZ2FtZS5lbmQoKVxuICAgICAgICB9KSxcbiAgICAgICAgdGhpcy5nb0dhbWUoKVxuICAgIH0sXG4gICAgZS5wcm90b3R5cGUuZ29HYW1lID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgdGhpcy5hZ2Fpbi5vbihjYy5Ob2RlLkV2ZW50VHlwZS5UT1VDSF9FTkQsXG4gICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdC5jbG9zZVVJKCksXG4gICAgICAgICAgICBsLlVJTWdyLmdldEluc3RhbmNlKCkub3BlblVJKHAuVUlJRC5VSVJlYWxOYW1lLCAtMSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIGNjLmRpcmVjdG9yLmxvYWRTY2VuZShcIk1haW5cIilcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfSxcbiAgICByKFtoKGNjLkxhYmVsKV0sIGUucHJvdG90eXBlLCBcImxhYmVsXCIsIHZvaWQgMCksXG4gICAgcihbaChjYy5Ob2RlKV0sIGUucHJvdG90eXBlLCBcImFnYWluXCIsIHZvaWQgMCksXG4gICAgcihbaChjYy5Ob2RlKV0sIGUucHJvdG90eXBlLCBcImJ0bkNsb3NlXCIsIHZvaWQgMCksXG4gICAgcihbaF0sIGUucHJvdG90eXBlLCBcInRleHRcIiwgdm9pZCAwKSxcbiAgICByKFtkXSwgZSlcbn0gKG4uZGVmYXVsdCk7XG5vLmRlZmF1bHQgPSBmIl19