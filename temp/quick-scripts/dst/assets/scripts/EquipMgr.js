
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/EquipMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '84c9dMl5y1J5rBvj+RBOooX', 'EquipMgr');
// scripts/EquipMgr.js

"use strict";

var t = require;
var e = module;
var o = exports;
Object.defineProperty(o, "__esModule", {
  value: !0
}), o.SuitData = o.EnumEquipInfo = void 0;

var a = t("EventMgr"),
    i = t("UIMgr"),
    r = t("Utils"),
    n = t("Main"),
    s = t("Config"),
    c = t("DataMgr"),
    l = t("EffectMgr"),
    u = t("PlayerMgr"),
    p = t("RoleMgr"),
    g = function () {
  function t() {}

  return t.getInstance = function () {
    return null == this.instance && (this.instance = new t()), this.instance;
  }, t.prototype.getAllSuitList = function () {
    for (var e = [], o = c.DataMgr.getInstance().getAllEquipSuitCfg(), a = 0; a < o.length; a++) {
      var i = {
        id: o[a].id,
        count: 0
      };
      e.push(i);
    }

    var r = t.getInstance().getWearEquipList();

    for (a = 0; a < r.length; a++) {
      for (var n = c.DataMgr.getInstance().getEquipCfg(r[a].id), s = 0; s < e.length; s++) {
        if (n.suitId == e[s].id) {
          e[s].count++;
          break;
        }
      }
    }

    return e;
  }, t.prototype.getWearEquipList = function () {
    return u.PlayerMgr.getInstance().geUserData().getWearEquipList();
  }, t.prototype.getWearEquipData = function (t) {
    for (var e = u.PlayerMgr.getInstance().geUserData().getWearEquipList(), o = 0; o < e.length; o++) {
      if (e[o].type == t) return e[o];
    }

    return null;
  }, t.prototype.getOwnedEquipList = function (t) {
    void 0 === t && (t = 1);

    for (var e = [], o = u.PlayerMgr.getInstance().geUserData().getOwnedEquipList(), a = 0; a < o.length; a++) {
      o[a].sort(function (t, e) {
        return e.id - t.id;
      }), o[a].sort(function (t, e) {
        return e.quality - t.quality;
      });
    }

    for (a = 0; a < o.length; a++) {
      for (var i = 0; i < o[a].length; i++) {
        e.push(o[a][i]);
      }
    }

    return 1 == t ? e.sort(function (t, e) {
      return e.quality - t.quality;
    }) : 2 == t && e.sort(function (t, e) {
      return t.type - e.type;
    }), e;
  }, t.prototype.getOwmedEquipForEquipType = function (t) {
    var e = t - 1;
    return (e < 0 || e > 5) && (e = 0), u.PlayerMgr.getInstance().geUserData().getOwnedEquipList()[e];
  }, t.prototype.getOwmedEquipForQualityId = function (t) {
    var e = u.PlayerMgr.getInstance().geUserData().getOwnedEquipList(),
        o = [];
    return e.forEach(function (e) {
      var a = e.filter(function (e) {
        return e.quality == t;
      });
      o = o.concat(a);
    }), o;
  }, t.prototype.getOwnedEquipCount = function () {
    for (var t = 0, e = u.PlayerMgr.getInstance().geUserData().getOwnedEquipList(), o = 0; o < e.length; o++) {
      t += e[o].length;
    }

    return t;
  }, t.prototype.isExistEquipForType = function (t) {
    return u.PlayerMgr.getInstance().geUserData().isExistEquip(t);
  }, t.prototype.addManyEquip = function (t) {
    u.PlayerMgr.getInstance().geUserData().addManyEquip(t);
  }, t.prototype.addEquip = function (t) {
    t && (this.getOwnedEquipCount() >= 134 ? console.log("装备仓库快满了，请及时清理仓库！！！") : this.getOwnedEquipCount() >= 144 ? console.log("装备仓库已满了，请及时清理仓库！！！") : u.PlayerMgr.getInstance().geUserData().addEquip(t));
  }, t.prototype.abandonEquip = function (t) {
    t && u.PlayerMgr.getInstance().geUserData().abandonEquip(t);
  }, t.prototype.replaceEquip = function (t, e, o) {
    if (e && o) {
      u.PlayerMgr.getInstance().geUserData().replaceEquip(e, o), u.PlayerMgr.getInstance().geUserData().refreshWearEquipQuality(o.type, o.quality), p["default"].getInstance().getPropForAllEquip(!0), a.EventMgr.getInstance().emit(s.EventName.ReplaceEquip, t, e, o);
      var i = c.DataMgr.getInstance().getEquipCfg(o.id);
      console.log("当前装备id：", o.id), 1 == i.isSkin ? n["default"].instance.rolePlay(o.id) : 4 == i.equipType && n["default"].instance.rolePlay_reset(o.id);
    }
  }, t.prototype.wearEquip = function (t, e) {
    if (e) {
      u.PlayerMgr.getInstance().geUserData().wearEquip(e), u.PlayerMgr.getInstance().geUserData().refreshWearEquipQuality(e.type, e.quality), p["default"].getInstance().getPropForAllEquip(!0), a.EventMgr.getInstance().emit(s.EventName.WearEquip, t, e);
      var o = c.DataMgr.getInstance().getEquipCfg(e.id);
      console.log("当前装备id：", e.id), 1 == o.isSkin && n["default"].instance.rolePlay(e.id);
    }
  }, t.prototype.unloadEquip = function (t) {
    if (t) {
      u.PlayerMgr.getInstance().geUserData().unloadEquip(t), p["default"].getInstance().getPropForAllEquip(!0), a.EventMgr.getInstance().emit(s.EventName.UnloadEquip, t);
      var e = c.DataMgr.getInstance().getEquipCfg(t.id);
      console.log("当前装备id：", t.id), 1 == e.isSkin && n["default"].instance.rolePlay_reset(t.id);
    }
  }, t.prototype.sellEquip = function (t, e) {
    e && (u.PlayerMgr.getInstance().geUserData().abandonEquip(e), a.EventMgr.getInstance().emit(s.EventName.SellEquip, t, e));
  }, t.prototype.strengthenEquip = function (t, e) {
    t && (u.PlayerMgr.getInstance().geUserData().strengthenEquip(t, e), p["default"].getInstance().getPropForAllEquip(!0), a.EventMgr.getInstance().emit(s.EventName.RefreshStrengthenLv, t), a.EventMgr.getInstance().emit(s.EventName.RefreshEquipViewInfo));
  }, t.prototype.unlockEquip = function (t, e) {
    e && (u.PlayerMgr.getInstance().geUserData().unlockEquip(e), a.EventMgr.getInstance().emit(s.EventName.UnlockEquip, t, e));
  }, t.prototype.getPropNameForPropType = function (t) {
    var e = "攻击力";

    switch (t) {
      case 1:
        e = "攻击力";
        break;

      case 2:
        e = "血量上限";
        break;

      case 3:
        e = "攻击速度";
        break;

      case 4:
        e = "暴击率";
        break;

      case 5:
        e = "暴击伤害";
        break;

      case 6:
        e = "伤害减免";
        break;

      case 7:
        e = "闪避率";
        break;

      case 8:
        e = "攻击力";
        break;

      case 9:
        e = "血量上限";
    }

    return e;
  }, t.prototype.getPropPercent = function (t) {
    var e = "%";

    switch (t) {
      case 3:
      case 8:
      case 9:
        e = "";
        break;

      default:
        e = "%";
    }

    return e;
  }, t.prototype.quickSellForSaveData = function (t) {
    var e = t;

    if (e && !(e.length <= 0)) {
      for (var o = 0, a = u.PlayerMgr.getInstance().geUserData().getOwnedEquipList(), r = 0; r < a.length; r++) {
        for (var n = 0; n < a[r].length; n++) {
          for (var l = 0; l < e.length; l++) {
            if (a[r][n].quality == e[l]) {
              "D" == u.PlayerMgr.getInstance().getAbType() ? o += this.getEquipSellValue(a[r][n].id, a[r][n].type, a[r][n].IDCard, a[r][n]) : o += c.DataMgr.getInstance().getEquipStrengthenCfg(a[r][n].id, a[r][n].strengthenLv).sellPrice, u.PlayerMgr.getInstance().geUserData().abandonEquip(a[r][n]), n--;
              break;
            }
          }
        }
      }

      o > 0 && (u.PlayerMgr.getInstance().geUserData().addGoldNum(o), i.UIMgr.getInstance().openUI(s.UIID.UITips, -1, "出售成功，获得" + o + "金币"));
    }
  }, t.prototype.getEquipFightForId = function (t, e, o, a, i) {
    var n = null;
    if (i) n = i;else if (!e) for (var s = this.getOwmedEquipForEquipType(o), l = 0; l < s.length; l++) {
      if (t == s[l].id && a == s[l].IDCard) {
        n = s[l];
        break;
      }
    }

    if (!n) {
      var u = c.DataMgr.getInstance().getEquipCfg(t);
      n = {
        id: t,
        type: u.equipType,
        quality: u.qualityId,
        strengthenLv: 0,
        isUnlock: !0,
        isWear: !1,
        videoCount: 0,
        IDCard: 1,
        starLevel: 0
      };
    }

    var p = n.strengthenLv,
        g = n.starLevel,
        d = c.DataMgr.getInstance().getEquipCfg(n.id),
        h = [0, 0],
        f = 0;

    if (d.atk) {
      var m,
          y = r.Utils.getTabelArr(d.atk);

      if (h = [Number(y[0]), Number(y[1])], d.LvAtk) {
        var v = r.Utils.getTabelArr(d.LvAtk);
        h[0] += Number(v[0]) * p, h[1] += Number(v[1]) * p;
      }

      g && g > 0 && (m = c.DataMgr.getInstance().getEquipStarCfg(n.id, g)).atk && (v = r.Utils.getTabelArr(m.atk), h[0] += Number(v[0]), h[1] += Number(v[1]));
    }

    return d.hp && (f = d.hp, d.LvHp && (f += d.LvHp * p), g && g > 0 && (m = c.DataMgr.getInstance().getEquipStarCfg(n.id, g)).hp && (f += m.hp * g)), 4 * (h[0] + h[1]) + f;
  }, t.prototype.getEquipSellValue = function (t, e, o, a) {
    var i;
    if (a) i = a;else for (var n = this.getOwmedEquipForEquipType(e), s = 0; s < n.length; s++) {
      if (t == n[s].id && o == n[s].IDCard) {
        i = n[s];
        break;
      }
    }
    var l = c.DataMgr.getInstance().getEquipCfg(t),
        u = r.Utils.getTabelArr1(l.consume),
        p = i.strengthenLv >= l.strengthenMaxLv ? l.strengthenMaxLv - 1 : i.strengthenLv,
        g = Math.floor(p / 10),
        d = Math.floor(p % 10),
        h = 0;

    for (s = 0; s <= g; s++) {
      h += s == g ? Number(u[s][1]) * d : 10 * Number(u[s][1]);
    }

    var f = a.starLevel ? a.starLevel : 0;
    return h + Math.pow(2, f) * l.sellPrice;
  }, t.prototype.getEquipSellValue_QH = function (t, e, o, a) {
    var i;
    if (a) i = a;else for (var n = this.getOwmedEquipForEquipType(e), s = 0; s < n.length; s++) {
      if (t == n[s].id && o == n[s].IDCard) {
        i = n[s];
        break;
      }
    }
    var l = c.DataMgr.getInstance().getEquipCfg(t),
        u = r.Utils.getTabelArr1(l.consume),
        p = i.strengthenLv >= l.strengthenMaxLv ? l.strengthenMaxLv - 1 : i.strengthenLv,
        g = Math.floor(p / 10),
        d = Math.floor(p % 10),
        h = 0;

    for (s = 0; s <= g; s++) {
      h += s == g ? Number(u[s][1]) * d : 10 * Number(u[s][1]);
    }

    return h;
  }, t.prototype.playEffForQuality = function (t, e) {
    cc.isValid(t) && (5 == e ? (l["default"].playEffectForEffId(s.EnumEffID.EffGoodEquip3, t), l["default"].playEffectForEffId(s.EnumEffID.EffGoodEquip1, t, null, 0, 0, 1)) : 4 == e && l["default"].playEffectForEffId(s.EnumEffID.EffGoodEquip2, t, null, 0, 0, 1));
  }, t;
}();

o["default"] = g, function (t) {
  t[t.EnumNoShow = 1] = "EnumNoShow", t[t.EnumStrengthen = 2] = "EnumStrengthen", t[t.EnumSell = 3] = "EnumSell";
}(o.EnumEquipInfo || (o.EnumEquipInfo = {}));

o.SuitData = function () {};

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcRXF1aXBNZ3IuanMiXSwibmFtZXMiOlsidCIsInJlcXVpcmUiLCJlIiwibW9kdWxlIiwibyIsImV4cG9ydHMiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiU3VpdERhdGEiLCJFbnVtRXF1aXBJbmZvIiwiYSIsImkiLCJyIiwibiIsInMiLCJjIiwibCIsInUiLCJwIiwiZyIsImdldEluc3RhbmNlIiwiaW5zdGFuY2UiLCJwcm90b3R5cGUiLCJnZXRBbGxTdWl0TGlzdCIsIkRhdGFNZ3IiLCJnZXRBbGxFcXVpcFN1aXRDZmciLCJsZW5ndGgiLCJpZCIsImNvdW50IiwicHVzaCIsImdldFdlYXJFcXVpcExpc3QiLCJnZXRFcXVpcENmZyIsInN1aXRJZCIsIlBsYXllck1nciIsImdlVXNlckRhdGEiLCJnZXRXZWFyRXF1aXBEYXRhIiwidHlwZSIsImdldE93bmVkRXF1aXBMaXN0Iiwic29ydCIsInF1YWxpdHkiLCJnZXRPd21lZEVxdWlwRm9yRXF1aXBUeXBlIiwiZ2V0T3dtZWRFcXVpcEZvclF1YWxpdHlJZCIsImZvckVhY2giLCJmaWx0ZXIiLCJjb25jYXQiLCJnZXRPd25lZEVxdWlwQ291bnQiLCJpc0V4aXN0RXF1aXBGb3JUeXBlIiwiaXNFeGlzdEVxdWlwIiwiYWRkTWFueUVxdWlwIiwiYWRkRXF1aXAiLCJjb25zb2xlIiwibG9nIiwiYWJhbmRvbkVxdWlwIiwicmVwbGFjZUVxdWlwIiwicmVmcmVzaFdlYXJFcXVpcFF1YWxpdHkiLCJnZXRQcm9wRm9yQWxsRXF1aXAiLCJFdmVudE1nciIsImVtaXQiLCJFdmVudE5hbWUiLCJSZXBsYWNlRXF1aXAiLCJpc1NraW4iLCJyb2xlUGxheSIsImVxdWlwVHlwZSIsInJvbGVQbGF5X3Jlc2V0Iiwid2VhckVxdWlwIiwiV2VhckVxdWlwIiwidW5sb2FkRXF1aXAiLCJVbmxvYWRFcXVpcCIsInNlbGxFcXVpcCIsIlNlbGxFcXVpcCIsInN0cmVuZ3RoZW5FcXVpcCIsIlJlZnJlc2hTdHJlbmd0aGVuTHYiLCJSZWZyZXNoRXF1aXBWaWV3SW5mbyIsInVubG9ja0VxdWlwIiwiVW5sb2NrRXF1aXAiLCJnZXRQcm9wTmFtZUZvclByb3BUeXBlIiwiZ2V0UHJvcFBlcmNlbnQiLCJxdWlja1NlbGxGb3JTYXZlRGF0YSIsImdldEFiVHlwZSIsImdldEVxdWlwU2VsbFZhbHVlIiwiSURDYXJkIiwiZ2V0RXF1aXBTdHJlbmd0aGVuQ2ZnIiwic3RyZW5ndGhlbkx2Iiwic2VsbFByaWNlIiwiYWRkR29sZE51bSIsIlVJTWdyIiwib3BlblVJIiwiVUlJRCIsIlVJVGlwcyIsImdldEVxdWlwRmlnaHRGb3JJZCIsInF1YWxpdHlJZCIsImlzVW5sb2NrIiwiaXNXZWFyIiwidmlkZW9Db3VudCIsInN0YXJMZXZlbCIsImQiLCJoIiwiZiIsImF0ayIsIm0iLCJ5IiwiVXRpbHMiLCJnZXRUYWJlbEFyciIsIk51bWJlciIsIkx2QXRrIiwidiIsImdldEVxdWlwU3RhckNmZyIsImhwIiwiTHZIcCIsImdldFRhYmVsQXJyMSIsImNvbnN1bWUiLCJzdHJlbmd0aGVuTWF4THYiLCJNYXRoIiwiZmxvb3IiLCJwb3ciLCJnZXRFcXVpcFNlbGxWYWx1ZV9RSCIsInBsYXlFZmZGb3JRdWFsaXR5IiwiY2MiLCJpc1ZhbGlkIiwicGxheUVmZmVjdEZvckVmZklkIiwiRW51bUVmZklEIiwiRWZmR29vZEVxdWlwMyIsIkVmZkdvb2RFcXVpcDEiLCJFZmZHb29kRXF1aXAyIiwiRW51bU5vU2hvdyIsIkVudW1TdHJlbmd0aGVuIiwiRW51bVNlbGwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsQ0FBQyxHQUFHQyxPQUFSO0FBQ0EsSUFBSUMsQ0FBQyxHQUFHQyxNQUFSO0FBQ0EsSUFBSUMsQ0FBQyxHQUFHQyxPQUFSO0FBQ0FDLE1BQU0sQ0FBQ0MsY0FBUCxDQUFzQkgsQ0FBdEIsRUFBeUIsWUFBekIsRUFBdUM7RUFDbkNJLEtBQUssRUFBRSxDQUFDO0FBRDJCLENBQXZDLEdBR0FK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Q0FBRCxHQUFvQixVQUZwQjtBQUdILENBSkQsQ0FJRzNILENBQUMsQ0FBQ00sYUFBRixLQUFvQk4sQ0FBQyxDQUFDTSxhQUFGLEdBQWtCLEVBQXRDLENBSkgsQ0FEQTs7QUFNQU4sQ0FBQyxDQUFDSyxRQUFGLEdBQWEsWUFBVyxDQUFFLENBQTFCIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdCA9IHJlcXVpcmU7XG52YXIgZSA9IG1vZHVsZTtcbnZhciBvID0gZXhwb3J0cztcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiAhMFxufSksXG5vLlN1aXREYXRhID0gby5FbnVtRXF1aXBJbmZvID0gdm9pZCAwO1xudmFyIGEgPSB0KFwiRXZlbnRNZ3JcIiksXG5pID0gdChcIlVJTWdyXCIpLFxuciA9IHQoXCJVdGlsc1wiKSxcbm4gPSB0KFwiTWFpblwiKSxcbnMgPSB0KFwiQ29uZmlnXCIpLFxuYyA9IHQoXCJEYXRhTWdyXCIpLFxubCA9IHQoXCJFZmZlY3RNZ3JcIiksXG51ID0gdChcIlBsYXllck1nclwiKSxcbnAgPSB0KFwiUm9sZU1nclwiKSxcbmcgPSBmdW5jdGlvbigpIHtcbiAgICBmdW5jdGlvbiB0KCkge31cbiAgICByZXR1cm4gdC5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbnVsbCA9PSB0aGlzLmluc3RhbmNlICYmICh0aGlzLmluc3RhbmNlID0gbmV3IHQpLFxuICAgICAgICB0aGlzLmluc3RhbmNlXG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5nZXRBbGxTdWl0TGlzdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBmb3IgKHZhciBlID0gW10sIG8gPSBjLkRhdGFNZ3IuZ2V0SW5zdGFuY2UoKS5nZXRBbGxFcXVpcFN1aXRDZmcoKSwgYSA9IDA7IGEgPCBvLmxlbmd0aDsgYSsrKSB7XG4gICAgICAgICAgICB2YXIgaSA9IHtcbiAgICAgICAgICAgICAgICBpZDogb1thXS5pZCxcbiAgICAgICAgICAgICAgICBjb3VudDogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGUucHVzaChpKVxuICAgICAgICB9XG4gICAgICAgIHZhciByID0gdC5nZXRJbnN0YW5jZSgpLmdldFdlYXJFcXVpcExpc3QoKTtcbiAgICAgICAgZm9yIChhID0gMDsgYSA8IHIubGVuZ3RoOyBhKyspIGZvciAodmFyIG4gPSBjLkRhdGFNZ3IuZ2V0SW5zdGFuY2UoKS5nZXRFcXVpcENmZyhyW2FdLmlkKSwgcyA9IDA7IHMgPCBlLmxlbmd0aDsgcysrKSBpZiAobi5zdWl0SWQgPT0gZVtzXS5pZCkge1xuICAgICAgICAgICAgZVtzXS5jb3VudCsrO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZVxuICAgIH0sXG4gICAgdC5wcm90b3R5cGUuZ2V0V2VhckVxdWlwTGlzdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdS5QbGF5ZXJNZ3IuZ2V0SW5zdGFuY2UoKS5nZVVzZXJEYXRhKCkuZ2V0V2VhckVxdWlwTGlzdCgpXG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5nZXRXZWFyRXF1aXBEYXRhID0gZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBlID0gdS5QbGF5ZXJNZ3IuZ2V0SW5zdGFuY2UoKS5nZVVzZXJEYXRhKCkuZ2V0V2VhckVxdWlwTGlzdCgpLCBvID0gMDsgbyA8IGUubGVuZ3RoOyBvKyspIGlmIChlW29dLnR5cGUgPT0gdCkgcmV0dXJuIGVbb107XG4gICAgICAgIHJldHVybiBudWxsXG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5nZXRPd25lZEVxdWlwTGlzdCA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdm9pZCAwID09PSB0ICYmICh0ID0gMSk7XG4gICAgICAgIGZvciAodmFyIGUgPSBbXSwgbyA9IHUuUGxheWVyTWdyLmdldEluc3RhbmNlKCkuZ2VVc2VyRGF0YSgpLmdldE93bmVkRXF1aXBMaXN0KCksIGEgPSAwOyBhIDwgby5sZW5ndGg7IGErKykgb1thXS5zb3J0KGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlLmlkIC0gdC5pZFxuICAgICAgICB9KSxcbiAgICAgICAgb1thXS5zb3J0KGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlLnF1YWxpdHkgLSB0LnF1YWxpdHlcbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAoYSA9IDA7IGEgPCBvLmxlbmd0aDsgYSsrKSBmb3IgKHZhciBpID0gMDsgaSA8IG9bYV0ubGVuZ3RoOyBpKyspIGUucHVzaChvW2FdW2ldKTtcbiAgICAgICAgcmV0dXJuIDEgPT0gdCA/IGUuc29ydChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gZS5xdWFsaXR5IC0gdC5xdWFsaXR5XG4gICAgICAgIH0pIDogMiA9PSB0ICYmIGUuc29ydChmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgICAgICByZXR1cm4gdC50eXBlIC0gZS50eXBlXG4gICAgICAgIH0pLFxuICAgICAgICBlXG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5nZXRPd21lZEVxdWlwRm9yRXF1aXBUeXBlID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHQgLSAxO1xuICAgICAgICByZXR1cm4gKGUgPCAwIHx8IGUgPiA1KSAmJiAoZSA9IDApLFxuICAgICAgICB1LlBsYXllck1nci5nZXRJbnN0YW5jZSgpLmdlVXNlckRhdGEoKS5nZXRPd25lZEVxdWlwTGlzdCgpW2VdXG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5nZXRPd21lZEVxdWlwRm9yUXVhbGl0eUlkID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHUuUGxheWVyTWdyLmdldEluc3RhbmNlKCkuZ2VVc2VyRGF0YSgpLmdldE93bmVkRXF1aXBMaXN0KCksXG4gICAgICAgIG8gPSBbXTtcbiAgICAgICAgcmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbihlKSB7XG4gICAgICAgICAgICB2YXIgYSA9IGUuZmlsdGVyKGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5xdWFsaXR5ID09IHRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbyA9IG8uY29uY2F0KGEpXG4gICAgICAgIH0pLFxuICAgICAgICBvXG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5nZXRPd25lZEVxdWlwQ291bnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZm9yICh2YXIgdCA9IDAsXG4gICAgICAgIGUgPSB1LlBsYXllck1nci5nZXRJbnN0YW5jZSgpLmdlVXNlckRhdGEoKS5nZXRPd25lZEVxdWlwTGlzdCgpLCBvID0gMDsgbyA8IGUubGVuZ3RoOyBvKyspIHQgKz0gZVtvXS5sZW5ndGg7XG4gICAgICAgIHJldHVybiB0XG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5pc0V4aXN0RXF1aXBGb3JUeXBlID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gdS5QbGF5ZXJNZ3IuZ2V0SW5zdGFuY2UoKS5nZVVzZXJEYXRhKCkuaXNFeGlzdEVxdWlwKHQpXG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5hZGRNYW55RXF1aXAgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHUuUGxheWVyTWdyLmdldEluc3RhbmNlKCkuZ2VVc2VyRGF0YSgpLmFkZE1hbnlFcXVpcCh0KVxuICAgIH0sXG4gICAgdC5wcm90b3R5cGUuYWRkRXF1aXAgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHQgJiYgKHRoaXMuZ2V0T3duZWRFcXVpcENvdW50KCkgPj0gMTM0ID8gY29uc29sZS5sb2coXCLoo4XlpIfku5PlupPlv6vmu6HkuobvvIzor7flj4rml7bmuIXnkIbku5PlupPvvIHvvIHvvIFcIikgOiB0aGlzLmdldE93bmVkRXF1aXBDb3VudCgpID49IDE0NCA/IGNvbnNvbGUubG9nKFwi6KOF5aSH5LuT5bqT5bey5ruh5LqG77yM6K+35Y+K5pe25riF55CG5LuT5bqT77yB77yB77yBXCIpIDogdS5QbGF5ZXJNZ3IuZ2V0SW5zdGFuY2UoKS5nZVVzZXJEYXRhKCkuYWRkRXF1aXAodCkpXG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5hYmFuZG9uRXF1aXAgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHQgJiYgdS5QbGF5ZXJNZ3IuZ2V0SW5zdGFuY2UoKS5nZVVzZXJEYXRhKCkuYWJhbmRvbkVxdWlwKHQpXG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5yZXBsYWNlRXF1aXAgPSBmdW5jdGlvbih0LCBlLCBvKSB7XG4gICAgICAgIGlmIChlICYmIG8pIHtcbiAgICAgICAgICAgIHUuUGxheWVyTWdyLmdldEluc3RhbmNlKCkuZ2VVc2VyRGF0YSgpLnJlcGxhY2VFcXVpcChlLCBvKSxcbiAgICAgICAgICAgIHUuUGxheWVyTWdyLmdldEluc3RhbmNlKCkuZ2VVc2VyRGF0YSgpLnJlZnJlc2hXZWFyRXF1aXBRdWFsaXR5KG8udHlwZSwgby5xdWFsaXR5KSxcbiAgICAgICAgICAgIHAuZGVmYXVsdC5nZXRJbnN0YW5jZSgpLmdldFByb3BGb3JBbGxFcXVpcCghMCksXG4gICAgICAgICAgICBhLkV2ZW50TWdyLmdldEluc3RhbmNlKCkuZW1pdChzLkV2ZW50TmFtZS5SZXBsYWNlRXF1aXAsIHQsIGUsIG8pO1xuICAgICAgICAgICAgdmFyIGkgPSBjLkRhdGFNZ3IuZ2V0SW5zdGFuY2UoKS5nZXRFcXVpcENmZyhvLmlkKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5b2T5YmN6KOF5aSHaWTvvJpcIiwgby5pZCksXG4gICAgICAgICAgICAxID09IGkuaXNTa2luID8gbi5kZWZhdWx0Lmluc3RhbmNlLnJvbGVQbGF5KG8uaWQpIDogNCA9PSBpLmVxdWlwVHlwZSAmJiBuLmRlZmF1bHQuaW5zdGFuY2Uucm9sZVBsYXlfcmVzZXQoby5pZClcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdC5wcm90b3R5cGUud2VhckVxdWlwID0gZnVuY3Rpb24odCwgZSkge1xuICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgdS5QbGF5ZXJNZ3IuZ2V0SW5zdGFuY2UoKS5nZVVzZXJEYXRhKCkud2VhckVxdWlwKGUpLFxuICAgICAgICAgICAgdS5QbGF5ZXJNZ3IuZ2V0SW5zdGFuY2UoKS5nZVVzZXJEYXRhKCkucmVmcmVzaFdlYXJFcXVpcFF1YWxpdHkoZS50eXBlLCBlLnF1YWxpdHkpLFxuICAgICAgICAgICAgcC5kZWZhdWx0LmdldEluc3RhbmNlKCkuZ2V0UHJvcEZvckFsbEVxdWlwKCEwKSxcbiAgICAgICAgICAgIGEuRXZlbnRNZ3IuZ2V0SW5zdGFuY2UoKS5lbWl0KHMuRXZlbnROYW1lLldlYXJFcXVpcCwgdCwgZSk7XG4gICAgICAgICAgICB2YXIgbyA9IGMuRGF0YU1nci5nZXRJbnN0YW5jZSgpLmdldEVxdWlwQ2ZnKGUuaWQpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCLlvZPliY3oo4XlpIdpZO+8mlwiLCBlLmlkKSxcbiAgICAgICAgICAgIDEgPT0gby5pc1NraW4gJiYgbi5kZWZhdWx0Lmluc3RhbmNlLnJvbGVQbGF5KGUuaWQpXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHQucHJvdG90eXBlLnVubG9hZEVxdWlwID0gZnVuY3Rpb24odCkge1xuICAgICAgICBpZiAodCkge1xuICAgICAgICAgICAgdS5QbGF5ZXJNZ3IuZ2V0SW5zdGFuY2UoKS5nZVVzZXJEYXRhKCkudW5sb2FkRXF1aXAodCksXG4gICAgICAgICAgICBwLmRlZmF1bHQuZ2V0SW5zdGFuY2UoKS5nZXRQcm9wRm9yQWxsRXF1aXAoITApLFxuICAgICAgICAgICAgYS5FdmVudE1nci5nZXRJbnN0YW5jZSgpLmVtaXQocy5FdmVudE5hbWUuVW5sb2FkRXF1aXAsIHQpO1xuICAgICAgICAgICAgdmFyIGUgPSBjLkRhdGFNZ3IuZ2V0SW5zdGFuY2UoKS5nZXRFcXVpcENmZyh0LmlkKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi5b2T5YmN6KOF5aSHaWTvvJpcIiwgdC5pZCksXG4gICAgICAgICAgICAxID09IGUuaXNTa2luICYmIG4uZGVmYXVsdC5pbnN0YW5jZS5yb2xlUGxheV9yZXNldCh0LmlkKVxuICAgICAgICB9XG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5zZWxsRXF1aXAgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGUgJiYgKHUuUGxheWVyTWdyLmdldEluc3RhbmNlKCkuZ2VVc2VyRGF0YSgpLmFiYW5kb25FcXVpcChlKSwgYS5FdmVudE1nci5nZXRJbnN0YW5jZSgpLmVtaXQocy5FdmVudE5hbWUuU2VsbEVxdWlwLCB0LCBlKSlcbiAgICB9LFxuICAgIHQucHJvdG90eXBlLnN0cmVuZ3RoZW5FcXVpcCA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdCAmJiAodS5QbGF5ZXJNZ3IuZ2V0SW5zdGFuY2UoKS5nZVVzZXJEYXRhKCkuc3RyZW5ndGhlbkVxdWlwKHQsIGUpLCBwLmRlZmF1bHQuZ2V0SW5zdGFuY2UoKS5nZXRQcm9wRm9yQWxsRXF1aXAoITApLCBhLkV2ZW50TWdyLmdldEluc3RhbmNlKCkuZW1pdChzLkV2ZW50TmFtZS5SZWZyZXNoU3RyZW5ndGhlbkx2LCB0KSwgYS5FdmVudE1nci5nZXRJbnN0YW5jZSgpLmVtaXQocy5FdmVudE5hbWUuUmVmcmVzaEVxdWlwVmlld0luZm8pKVxuICAgIH0sXG4gICAgdC5wcm90b3R5cGUudW5sb2NrRXF1aXAgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGUgJiYgKHUuUGxheWVyTWdyLmdldEluc3RhbmNlKCkuZ2VVc2VyRGF0YSgpLnVubG9ja0VxdWlwKGUpLCBhLkV2ZW50TWdyLmdldEluc3RhbmNlKCkuZW1pdChzLkV2ZW50TmFtZS5VbmxvY2tFcXVpcCwgdCwgZSkpXG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5nZXRQcm9wTmFtZUZvclByb3BUeXBlID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IFwi5pS75Ye75YqbXCI7XG4gICAgICAgIHN3aXRjaCAodCkge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGUgPSBcIuaUu+WHu+WKm1wiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgZSA9IFwi6KGA6YeP5LiK6ZmQXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBlID0gXCLmlLvlh7vpgJ/luqZcIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGUgPSBcIuaatOWHu+eOh1wiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgZSA9IFwi5pq05Ye75Lyk5a6zXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICBlID0gXCLkvKTlrrPlh4/lhY1cIjtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgIGUgPSBcIumXqumBv+eOh1wiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgZSA9IFwi5pS75Ye75YqbXCI7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICBlID0gXCLooYDph4/kuIrpmZBcIjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZVxuICAgIH0sXG4gICAgdC5wcm90b3R5cGUuZ2V0UHJvcFBlcmNlbnQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHZhciBlID0gXCIlXCI7XG4gICAgICAgIHN3aXRjaCAodCkge1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIGUgPSBcIlwiO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OiBlID0gXCIlXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVcbiAgICB9LFxuICAgIHQucHJvdG90eXBlLnF1aWNrU2VsbEZvclNhdmVEYXRhID0gZnVuY3Rpb24odCkge1xuICAgICAgICB2YXIgZSA9IHQ7XG4gICAgICAgIGlmIChlICYmICEoZS5sZW5ndGggPD0gMCkpIHtcbiAgICAgICAgICAgIGZvciAodmFyIG8gPSAwLFxuICAgICAgICAgICAgYSA9IHUuUGxheWVyTWdyLmdldEluc3RhbmNlKCkuZ2VVc2VyRGF0YSgpLmdldE93bmVkRXF1aXBMaXN0KCksIHIgPSAwOyByIDwgYS5sZW5ndGg7IHIrKykgZm9yICh2YXIgbiA9IDA7IG4gPCBhW3JdLmxlbmd0aDsgbisrKSBmb3IgKHZhciBsID0gMDsgbCA8IGUubGVuZ3RoOyBsKyspIGlmIChhW3JdW25dLnF1YWxpdHkgPT0gZVtsXSkge1xuICAgICAgICAgICAgICAgIFwiRFwiID09IHUuUGxheWVyTWdyLmdldEluc3RhbmNlKCkuZ2V0QWJUeXBlKCkgPyBvICs9IHRoaXMuZ2V0RXF1aXBTZWxsVmFsdWUoYVtyXVtuXS5pZCwgYVtyXVtuXS50eXBlLCBhW3JdW25dLklEQ2FyZCwgYVtyXVtuXSkgOiBvICs9IGMuRGF0YU1nci5nZXRJbnN0YW5jZSgpLmdldEVxdWlwU3RyZW5ndGhlbkNmZyhhW3JdW25dLmlkLCBhW3JdW25dLnN0cmVuZ3RoZW5Mdikuc2VsbFByaWNlLFxuICAgICAgICAgICAgICAgIHUuUGxheWVyTWdyLmdldEluc3RhbmNlKCkuZ2VVc2VyRGF0YSgpLmFiYW5kb25FcXVpcChhW3JdW25dKSxcbiAgICAgICAgICAgICAgICBuLS07XG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG8gPiAwICYmICh1LlBsYXllck1nci5nZXRJbnN0YW5jZSgpLmdlVXNlckRhdGEoKS5hZGRHb2xkTnVtKG8pLCBpLlVJTWdyLmdldEluc3RhbmNlKCkub3BlblVJKHMuVUlJRC5VSVRpcHMsIC0xLCBcIuWHuuWUruaIkOWKn++8jOiOt+W+l1wiICsgbyArIFwi6YeR5biBXCIpKVxuICAgICAgICB9XG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5nZXRFcXVpcEZpZ2h0Rm9ySWQgPSBmdW5jdGlvbih0LCBlLCBvLCBhLCBpKSB7XG4gICAgICAgIHZhciBuID0gbnVsbDtcbiAgICAgICAgaWYgKGkpIG4gPSBpO1xuICAgICAgICBlbHNlIGlmICghZSkgZm9yICh2YXIgcyA9IHRoaXMuZ2V0T3dtZWRFcXVpcEZvckVxdWlwVHlwZShvKSwgbCA9IDA7IGwgPCBzLmxlbmd0aDsgbCsrKSBpZiAodCA9PSBzW2xdLmlkICYmIGEgPT0gc1tsXS5JRENhcmQpIHtcbiAgICAgICAgICAgIG4gPSBzW2xdO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIW4pIHtcbiAgICAgICAgICAgIHZhciB1ID0gYy5EYXRhTWdyLmdldEluc3RhbmNlKCkuZ2V0RXF1aXBDZmcodCk7XG4gICAgICAgICAgICBuID0ge1xuICAgICAgICAgICAgICAgIGlkOiB0LFxuICAgICAgICAgICAgICAgIHR5cGU6IHUuZXF1aXBUeXBlLFxuICAgICAgICAgICAgICAgIHF1YWxpdHk6IHUucXVhbGl0eUlkLFxuICAgICAgICAgICAgICAgIHN0cmVuZ3RoZW5MdjogMCxcbiAgICAgICAgICAgICAgICBpc1VubG9jazogITAsXG4gICAgICAgICAgICAgICAgaXNXZWFyOiAhMSxcbiAgICAgICAgICAgICAgICB2aWRlb0NvdW50OiAwLFxuICAgICAgICAgICAgICAgIElEQ2FyZDogMSxcbiAgICAgICAgICAgICAgICBzdGFyTGV2ZWw6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgcCA9IG4uc3RyZW5ndGhlbkx2LFxuICAgICAgICBnID0gbi5zdGFyTGV2ZWwsXG4gICAgICAgIGQgPSBjLkRhdGFNZ3IuZ2V0SW5zdGFuY2UoKS5nZXRFcXVpcENmZyhuLmlkKSxcbiAgICAgICAgaCA9IFswLCAwXSxcbiAgICAgICAgZiA9IDA7XG4gICAgICAgIGlmIChkLmF0aykge1xuICAgICAgICAgICAgdmFyIG0sIHkgPSByLlV0aWxzLmdldFRhYmVsQXJyKGQuYXRrKTtcbiAgICAgICAgICAgIGlmIChoID0gW051bWJlcih5WzBdKSwgTnVtYmVyKHlbMV0pXSwgZC5MdkF0aykge1xuICAgICAgICAgICAgICAgIHZhciB2ID0gci5VdGlscy5nZXRUYWJlbEFycihkLkx2QXRrKTtcbiAgICAgICAgICAgICAgICBoWzBdICs9IE51bWJlcih2WzBdKSAqIHAsXG4gICAgICAgICAgICAgICAgaFsxXSArPSBOdW1iZXIodlsxXSkgKiBwXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnICYmIGcgPiAwICYmIChtID0gYy5EYXRhTWdyLmdldEluc3RhbmNlKCkuZ2V0RXF1aXBTdGFyQ2ZnKG4uaWQsIGcpKS5hdGsgJiYgKHYgPSByLlV0aWxzLmdldFRhYmVsQXJyKG0uYXRrKSwgaFswXSArPSBOdW1iZXIodlswXSksIGhbMV0gKz0gTnVtYmVyKHZbMV0pKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkLmhwICYmIChmID0gZC5ocCwgZC5MdkhwICYmIChmICs9IGQuTHZIcCAqIHApLCBnICYmIGcgPiAwICYmIChtID0gYy5EYXRhTWdyLmdldEluc3RhbmNlKCkuZ2V0RXF1aXBTdGFyQ2ZnKG4uaWQsIGcpKS5ocCAmJiAoZiArPSBtLmhwICogZykpLFxuICAgICAgICA0ICogKGhbMF0gKyBoWzFdKSArIGZcbiAgICB9LFxuICAgIHQucHJvdG90eXBlLmdldEVxdWlwU2VsbFZhbHVlID0gZnVuY3Rpb24odCwgZSwgbywgYSkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgaWYgKGEpIGkgPSBhO1xuICAgICAgICBlbHNlIGZvciAodmFyIG4gPSB0aGlzLmdldE93bWVkRXF1aXBGb3JFcXVpcFR5cGUoZSksIHMgPSAwOyBzIDwgbi5sZW5ndGg7IHMrKykgaWYgKHQgPT0gbltzXS5pZCAmJiBvID09IG5bc10uSURDYXJkKSB7XG4gICAgICAgICAgICBpID0gbltzXTtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGwgPSBjLkRhdGFNZ3IuZ2V0SW5zdGFuY2UoKS5nZXRFcXVpcENmZyh0KSxcbiAgICAgICAgdSA9IHIuVXRpbHMuZ2V0VGFiZWxBcnIxKGwuY29uc3VtZSksXG4gICAgICAgIHAgPSBpLnN0cmVuZ3RoZW5MdiA+PSBsLnN0cmVuZ3RoZW5NYXhMdiA/IGwuc3RyZW5ndGhlbk1heEx2IC0gMSA6IGkuc3RyZW5ndGhlbkx2LFxuICAgICAgICBnID0gTWF0aC5mbG9vcihwIC8gMTApLFxuICAgICAgICBkID0gTWF0aC5mbG9vcihwICUgMTApLFxuICAgICAgICBoID0gMDtcbiAgICAgICAgZm9yIChzID0gMDsgcyA8PSBnOyBzKyspIGggKz0gcyA9PSBnID8gTnVtYmVyKHVbc11bMV0pICogZDogMTAgKiBOdW1iZXIodVtzXVsxXSk7XG4gICAgICAgIHZhciBmID0gYS5zdGFyTGV2ZWwgPyBhLnN0YXJMZXZlbDogMDtcbiAgICAgICAgcmV0dXJuIGggKyBNYXRoLnBvdygyLCBmKSAqIGwuc2VsbFByaWNlXG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5nZXRFcXVpcFNlbGxWYWx1ZV9RSCA9IGZ1bmN0aW9uKHQsIGUsIG8sIGEpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIGlmIChhKSBpID0gYTtcbiAgICAgICAgZWxzZSBmb3IgKHZhciBuID0gdGhpcy5nZXRPd21lZEVxdWlwRm9yRXF1aXBUeXBlKGUpLCBzID0gMDsgcyA8IG4ubGVuZ3RoOyBzKyspIGlmICh0ID09IG5bc10uaWQgJiYgbyA9PSBuW3NdLklEQ2FyZCkge1xuICAgICAgICAgICAgaSA9IG5bc107XG4gICAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICAgIHZhciBsID0gYy5EYXRhTWdyLmdldEluc3RhbmNlKCkuZ2V0RXF1aXBDZmcodCksXG4gICAgICAgIHUgPSByLlV0aWxzLmdldFRhYmVsQXJyMShsLmNvbnN1bWUpLFxuICAgICAgICBwID0gaS5zdHJlbmd0aGVuTHYgPj0gbC5zdHJlbmd0aGVuTWF4THYgPyBsLnN0cmVuZ3RoZW5NYXhMdiAtIDEgOiBpLnN0cmVuZ3RoZW5MdixcbiAgICAgICAgZyA9IE1hdGguZmxvb3IocCAvIDEwKSxcbiAgICAgICAgZCA9IE1hdGguZmxvb3IocCAlIDEwKSxcbiAgICAgICAgaCA9IDA7XG4gICAgICAgIGZvciAocyA9IDA7IHMgPD0gZzsgcysrKSBoICs9IHMgPT0gZyA/IE51bWJlcih1W3NdWzFdKSAqIGQ6IDEwICogTnVtYmVyKHVbc11bMV0pO1xuICAgICAgICByZXR1cm4gaFxuICAgIH0sXG4gICAgdC5wcm90b3R5cGUucGxheUVmZkZvclF1YWxpdHkgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGNjLmlzVmFsaWQodCkgJiYgKDUgPT0gZSA/IChsLmRlZmF1bHQucGxheUVmZmVjdEZvckVmZklkKHMuRW51bUVmZklELkVmZkdvb2RFcXVpcDMsIHQpLCBsLmRlZmF1bHQucGxheUVmZmVjdEZvckVmZklkKHMuRW51bUVmZklELkVmZkdvb2RFcXVpcDEsIHQsIG51bGwsIDAsIDAsIDEpKSA6IDQgPT0gZSAmJiBsLmRlZmF1bHQucGxheUVmZmVjdEZvckVmZklkKHMuRW51bUVmZklELkVmZkdvb2RFcXVpcDIsIHQsIG51bGwsIDAsIDAsIDEpKVxuICAgIH0sXG4gICAgdFxufSAoKTtcbm8uZGVmYXVsdCA9IGcsXG5mdW5jdGlvbih0KSB7XG4gICAgdFt0LkVudW1Ob1Nob3cgPSAxXSA9IFwiRW51bU5vU2hvd1wiLFxuICAgIHRbdC5FbnVtU3RyZW5ndGhlbiA9IDJdID0gXCJFbnVtU3RyZW5ndGhlblwiLFxuICAgIHRbdC5FbnVtU2VsbCA9IDNdID0gXCJFbnVtU2VsbFwiXG59IChvLkVudW1FcXVpcEluZm8gfHwgKG8uRW51bUVxdWlwSW5mbyA9IHt9KSk7XG5vLlN1aXREYXRhID0gZnVuY3Rpb24oKSB7fSJdfQ==