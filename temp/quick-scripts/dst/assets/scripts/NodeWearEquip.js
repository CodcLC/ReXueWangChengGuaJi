
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/NodeWearEquip.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '6242cN+KlNHj6SM3Ry5y0yR', 'NodeWearEquip');
// scripts/NodeWearEquip.js

"use strict";

var t = require;
var e = module;
var o = exports;

var _a,
    i = void 0 && (void 0).__extends || (_a = function a(t, e) {
  return (_a = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (t, e) {
    t.__proto__ = e;
  } || function (t, e) {
    for (var o in e) {
      Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
    }
  })(t, e);
}, function (t, e) {
  function o() {
    this.constructor = t;
  }

  _a(t, e), t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o());
}),
    r = void 0 && (void 0).__decorate || function (t, e, o, a) {
  var i,
      r = arguments.length,
      n = r < 3 ? e : null === a ? a = Object.getOwnPropertyDescriptor(e, o) : a;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) n = Reflect.decorate(t, e, o, a);else for (var s = t.length - 1; s >= 0; s--) {
    (i = t[s]) && (n = (r < 3 ? i(n) : r > 3 ? i(e, o, n) : i(e, o)) || n);
  }
  return r > 3 && n && Object.defineProperty(e, o, n), n;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});

var n = t("EventMgr"),
    s = t("UIMgr"),
    c = t("Utils"),
    l = t("Config"),
    u = t("DataMgr"),
    p = t("EquipMgr"),
    g = t("PlayerMgr"),
    d = cc._decorator,
    h = d.ccclass,
    f = d.property,
    m = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    return e.LabStrengthenLv = null, e.uiView = l.UIID.UIEquip, e.curBagIndex = 1, e.equipData = null, e;
  }

  return i(e, t), e.prototype.start = function () {}, e.prototype.registerEvent = function () {
    n.EventMgr.getInstance().on(l.EventName.RefreshStrengthenLv, this, this.strengthenEquip);
  }, e.prototype.registerBtnEvent = function () {
    var t = this;
    this.node.on(cc.Node.EventType.TOUCH_END, function () {
      var e = c.Utils.posTransform(t.node.parent, t.node.getPosition(), s.UIMgr.getInstance().getUIRoot(t.uiView)),
          o = g.PlayerMgr.getInstance().getAbType(),
          a = "D" == o || "B" == o ? l.UIID.UIEquipInfoNew : l.UIID.UIEquipInfo;
      s.UIMgr.getInstance().openUI(a, -1, t.equipData, t.equipData, e, p.EnumEquipInfo.EnumStrengthen, t.curBagIndex);
    });
  }, e.prototype.initData = function (t, e, o) {
    this.curBagIndex = t, this.equipData = e, this.uiView = o, this.registerEvent(), this.registerBtnEvent();
  }, e.prototype.strengthenEquip = function (t) {
    this.equipData && (this.refreshStrengthenRedDot(), t && t.id == this.equipData.id && t.type == this.equipData.type && t.IDCard == this.equipData.IDCard && (this.equipData.strengthenLv = t.strengthenLv, this.refreshStrengthenLv()));
  }, e.prototype.refreshStrengthenLv = function () {
    this.equipData.strengthenLv > 0 ? (this.LabStrengthenLv.node.active = !0, this.LabStrengthenLv.string = "+" + this.equipData.strengthenLv) : this.LabStrengthenLv.node.active = !1;
  }, e.prototype.refreshStrengthenRedDot = function () {
    var t = 0,
        e = g.PlayerMgr.getInstance().getAbType();

    if ("D" == e || "B" == e) {
      var o = u.DataMgr.getInstance().getEquipCfg(this.equipData.id),
          a = c.Utils.getTabelArr1(o.consume),
          i = this.equipData.strengthenLv;
      i < o.strengthenMaxLv && (t = Number(a[Math.floor(i / 10)][1]));
    } else t = u.DataMgr.getInstance().getEquipStrengthenCfg(this.equipData.id, this.equipData.strengthenLv).consume;

    var r;

    if (r = g.PlayerMgr.getInstance().geUserData().getGoldNum() >= t, this.node.getChildByName("SpRedDot").active = r, !r && ("D" == e || "B" == e)) {
      for (var n = !1, s = p["default"].getInstance().getOwmedEquipForEquipType(this.equipData.type), l = 0; l < s.length; l++) {
        if (s[l].IDCard != this.equipData.IDCard && s[l].id == this.equipData.id && s[l].type == this.equipData.type && s[l].starLevel == this.equipData.starLevel) {
          n = !0;
          break;
        }
      }

      this.node.getChildByName("SpRedDot").active = n;
    }
  }, e.prototype.onDestroy = function () {
    n.EventMgr.getInstance().off(l.EventName.RefreshStrengthenLv, this, this.strengthenEquip);
  }, r([f(cc.Label)], e.prototype, "LabStrengthenLv", void 0), r([h], e);
}(cc.Component);

o["default"] = m;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcTm9kZVdlYXJFcXVpcC5qcyJdLCJuYW1lcyI6WyJ0IiwicmVxdWlyZSIsImUiLCJtb2R1bGUiLCJvIiwiZXhwb3J0cyIsImEiLCJpIiwiX19leHRlbmRzIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiciIsIl9fZGVjb3JhdGUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJuIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUmVmbGVjdCIsImRlY29yYXRlIiwicyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJjIiwibCIsInUiLCJwIiwiZyIsImQiLCJjYyIsIl9kZWNvcmF0b3IiLCJoIiwiY2NjbGFzcyIsImYiLCJwcm9wZXJ0eSIsIm0iLCJhcHBseSIsIkxhYlN0cmVuZ3RoZW5MdiIsInVpVmlldyIsIlVJSUQiLCJVSUVxdWlwIiwiY3VyQmFnSW5kZXgiLCJlcXVpcERhdGEiLCJzdGFydCIsInJlZ2lzdGVyRXZlbnQiLCJFdmVudE1nciIsImdldEluc3RhbmNlIiwib24iLCJFdmVudE5hbWUiLCJSZWZyZXNoU3RyZW5ndGhlbkx2Iiwic3RyZW5ndGhlbkVxdWlwIiwicmVnaXN0ZXJCdG5FdmVudCIsIm5vZGUiLCJOb2RlIiwiRXZlbnRUeXBlIiwiVE9VQ0hfRU5EIiwiVXRpbHMiLCJwb3NUcmFuc2Zvcm0iLCJwYXJlbnQiLCJnZXRQb3NpdGlvbiIsIlVJTWdyIiwiZ2V0VUlSb290IiwiUGxheWVyTWdyIiwiZ2V0QWJUeXBlIiwiVUlFcXVpcEluZm9OZXciLCJVSUVxdWlwSW5mbyIsIm9wZW5VSSIsIkVudW1FcXVpcEluZm8iLCJFbnVtU3RyZW5ndGhlbiIsImluaXREYXRhIiwicmVmcmVzaFN0cmVuZ3RoZW5SZWREb3QiLCJpZCIsInR5cGUiLCJJRENhcmQiLCJzdHJlbmd0aGVuTHYiLCJyZWZyZXNoU3RyZW5ndGhlbkx2IiwiYWN0aXZlIiwic3RyaW5nIiwiRGF0YU1nciIsImdldEVxdWlwQ2ZnIiwiZ2V0VGFiZWxBcnIxIiwiY29uc3VtZSIsInN0cmVuZ3RoZW5NYXhMdiIsIk51bWJlciIsIk1hdGgiLCJmbG9vciIsImdldEVxdWlwU3RyZW5ndGhlbkNmZyIsImdlVXNlckRhdGEiLCJnZXRHb2xkTnVtIiwiZ2V0Q2hpbGRCeU5hbWUiLCJnZXRPd21lZEVxdWlwRm9yRXF1aXBUeXBlIiwic3RhckxldmVsIiwib25EZXN0cm95Iiwib2ZmIiwiTGFiZWwiLCJDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsQ0FBQyxHQUFHQyxPQUFSO0FBQ0EsSUFBSUMsQ0FBQyxHQUFHQyxNQUFSO0FBQ0EsSUFBSUMsQ0FBQyxHQUFHQyxPQUFSOztBQUNBLElBQUlDLEVBQUo7QUFBQSxJQUFPQyxDQUFDLEdBQUcsVUFBUSxTQUFLQyxTQUFiLEtBQTJCRixFQUFDLEdBQUcsV0FBU04sQ0FBVCxFQUFZRSxDQUFaLEVBQWU7RUFDckQsT0FBTyxDQUFDSSxFQUFDLEdBQUdHLE1BQU0sQ0FBQ0MsY0FBUCxJQUF5QjtJQUNqQ0MsU0FBUyxFQUFFO0VBRHNCLGFBRzFCQyxLQUgwQixJQUlyQyxVQUFTWixDQUFULEVBQVlFLENBQVosRUFBZTtJQUNYRixDQUFDLENBQUNXLFNBQUYsR0FBY1QsQ0FBZDtFQUNILENBTlcsSUFPWixVQUFTRixDQUFULEVBQVlFLENBQVosRUFBZTtJQUNYLEtBQUssSUFBSUUsQ0FBVCxJQUFjRixDQUFkO01BQWlCTyxNQUFNLENBQUNJLFNBQVAsQ0FBaUJDLGNBQWpCLENBQWdDQyxJQUFoQyxDQUFxQ2IsQ0FBckMsRUFBd0NFLENBQXhDLE1BQStDSixDQUFDLENBQUNJLENBQUQsQ0FBRCxHQUFPRixDQUFDLENBQUNFLENBQUQsQ0FBdkQ7SUFBakI7RUFDSCxDQVRNLEVBU0pKLENBVEksRUFTREUsQ0FUQyxDQUFQO0FBVUgsQ0FY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QWEsS0FBSzlCLFNBQUwsQ0FBZThCLElBQXBHLElBQTRHcEQsQ0FBQyxDQUFDSSxDQUFELENBQUQsQ0FBS21FLFNBQUwsSUFBa0IsS0FBS2pELFNBQUwsQ0FBZWlELFNBQWpKLEVBQTRKO1VBQzlQM0UsQ0FBQyxHQUFHLENBQUMsQ0FBTDtVQUNBO1FBQ0g7TUFKRDs7TUFLQSxLQUFLb0MsSUFBTCxDQUFVcUMsY0FBVixDQUF5QixVQUF6QixFQUFxQ2IsTUFBckMsR0FBOEM1RCxDQUE5QztJQUNIO0VBQ0osQ0E5Q00sRUErQ1BwQixDQUFDLENBQUNXLFNBQUYsQ0FBWXFGLFNBQVosR0FBd0IsWUFBVztJQUMvQjVFLENBQUMsQ0FBQzZCLFFBQUYsQ0FBV0MsV0FBWCxHQUF5QitDLEdBQXpCLENBQTZCckUsQ0FBQyxDQUFDd0IsU0FBRixDQUFZQyxtQkFBekMsRUFBOEQsSUFBOUQsRUFBb0UsS0FBS0MsZUFBekU7RUFDSCxDQWpETSxFQWtEUHRDLENBQUMsQ0FBQyxDQUFDcUIsQ0FBQyxDQUFDSixFQUFFLENBQUNpRSxLQUFKLENBQUYsQ0FBRCxFQUFnQmxHLENBQUMsQ0FBQ1csU0FBbEIsRUFBNkIsaUJBQTdCLEVBQWdELEtBQUssQ0FBckQsQ0FsRE0sRUFtRFBLLENBQUMsQ0FBQyxDQUFDbUIsQ0FBRCxDQUFELEVBQU1uQyxDQUFOLENBbkREO0FBb0RILENBN0RHLENBNkREaUMsRUFBRSxDQUFDa0UsU0E3REYsQ0FWSjs7QUF3RUFqRyxDQUFDLFdBQUQsR0FBWXFDLENBQVoiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbInZhciB0ID0gcmVxdWlyZTtcbnZhciBlID0gbW9kdWxlO1xudmFyIG8gPSBleHBvcnRzO1xudmFyIGEsIGkgPSB0aGlzICYmIHRoaXMuX19leHRlbmRzIHx8IChhID0gZnVuY3Rpb24odCwgZSkge1xuICAgIHJldHVybiAoYSA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCB7XG4gICAgICAgIF9fcHJvdG9fXzogW11cbiAgICB9XG4gICAgaW5zdGFuY2VvZiBBcnJheSAmJlxuICAgIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdC5fX3Byb3RvX18gPSBlXG4gICAgfSB8fFxuICAgIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgZm9yICh2YXIgbyBpbiBlKSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgbykgJiYgKHRbb10gPSBlW29dKVxuICAgIH0pKHQsIGUpXG59LFxuZnVuY3Rpb24odCwgZSkge1xuICAgIGZ1bmN0aW9uIG8oKSB7XG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSB0XG4gICAgfVxuICAgIGEodCwgZSksXG4gICAgdC5wcm90b3R5cGUgPSBudWxsID09PSBlID8gT2JqZWN0LmNyZWF0ZShlKSA6IChvLnByb3RvdHlwZSA9IGUucHJvdG90eXBlLCBuZXcgbylcbn0pLFxuciA9IHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlIHx8XG5mdW5jdGlvbih0LCBlLCBvLCBhKSB7XG4gICAgdmFyIGksIHIgPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgIG4gPSByIDwgMyA/IGU6IG51bGwgPT09IGEgPyBhID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBvKSA6IGE7XG4gICAgaWYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIFJlZmxlY3QgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlKSBuID0gUmVmbGVjdC5kZWNvcmF0ZSh0LCBlLCBvLCBhKTtcbiAgICBlbHNlIGZvciAodmFyIHMgPSB0Lmxlbmd0aCAtIDE7IHMgPj0gMDsgcy0tKShpID0gdFtzXSkgJiYgKG4gPSAociA8IDMgPyBpKG4pIDogciA+IDMgPyBpKGUsIG8sIG4pIDogaShlLCBvKSkgfHwgbik7XG4gICAgcmV0dXJuIHIgPiAzICYmIG4gJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIG8sIG4pLFxuICAgIG5cbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogITBcbn0pO1xudmFyIG4gPSB0KFwiRXZlbnRNZ3JcIiksXG5zID0gdChcIlVJTWdyXCIpLFxuYyA9IHQoXCJVdGlsc1wiKSxcbmwgPSB0KFwiQ29uZmlnXCIpLFxudSA9IHQoXCJEYXRhTWdyXCIpLFxucCA9IHQoXCJFcXVpcE1nclwiKSxcbmcgPSB0KFwiUGxheWVyTWdyXCIpLFxuZCA9IGNjLl9kZWNvcmF0b3IsXG5oID0gZC5jY2NsYXNzLFxuZiA9IGQucHJvcGVydHksXG5tID0gZnVuY3Rpb24odCkge1xuICAgIGZ1bmN0aW9uIGUoKSB7XG4gICAgICAgIHZhciBlID0gbnVsbCAhPT0gdCAmJiB0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgcmV0dXJuIGUuTGFiU3RyZW5ndGhlbkx2ID0gbnVsbCxcbiAgICAgICAgZS51aVZpZXcgPSBsLlVJSUQuVUlFcXVpcCxcbiAgICAgICAgZS5jdXJCYWdJbmRleCA9IDEsXG4gICAgICAgIGUuZXF1aXBEYXRhID0gbnVsbCxcbiAgICAgICAgZVxuICAgIH1cbiAgICByZXR1cm4gaShlLCB0KSxcbiAgICBlLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKCkge30sXG4gICAgZS5wcm90b3R5cGUucmVnaXN0ZXJFdmVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBuLkV2ZW50TWdyLmdldEluc3RhbmNlKCkub24obC5FdmVudE5hbWUuUmVmcmVzaFN0cmVuZ3RoZW5MdiwgdGhpcywgdGhpcy5zdHJlbmd0aGVuRXF1aXApXG4gICAgfSxcbiAgICBlLnByb3RvdHlwZS5yZWdpc3RlckJ0bkV2ZW50ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcztcbiAgICAgICAgdGhpcy5ub2RlLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX0VORCxcbiAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZSA9IGMuVXRpbHMucG9zVHJhbnNmb3JtKHQubm9kZS5wYXJlbnQsIHQubm9kZS5nZXRQb3NpdGlvbigpLCBzLlVJTWdyLmdldEluc3RhbmNlKCkuZ2V0VUlSb290KHQudWlWaWV3KSksXG4gICAgICAgICAgICBvID0gZy5QbGF5ZXJNZ3IuZ2V0SW5zdGFuY2UoKS5nZXRBYlR5cGUoKSxcbiAgICAgICAgICAgIGEgPSBcIkRcIiA9PSBvIHx8IFwiQlwiID09IG8gPyBsLlVJSUQuVUlFcXVpcEluZm9OZXc6IGwuVUlJRC5VSUVxdWlwSW5mbztcbiAgICAgICAgICAgIHMuVUlNZ3IuZ2V0SW5zdGFuY2UoKS5vcGVuVUkoYSwgLTEsIHQuZXF1aXBEYXRhLCB0LmVxdWlwRGF0YSwgZSwgcC5FbnVtRXF1aXBJbmZvLkVudW1TdHJlbmd0aGVuLCB0LmN1ckJhZ0luZGV4KVxuICAgICAgICB9KVxuICAgIH0sXG4gICAgZS5wcm90b3R5cGUuaW5pdERhdGEgPSBmdW5jdGlvbih0LCBlLCBvKSB7XG4gICAgICAgIHRoaXMuY3VyQmFnSW5kZXggPSB0LFxuICAgICAgICB0aGlzLmVxdWlwRGF0YSA9IGUsXG4gICAgICAgIHRoaXMudWlWaWV3ID0gbyxcbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50KCksXG4gICAgICAgIHRoaXMucmVnaXN0ZXJCdG5FdmVudCgpXG4gICAgfSxcbiAgICBlLnByb3RvdHlwZS5zdHJlbmd0aGVuRXF1aXAgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuZXF1aXBEYXRhICYmICh0aGlzLnJlZnJlc2hTdHJlbmd0aGVuUmVkRG90KCksIHQgJiYgdC5pZCA9PSB0aGlzLmVxdWlwRGF0YS5pZCAmJiB0LnR5cGUgPT0gdGhpcy5lcXVpcERhdGEudHlwZSAmJiB0LklEQ2FyZCA9PSB0aGlzLmVxdWlwRGF0YS5JRENhcmQgJiYgKHRoaXMuZXF1aXBEYXRhLnN0cmVuZ3RoZW5MdiA9IHQuc3RyZW5ndGhlbkx2LCB0aGlzLnJlZnJlc2hTdHJlbmd0aGVuTHYoKSkpXG4gICAgfSxcbiAgICBlLnByb3RvdHlwZS5yZWZyZXNoU3RyZW5ndGhlbkx2ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZXF1aXBEYXRhLnN0cmVuZ3RoZW5MdiA+IDAgPyAodGhpcy5MYWJTdHJlbmd0aGVuTHYubm9kZS5hY3RpdmUgPSAhMCwgdGhpcy5MYWJTdHJlbmd0aGVuTHYuc3RyaW5nID0gXCIrXCIgKyB0aGlzLmVxdWlwRGF0YS5zdHJlbmd0aGVuTHYpIDogdGhpcy5MYWJTdHJlbmd0aGVuTHYubm9kZS5hY3RpdmUgPSAhMVxuICAgIH0sXG4gICAgZS5wcm90b3R5cGUucmVmcmVzaFN0cmVuZ3RoZW5SZWREb3QgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSAwLFxuICAgICAgICBlID0gZy5QbGF5ZXJNZ3IuZ2V0SW5zdGFuY2UoKS5nZXRBYlR5cGUoKTtcbiAgICAgICAgaWYgKFwiRFwiID09IGUgfHwgXCJCXCIgPT0gZSkge1xuICAgICAgICAgICAgdmFyIG8gPSB1LkRhdGFNZ3IuZ2V0SW5zdGFuY2UoKS5nZXRFcXVpcENmZyh0aGlzLmVxdWlwRGF0YS5pZCksXG4gICAgICAgICAgICBhID0gYy5VdGlscy5nZXRUYWJlbEFycjEoby5jb25zdW1lKSxcbiAgICAgICAgICAgIGkgPSB0aGlzLmVxdWlwRGF0YS5zdHJlbmd0aGVuTHY7XG4gICAgICAgICAgICBpIDwgby5zdHJlbmd0aGVuTWF4THYgJiYgKHQgPSBOdW1iZXIoYVtNYXRoLmZsb29yKGkgLyAxMCldWzFdKSlcbiAgICAgICAgfSBlbHNlIHQgPSB1LkRhdGFNZ3IuZ2V0SW5zdGFuY2UoKS5nZXRFcXVpcFN0cmVuZ3RoZW5DZmcodGhpcy5lcXVpcERhdGEuaWQsIHRoaXMuZXF1aXBEYXRhLnN0cmVuZ3RoZW5MdikuY29uc3VtZTtcbiAgICAgICAgdmFyIHI7XG4gICAgICAgIGlmIChyID0gZy5QbGF5ZXJNZ3IuZ2V0SW5zdGFuY2UoKS5nZVVzZXJEYXRhKCkuZ2V0R29sZE51bSgpID49IHQsIHRoaXMubm9kZS5nZXRDaGlsZEJ5TmFtZShcIlNwUmVkRG90XCIpLmFjdGl2ZSA9IHIsICFyICYmIChcIkRcIiA9PSBlIHx8IFwiQlwiID09IGUpKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBuID0gITEsXG4gICAgICAgICAgICBzID0gcC5kZWZhdWx0LmdldEluc3RhbmNlKCkuZ2V0T3dtZWRFcXVpcEZvckVxdWlwVHlwZSh0aGlzLmVxdWlwRGF0YS50eXBlKSwgbCA9IDA7IGwgPCBzLmxlbmd0aDsgbCsrKSBpZiAoc1tsXS5JRENhcmQgIT0gdGhpcy5lcXVpcERhdGEuSURDYXJkICYmIHNbbF0uaWQgPT0gdGhpcy5lcXVpcERhdGEuaWQgJiYgc1tsXS50eXBlID09IHRoaXMuZXF1aXBEYXRhLnR5cGUgJiYgc1tsXS5zdGFyTGV2ZWwgPT0gdGhpcy5lcXVpcERhdGEuc3RhckxldmVsKSB7XG4gICAgICAgICAgICAgICAgbiA9ICEwO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm5vZGUuZ2V0Q2hpbGRCeU5hbWUoXCJTcFJlZERvdFwiKS5hY3RpdmUgPSBuXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGUucHJvdG90eXBlLm9uRGVzdHJveSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBuLkV2ZW50TWdyLmdldEluc3RhbmNlKCkub2ZmKGwuRXZlbnROYW1lLlJlZnJlc2hTdHJlbmd0aGVuTHYsIHRoaXMsIHRoaXMuc3RyZW5ndGhlbkVxdWlwKVxuICAgIH0sXG4gICAgcihbZihjYy5MYWJlbCldLCBlLnByb3RvdHlwZSwgXCJMYWJTdHJlbmd0aGVuTHZcIiwgdm9pZCAwKSxcbiAgICByKFtoXSwgZSlcbn0gKGNjLkNvbXBvbmVudCk7XG5vLmRlZmF1bHQgPSBtIl19