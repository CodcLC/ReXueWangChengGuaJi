
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/TranstaLabel.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '67db1C8o05AUKGTeZFpIrDv', 'TranstaLabel');
// scripts/TranstaLabel.js

"use strict";

var t = require;
var e = module;
var o = exports;

var _a,
    i = void 0 && (void 0).__extends || (_a = function a(t, e) {
  return (_a = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (t, e) {
    t.__proto__ = e;
  } || function (t, e) {
    for (var o in e) {
      Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
    }
  })(t, e);
}, function (t, e) {
  function o() {
    this.constructor = t;
  }

  _a(t, e), t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o());
}),
    r = void 0 && (void 0).__decorate || function (t, e, o, a) {
  var i,
      r = arguments.length,
      n = r < 3 ? e : null === a ? a = Object.getOwnPropertyDescriptor(e, o) : a;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) n = Reflect.decorate(t, e, o, a);else for (var s = t.length - 1; s >= 0; s--) {
    (i = t[s]) && (n = (r < 3 ? i(n) : r > 3 ? i(e, o, n) : i(e, o)) || n);
  }
  return r > 3 && n && Object.defineProperty(e, o, n), n;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});
var n = t("LanguageMgr"),
    s = cc._decorator,
    c = s.ccclass,
    l = (s.property, function (t) {
  function e() {
    return null !== t && t.apply(this, arguments) || this;
  }

  return i(e, t), e.prototype.onLoad = function () {
    var t = this.node.getComponent(cc.Label);
    if (t) t.string = n.LanguageMgr.getInstance().T(t.string);else {
      var e = this.node.getComponent(cc.RichText);
      e && (e.string = n.LanguageMgr.getInstance().T(e.string));
    }
  }, e.prototype.refresh = function () {
    var t = this.node.getComponent(cc.Label);
    if (t) t.string = n.LanguageMgr.getInstance().T(t.string);else {
      var e = this.node.getComponent(cc.RichText);
      e && (e.string = n.LanguageMgr.getInstance().T(e.string));
    }
  }, r([c], e);
}(cc.Component));
o["default"] = l;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcVHJhbnN0YUxhYmVsLmpzIl0sIm5hbWVzIjpbInQiLCJyZXF1aXJlIiwiZSIsIm1vZHVsZSIsIm8iLCJleHBvcnRzIiwiYSIsImkiLCJfX2V4dGVuZHMiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiY29uc3RydWN0b3IiLCJjcmVhdGUiLCJyIiwiX19kZWNvcmF0ZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsIm4iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJSZWZsZWN0IiwiZGVjb3JhdGUiLCJzIiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImNjIiwiX2RlY29yYXRvciIsImMiLCJjY2NsYXNzIiwibCIsInByb3BlcnR5IiwiYXBwbHkiLCJvbkxvYWQiLCJub2RlIiwiZ2V0Q29tcG9uZW50IiwiTGFiZWwiLCJzdHJpbmciLCJMYW5ndWFnZU1nciIsImdldEluc3RhbmNlIiwiVCIsIlJpY2hUZXh0IiwicmVmcmVzaCIsIkNvbXBvbmVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxDQUFDLEdBQUdDLE9BQVI7QUFDQSxJQUFJQyxDQUFDLEdBQUdDLE1BQVI7QUFDQSxJQUFJQyxDQUFDLEdBQUdDLE9BQVI7O0FBQ0EsSUFBSUMsRUFBSjtBQUFBLElBQU9DLENBQUMsR0FBRyxVQUFRLFNBQUtDLFNBQWIsS0FBMkJGLEVBQUMsR0FBRyxXQUFTTixDQUFULEVBQVlFLENBQVosRUFBZTtFQUNyRCxPQUFPLENBQUNJLEVBQUMsR0FBR0csTUFBTSxDQUFDQyxjQUFQLElBQXlCO0lBQ2pDQyxTQUFTLEVBQUU7RUFEc0IsYUFHMUJDLEtBSDBCLElBSXJDLFVBQVNaLENBQVQsRUFBWUUsQ0FBWixFQUFlO0lBQ1hGLENBQUMsQ0FBQ1csU0FBRixHQUFjVCxDQUFkO0VBQ0gsQ0FOVyxJQU9aLFVB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LEdBQVdsQixDQUFDLENBQUNtQixXQUFGLENBQWNDLFdBQWQsR0FBNEJDLENBQTVCLENBQThCekMsQ0FBQyxDQUFDc0MsTUFBaEMsQ0FBaEIsQ0FBRDtJQUNIO0VBQ0osQ0FoQk0sRUFpQlB0QixDQUFDLENBQUMsQ0FBQ2EsQ0FBRCxDQUFELEVBQU03QixDQUFOLENBakJEO0FBa0JILENBdEJELENBc0JHMkIsRUFBRSxDQUFDaUIsU0F0Qk4sQ0FEQyxDQUhEO0FBMkJBMUMsQ0FBQyxXQUFELEdBQVk2QixDQUFaIiwic291cmNlUm9vdCI6Ii8iLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdCA9IHJlcXVpcmU7XG52YXIgZSA9IG1vZHVsZTtcbnZhciBvID0gZXhwb3J0cztcbnZhciBhLCBpID0gdGhpcyAmJiB0aGlzLl9fZXh0ZW5kcyB8fCAoYSA9IGZ1bmN0aW9uKHQsIGUpIHtcbiAgICByZXR1cm4gKGEgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwge1xuICAgICAgICBfX3Byb3RvX186IFtdXG4gICAgfVxuICAgIGluc3RhbmNlb2YgQXJyYXkgJiZcbiAgICBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIHQuX19wcm90b19fID0gZVxuICAgIH0gfHxcbiAgICBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGZvciAodmFyIG8gaW4gZSkgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGUsIG8pICYmICh0W29dID0gZVtvXSlcbiAgICB9KSh0LCBlKVxufSxcbmZ1bmN0aW9uKHQsIGUpIHtcbiAgICBmdW5jdGlvbiBvKCkge1xuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yID0gdFxuICAgIH1cbiAgICBhKHQsIGUpLFxuICAgIHQucHJvdG90eXBlID0gbnVsbCA9PT0gZSA/IE9iamVjdC5jcmVhdGUoZSkgOiAoby5wcm90b3R5cGUgPSBlLnByb3RvdHlwZSwgbmV3IG8pXG59KSxcbnIgPSB0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSB8fFxuZnVuY3Rpb24odCwgZSwgbywgYSkge1xuICAgIHZhciBpLCByID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICBuID0gciA8IDMgPyBlOiBudWxsID09PSBhID8gYSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgbykgOiBhO1xuICAgIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBSZWZsZWN0ICYmIFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSkgbiA9IFJlZmxlY3QuZGVjb3JhdGUodCwgZSwgbywgYSk7XG4gICAgZWxzZSBmb3IgKHZhciBzID0gdC5sZW5ndGggLSAxOyBzID49IDA7IHMtLSkoaSA9IHRbc10pICYmIChuID0gKHIgPCAzID8gaShuKSA6IHIgPiAzID8gaShlLCBvLCBuKSA6IGkoZSwgbykpIHx8IG4pO1xuICAgIHJldHVybiByID4gMyAmJiBuICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCBvLCBuKSxcbiAgICBuXG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6ICEwXG59KTtcbnZhciBuID0gdChcIkxhbmd1YWdlTWdyXCIpLFxucyA9IGNjLl9kZWNvcmF0b3IsXG5jID0gcy5jY2NsYXNzLFxubCA9IChzLnByb3BlcnR5LFxuZnVuY3Rpb24odCkge1xuICAgIGZ1bmN0aW9uIGUoKSB7XG4gICAgICAgIHJldHVybiBudWxsICE9PSB0ICYmIHQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzXG4gICAgfVxuICAgIHJldHVybiBpKGUsIHQpLFxuICAgIGUucHJvdG90eXBlLm9uTG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoY2MuTGFiZWwpO1xuICAgICAgICBpZiAodCkgdC5zdHJpbmcgPSBuLkxhbmd1YWdlTWdyLmdldEluc3RhbmNlKCkuVCh0LnN0cmluZyk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGUgPSB0aGlzLm5vZGUuZ2V0Q29tcG9uZW50KGNjLlJpY2hUZXh0KTtcbiAgICAgICAgICAgIGUgJiYgKGUuc3RyaW5nID0gbi5MYW5ndWFnZU1nci5nZXRJbnN0YW5jZSgpLlQoZS5zdHJpbmcpKVxuICAgICAgICB9XG4gICAgfSxcbiAgICBlLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5ub2RlLmdldENvbXBvbmVudChjYy5MYWJlbCk7XG4gICAgICAgIGlmICh0KSB0LnN0cmluZyA9IG4uTGFuZ3VhZ2VNZ3IuZ2V0SW5zdGFuY2UoKS5UKHQuc3RyaW5nKTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgZSA9IHRoaXMubm9kZS5nZXRDb21wb25lbnQoY2MuUmljaFRleHQpO1xuICAgICAgICAgICAgZSAmJiAoZS5zdHJpbmcgPSBuLkxhbmd1YWdlTWdyLmdldEluc3RhbmNlKCkuVChlLnN0cmluZykpXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHIoW2NdLCBlKVxufSAoY2MuQ29tcG9uZW50KSk7XG5vLmRlZmF1bHQgPSBsIl19