
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/FetterMgr.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '49291DkcltDP41zD39UipO7', 'FetterMgr');
// scripts/FetterMgr.js

"use strict";

var t = require;
var e = module;
var o = exports;
Object.defineProperty(o, "__esModule", {
  value: !0
});

var a = t("Utils"),
    i = t("DataMgr"),
    r = t("RoleMgr"),
    n = function () {
  function t() {
    this.addSkillAndHurtProp = 0, this.recoverHp_levelEnd_base = 0, this.recoverHp_levelEnd_add = 0, this.atkCount_base = 0, this.atkCount = 0, this.recoverHp_atkEnd_base = 0, this.alwaysAtkHurt_base = 0, this.alwaysAtkHurt = 0, this.firstAtkToCrazyProp_base = 0;
  }

  return t.getInstance = function () {
    return null == this.instance && (this.instance = new t()), this.instance;
  }, t.prototype.WarriorFetter = function () {}, t.prototype.MasterFetter = function (t) {
    this.addSkillAndHurtProp = this.getSuitPropValue(2, t);
  }, t.prototype.isHaveMasterFetter = function () {
    return !!r["default"].getInstance().isExistFetterForFetterId(2);
  }, t.prototype.getAddSkillAndHurtProp = function () {
    return this.addSkillAndHurtProp;
  }, t.prototype.TaoistFetter = function () {}, t.prototype.IntensifyFetter = function () {}, t.prototype.SpeedFetter = function () {}, t.prototype.WishFetter = function (t) {
    this.recoverHp_levelEnd_base = this.getSuitPropValue(6, t);
  }, t.prototype.isHaveWishFetter = function () {
    return !!r["default"].getInstance().isExistFetterForFetterId(6);
  }, t.prototype.addRecoverHp_levelEnd_add = function () {
    this.recoverHp_levelEnd_add += this.recoverHp_levelEnd_base;
  }, t.prototype.getRecoverHp_levelEnd_add = function () {
    return this.recoverHp_levelEnd_add;
  }, t.prototype.ShieldFetter = function () {}, t.prototype.RuinFetter = function (t) {
    this.atkCount_base = this.getSuitPropValue(8, t);
  }, t.prototype.isHaveRuinFetter = function () {
    return !!r["default"].getInstance().isExistFetterForFetterId(8);
  }, t.prototype.isAccomplishRuin = function () {
    return this.atkCount >= this.atkCount_base ? (this.atkCount = 0, !0) : (this.atkCount++, !1);
  }, t.prototype.getDamageValueRuin = function (t) {
    return Math.ceil(2.5 * t);
  }, t.prototype.MagicArtsFetter = function () {}, t.prototype.SummonFetter = function () {}, t.prototype.SpecialFetter = function (t) {
    this.recoverHp_atkEnd_base = this.getSuitPropValue(11, t);
  }, t.prototype.isHaveSpecialFetter = function () {
    return !!r["default"].getInstance().isExistFetterForFetterId(11);
  }, t.prototype.getRecoverHp_atkEnd_base = function () {
    return this.recoverHp_atkEnd_base;
  }, t.prototype.CurseFetter = function (t) {
    this.alwaysAtkHurt_base = this.getSuitPropValue(12, t);
  }, t.prototype.isHaveCurseFetter = function () {
    return !!r["default"].getInstance().isExistFetterForFetterId(12);
  }, t.prototype.getDamageForCurse = function () {
    var t = r["default"].getInstance().getPlayerPro();
    return [t.attack_min * this.alwaysAtkHurt / 100, t.attack_min * this.alwaysAtkHurt / 100];
  }, t.prototype.addDamageForCurse = function () {
    this.alwaysAtkHurt += this.alwaysAtkHurt_base;
  }, t.prototype.ThreatenFetter = function (t) {
    this.firstAtkToCrazyProp_base = this.getSuitPropValue(13, t);
  }, t.prototype.isHaveThreatenFetter = function () {
    return !!r["default"].getInstance().isExistFetterForFetterId(13);
  }, t.prototype.getFirstAtkToCrazyProp_base = function () {
    return this.firstAtkToCrazyProp_base;
  }, t.prototype.getSuitPropValue = function (t, e) {
    e || (e = 1);
    var o = i.DataMgr.getInstance().getFetter(t),
        r = a.Utils.getTabelArr(o.fetterFun),
        n = Number(r[e - 1]);
    return n || (n = 0), n;
  }, t.prototype.resetFetterValue = function () {
    this.recoverHp_levelEnd_base = 0, this.atkCount_base = 0, this.atkCount = 0, this.recoverHp_atkEnd_base = 0, this.alwaysAtkHurt_base = 0, this.alwaysAtkHurt = 0, this.firstAtkToCrazyProp_base = 0;
  }, t;
}();

o["default"] = n;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcRmV0dGVyTWdyLmpzIl0sIm5hbWVzIjpbInQiLCJyZXF1aXJlIiwiZSIsIm1vZHVsZSIsIm8iLCJleHBvcnRzIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJ2YWx1ZSIsImEiLCJpIiwiciIsIm4iLCJhZGRTa2lsbEFuZEh1cnRQcm9wIiwicmVjb3ZlckhwX2xldmVsRW5kX2Jhc2UiLCJyZWNvdmVySHBfbGV2ZWxFbmRfYWRkIiwiYXRrQ291bnRfYmFzZSIsImF0a0NvdW50IiwicmVjb3ZlckhwX2F0a0VuZF9iYXNlIiwiYWx3YXlzQXRrSHVydF9iYXNlIiwiYWx3YXlzQXRrSHVydCIsImZpcnN0QXRrVG9DcmF6eVByb3BfYmFzZSIsImdldEluc3RhbmNlIiwiaW5zdGFuY2UiLCJwcm90b3R5cGUiLCJXYXJyaW9yRmV0dGVyIiwiTWFzdGVyRmV0dGVyIiwiZ2V0U3VpdFByb3BWYWx1ZSIsImlzSGF2ZU1hc3RlckZldHRlciIsImlzRXhpc3RGZXR0ZXJGb3JGZXR0ZXJJZCIsImdldEFkZFNraWxsQW5kSHVydFByb3AiLCJUYW9pc3RGZXR0ZXIiLCJJbnRlbnNpZnlGZXR0ZXIiLCJTcGVlZEZldHRlciIsIldpc2hGZXR0ZXIiLCJpc0hhdmVXaXNoRmV0dGVyIiwiYWRkUmVjb3ZlckhwX2xldmVsRW5kX2FkZCIsImdldFJlY292ZXJIcF9sZXZlbEVuZF9hZGQiLCJTaGllbGRGZXR0ZXIiLCJSdWluRmV0dGVyIiwiaXNIYXZlUnVpbkZldHRlciIsImlzQWNjb21wbGlzaFJ1aW4iLCJnZXREYW1hZ2VWYWx1ZVJ1aW4iLCJNYXRoIiwiY2VpbCIsIk1hZ2ljQXJ0c0ZldHRlciIsIlN1bW1vbkZldHRlciIsIlNwZWNpYWxGZXR0ZXIiLCJpc0hhdmVTcGVjaWFsRmV0dGVyIiwiZ2V0UmVjb3ZlckhwX2F0a0VuZF9iYXNlIiwiQ3Vyc2VGZXR0ZXIiLCJpc0hhdmVDdXJzZUZldHRlciIsImdldERhbWFnZUZvckN1cnNlIiwiZ2V0UGxheWVyUHJvIiwiYXR0YWNrX21pbiIsImFkZERhbWFnZUZvckN1cnNlIiwiVGhyZWF0ZW5GZXR0ZXIiLCJpc0hhdmVUaHJlYXRlbkZldHRlciIsImdldEZpcnN0QXRrVG9DcmF6eVByb3BfYmFzZSIsIkRhdGFNZ3IiLCJnZXRGZXR0ZXIiLCJVdGlscyIsImdldFRhYmVsQXJyIiwiZmV0dGVyRnVuIiwiTnVtYmVyIiwicmVzZXRGZXR0ZXJWYWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxJQUFJQSxDQUFDLEdBQUdDLE9BQVI7QUFDQSxJQUFJQyxDQUFDLEdBQUdDLE1BQVI7QUFDQSxJQUFJQyxDQUFDLEdBQUdDLE9BQVI7QUFDQUMsTUFBTSxDQUFDQyxjQUFQLENBQXNCSCxDQUF0QixFQUF5QixZQUF6QixFQUF1QztFQUNuQ0ksS0FBSyxFQUFFLENBQUM7QUFEMkIsQ0FBdkM7O0FBR0EsSUFBSUMsQ0FBQyxHQUFHVCxDQUFDLENBQUMsT0FBRCxDQUFUO0FBQUEsSUFDQVUsQ0FBQyxHQUFHVixDQUFDLENBQUMsU0FBRCxDQURMO0FBQUEsSUFFQVcsQ0FBQyxHQUFHWCxDQUFDLENBQUMsU0FBRCxDQUZMO0FBQUEsSUFHQVksQ0FBQyxHQUFHLFlBQVc7RUFDWCxTQUFTWixDQUFULEdBQWE7SUFDVCxLQUFLYSxtQkFBTCxHQUEyQixDQUEzQixFQUNBLEtBQUtDLHVCQUFMLEdBQStCLENBRC9CLEVBRUEsS0FBS0Msc0JBQUwsR0FBOEIsQ0FGOUIsRUFHQSxLQUFLQyxhQUFMLEdBQXFCLENBSHJCLEVBSUEsS0FBS0MsUUFBTCxHQUFnQixDQUpoQixFQUtBLEtBQUtDLHFCQUFMLEdBQTZCLENBTDdCLEVBTUEsS0FBS0Msa0JBQUwsR0FBMEIsQ0FOMUIsRUFPQSxLQUFLQyxhQUFMLEdBQXFCLENBUHJCLEVBUUEsS0FBS0Msd0JBQUwsR0FBZ0MsQ0FSaEM7RUFTSDs7RUFDRCxPQUFPckIsQ0FBQyxDQUFDc0IsV0FBRixHQUFnQixZQUFXO0lBQzlCLE9BQU8sUUFBUSxLQUFLQyxRQUFiLEtB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RlBaLENBQUMsQ0FBQ3dCLFNBQUYsQ0FBWXlDLGdCQUFaLEdBQStCLFlBQVc7SUFDdEMsS0FBS25ELHVCQUFMLEdBQStCLENBQS9CLEVBQ0EsS0FBS0UsYUFBTCxHQUFxQixDQURyQixFQUVBLEtBQUtDLFFBQUwsR0FBZ0IsQ0FGaEIsRUFHQSxLQUFLQyxxQkFBTCxHQUE2QixDQUg3QixFQUlBLEtBQUtDLGtCQUFMLEdBQTBCLENBSjFCLEVBS0EsS0FBS0MsYUFBTCxHQUFxQixDQUxyQixFQU1BLEtBQUtDLHdCQUFMLEdBQWdDLENBTmhDO0VBT0gsQ0EzRk0sRUE0RlByQixDQTVGQTtBQTZGSCxDQXpHRyxFQUhKOztBQTZHQUksQ0FBQyxXQUFELEdBQVlRLENBQVoiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbInZhciB0ID0gcmVxdWlyZTtcbnZhciBlID0gbW9kdWxlO1xudmFyIG8gPSBleHBvcnRzO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6ICEwXG59KTtcbnZhciBhID0gdChcIlV0aWxzXCIpLFxuaSA9IHQoXCJEYXRhTWdyXCIpLFxuciA9IHQoXCJSb2xlTWdyXCIpLFxubiA9IGZ1bmN0aW9uKCkge1xuICAgIGZ1bmN0aW9uIHQoKSB7XG4gICAgICAgIHRoaXMuYWRkU2tpbGxBbmRIdXJ0UHJvcCA9IDAsXG4gICAgICAgIHRoaXMucmVjb3ZlckhwX2xldmVsRW5kX2Jhc2UgPSAwLFxuICAgICAgICB0aGlzLnJlY292ZXJIcF9sZXZlbEVuZF9hZGQgPSAwLFxuICAgICAgICB0aGlzLmF0a0NvdW50X2Jhc2UgPSAwLFxuICAgICAgICB0aGlzLmF0a0NvdW50ID0gMCxcbiAgICAgICAgdGhpcy5yZWNvdmVySHBfYXRrRW5kX2Jhc2UgPSAwLFxuICAgICAgICB0aGlzLmFsd2F5c0F0a0h1cnRfYmFzZSA9IDAsXG4gICAgICAgIHRoaXMuYWx3YXlzQXRrSHVydCA9IDAsXG4gICAgICAgIHRoaXMuZmlyc3RBdGtUb0NyYXp5UHJvcF9iYXNlID0gMFxuICAgIH1cbiAgICByZXR1cm4gdC5nZXRJbnN0YW5jZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbnVsbCA9PSB0aGlzLmluc3RhbmNlICYmICh0aGlzLmluc3RhbmNlID0gbmV3IHQpLFxuICAgICAgICB0aGlzLmluc3RhbmNlXG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5XYXJyaW9yRmV0dGVyID0gZnVuY3Rpb24oKSB7fSxcbiAgICB0LnByb3RvdHlwZS5NYXN0ZXJGZXR0ZXIgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuYWRkU2tpbGxBbmRIdXJ0UHJvcCA9IHRoaXMuZ2V0U3VpdFByb3BWYWx1ZSgyLCB0KVxuICAgIH0sXG4gICAgdC5wcm90b3R5cGUuaXNIYXZlTWFzdGVyRmV0dGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAhISByLmRlZmF1bHQuZ2V0SW5zdGFuY2UoKS5pc0V4aXN0RmV0dGVyRm9yRmV0dGVySWQoMilcbiAgICB9LFxuICAgIHQucHJvdG90eXBlLmdldEFkZFNraWxsQW5kSHVydFByb3AgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkU2tpbGxBbmRIdXJ0UHJvcFxuICAgIH0sXG4gICAgdC5wcm90b3R5cGUuVGFvaXN0RmV0dGVyID0gZnVuY3Rpb24oKSB7fSxcbiAgICB0LnByb3RvdHlwZS5JbnRlbnNpZnlGZXR0ZXIgPSBmdW5jdGlvbigpIHt9LFxuICAgIHQucHJvdG90eXBlLlNwZWVkRmV0dGVyID0gZnVuY3Rpb24oKSB7fSxcbiAgICB0LnByb3RvdHlwZS5XaXNoRmV0dGVyID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLnJlY292ZXJIcF9sZXZlbEVuZF9iYXNlID0gdGhpcy5nZXRTdWl0UHJvcFZhbHVlKDYsIHQpXG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5pc0hhdmVXaXNoRmV0dGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAhISByLmRlZmF1bHQuZ2V0SW5zdGFuY2UoKS5pc0V4aXN0RmV0dGVyRm9yRmV0dGVySWQoNilcbiAgICB9LFxuICAgIHQucHJvdG90eXBlLmFkZFJlY292ZXJIcF9sZXZlbEVuZF9hZGQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5yZWNvdmVySHBfbGV2ZWxFbmRfYWRkICs9IHRoaXMucmVjb3ZlckhwX2xldmVsRW5kX2Jhc2VcbiAgICB9LFxuICAgIHQucHJvdG90eXBlLmdldFJlY292ZXJIcF9sZXZlbEVuZF9hZGQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVjb3ZlckhwX2xldmVsRW5kX2FkZFxuICAgIH0sXG4gICAgdC5wcm90b3R5cGUuU2hpZWxkRmV0dGVyID0gZnVuY3Rpb24oKSB7fSxcbiAgICB0LnByb3RvdHlwZS5SdWluRmV0dGVyID0gZnVuY3Rpb24odCkge1xuICAgICAgICB0aGlzLmF0a0NvdW50X2Jhc2UgPSB0aGlzLmdldFN1aXRQcm9wVmFsdWUoOCwgdClcbiAgICB9LFxuICAgIHQucHJvdG90eXBlLmlzSGF2ZVJ1aW5GZXR0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICEhIHIuZGVmYXVsdC5nZXRJbnN0YW5jZSgpLmlzRXhpc3RGZXR0ZXJGb3JGZXR0ZXJJZCg4KVxuICAgIH0sXG4gICAgdC5wcm90b3R5cGUuaXNBY2NvbXBsaXNoUnVpbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdGtDb3VudCA+PSB0aGlzLmF0a0NvdW50X2Jhc2UgPyAodGhpcy5hdGtDb3VudCA9IDAsICEwKSA6ICh0aGlzLmF0a0NvdW50KyssICExKVxuICAgIH0sXG4gICAgdC5wcm90b3R5cGUuZ2V0RGFtYWdlVmFsdWVSdWluID0gZnVuY3Rpb24odCkge1xuICAgICAgICByZXR1cm4gTWF0aC5jZWlsKDIuNSAqIHQpXG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5NYWdpY0FydHNGZXR0ZXIgPSBmdW5jdGlvbigpIHt9LFxuICAgIHQucHJvdG90eXBlLlN1bW1vbkZldHRlciA9IGZ1bmN0aW9uKCkge30sXG4gICAgdC5wcm90b3R5cGUuU3BlY2lhbEZldHRlciA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5yZWNvdmVySHBfYXRrRW5kX2Jhc2UgPSB0aGlzLmdldFN1aXRQcm9wVmFsdWUoMTEsIHQpXG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5pc0hhdmVTcGVjaWFsRmV0dGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAhISByLmRlZmF1bHQuZ2V0SW5zdGFuY2UoKS5pc0V4aXN0RmV0dGVyRm9yRmV0dGVySWQoMTEpXG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5nZXRSZWNvdmVySHBfYXRrRW5kX2Jhc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVjb3ZlckhwX2F0a0VuZF9iYXNlXG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5DdXJzZUZldHRlciA9IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgdGhpcy5hbHdheXNBdGtIdXJ0X2Jhc2UgPSB0aGlzLmdldFN1aXRQcm9wVmFsdWUoMTIsIHQpXG4gICAgfSxcbiAgICB0LnByb3RvdHlwZS5pc0hhdmVDdXJzZUZldHRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gISEgci5kZWZhdWx0LmdldEluc3RhbmNlKCkuaXNFeGlzdEZldHRlckZvckZldHRlcklkKDEyKVxuICAgIH0sXG4gICAgdC5wcm90b3R5cGUuZ2V0RGFtYWdlRm9yQ3Vyc2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSByLmRlZmF1bHQuZ2V0SW5zdGFuY2UoKS5nZXRQbGF5ZXJQcm8oKTtcbiAgICAgICAgcmV0dXJuIFt0LmF0dGFja19taW4gKiB0aGlzLmFsd2F5c0F0a0h1cnQgLyAxMDAsIHQuYXR0YWNrX21pbiAqIHRoaXMuYWx3YXlzQXRrSHVydCAvIDEwMF1cbiAgICB9LFxuICAgIHQucHJvdG90eXBlLmFkZERhbWFnZUZvckN1cnNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuYWx3YXlzQXRrSHVydCArPSB0aGlzLmFsd2F5c0F0a0h1cnRfYmFzZVxuICAgIH0sXG4gICAgdC5wcm90b3R5cGUuVGhyZWF0ZW5GZXR0ZXIgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuZmlyc3RBdGtUb0NyYXp5UHJvcF9iYXNlID0gdGhpcy5nZXRTdWl0UHJvcFZhbHVlKDEzLCB0KVxuICAgIH0sXG4gICAgdC5wcm90b3R5cGUuaXNIYXZlVGhyZWF0ZW5GZXR0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuICEhIHIuZGVmYXVsdC5nZXRJbnN0YW5jZSgpLmlzRXhpc3RGZXR0ZXJGb3JGZXR0ZXJJZCgxMylcbiAgICB9LFxuICAgIHQucHJvdG90eXBlLmdldEZpcnN0QXRrVG9DcmF6eVByb3BfYmFzZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5maXJzdEF0a1RvQ3JhenlQcm9wX2Jhc2VcbiAgICB9LFxuICAgIHQucHJvdG90eXBlLmdldFN1aXRQcm9wVmFsdWUgPSBmdW5jdGlvbih0LCBlKSB7XG4gICAgICAgIGUgfHwgKGUgPSAxKTtcbiAgICAgICAgdmFyIG8gPSBpLkRhdGFNZ3IuZ2V0SW5zdGFuY2UoKS5nZXRGZXR0ZXIodCksXG4gICAgICAgIHIgPSBhLlV0aWxzLmdldFRhYmVsQXJyKG8uZmV0dGVyRnVuKSxcbiAgICAgICAgbiA9IE51bWJlcihyW2UgLSAxXSk7XG4gICAgICAgIHJldHVybiBuIHx8IChuID0gMCksXG4gICAgICAgIG5cbiAgICB9LFxuICAgIHQucHJvdG90eXBlLnJlc2V0RmV0dGVyVmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5yZWNvdmVySHBfbGV2ZWxFbmRfYmFzZSA9IDAsXG4gICAgICAgIHRoaXMuYXRrQ291bnRfYmFzZSA9IDAsXG4gICAgICAgIHRoaXMuYXRrQ291bnQgPSAwLFxuICAgICAgICB0aGlzLnJlY292ZXJIcF9hdGtFbmRfYmFzZSA9IDAsXG4gICAgICAgIHRoaXMuYWx3YXlzQXRrSHVydF9iYXNlID0gMCxcbiAgICAgICAgdGhpcy5hbHdheXNBdGtIdXJ0ID0gMCxcbiAgICAgICAgdGhpcy5maXJzdEF0a1RvQ3JhenlQcm9wX2Jhc2UgPSAwXG4gICAgfSxcbiAgICB0XG59ICgpO1xuby5kZWZhdWx0ID0gbiJdfQ==