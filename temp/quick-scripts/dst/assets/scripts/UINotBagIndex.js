
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/scripts/UINotBagIndex.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, '102dbEQAipHQLPTvMy7NE96', 'UINotBagIndex');
// scripts/UINotBagIndex.js

"use strict";

var t = require;
var e = module;
var o = exports;

var _a,
    i = void 0 && (void 0).__extends || (_a = function a(t, e) {
  return (_a = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (t, e) {
    t.__proto__ = e;
  } || function (t, e) {
    for (var o in e) {
      Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
    }
  })(t, e);
}, function (t, e) {
  function o() {
    this.constructor = t;
  }

  _a(t, e), t.prototype = null === e ? Object.create(e) : (o.prototype = e.prototype, new o());
}),
    r = void 0 && (void 0).__decorate || function (t, e, o, a) {
  var i,
      r = arguments.length,
      n = r < 3 ? e : null === a ? a = Object.getOwnPropertyDescriptor(e, o) : a;
  if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) n = Reflect.decorate(t, e, o, a);else for (var s = t.length - 1; s >= 0; s--) {
    (i = t[s]) && (n = (r < 3 ? i(n) : r > 3 ? i(e, o, n) : i(e, o)) || n);
  }
  return r > 3 && n && Object.defineProperty(e, o, n), n;
};

Object.defineProperty(o, "__esModule", {
  value: !0
});

var n = t("BaseUI"),
    s = t("SdkMgr"),
    c = t("UIMgr"),
    l = t("TimeUtils"),
    u = t("Config"),
    p = t("TrackDataEvent"),
    g = t("EquipMgr"),
    d = t("GoodsManager"),
    h = t("PlayerMgr"),
    f = cc._decorator,
    m = f.ccclass,
    y = f.property,
    v = function (t) {
  function e() {
    var e = null !== t && t.apply(this, arguments) || this;
    return e.LabDec = null, e.BtnSellEquip = null, e.BtnAddBagIndex = null, e.curTurnView = u.UIID.UIHome, e;
  }

  return i(e, t), e.prototype.init = function (t) {
    this.curTurnView = t || u.UIID.UIHome;
  }, e.prototype.onLoad = function () {}, e.prototype.start = function () {
    this.registerBtnEvent(), this.initView();
  }, e.prototype.registerBtnEvent = function () {
    var t = this;
    this.BtnSellEquip.on(cc.Node.EventType.TOUCH_END, function () {
      t.closeView(), c.UIMgr.getInstance().openUI(u.UIID.UISellView, -1, t.curTurnView);
    }), this.BtnAddBagIndex.on(cc.Node.EventType.TOUCH_END, function () {
      var e = l.TimeUtils.GetTimeBySecond(),
          o = l.TimeUtils.GetTimeByHours2();
      s.SdkMgr.getInstance().playVideo(1, function () {
        var a = l.TimeUtils.GetTimeBySecond(),
            i = l.TimeUtils.GetTimeByHours2();
        h.PlayerMgr.getInstance().getTrackData().testTrackTime("equipvacancy", o, i, e, a), h.PlayerMgr.getInstance().getTrackData().youmengTrack(p.TrackId.equipvacancy), h.PlayerMgr.getInstance().getTrackData().youmengTrackNew("equipvacancy_b"), h.PlayerMgr.getInstance().geUserData().addbagIndexCount(), t.initBtn(), t.curTurnView == u.UIID.UIEquip && t.sendEvent(u.EventName.RefreshBagIndexCount), d["default"].getInstance().isOverEquipBagForIndex() ? t.initDec() : t.closeView();
      });
    });
  }, e.prototype.initView = function () {
    this.initDec(), this.initBtn();
  }, e.prototype.initBtn = function () {
    h.PlayerMgr.getInstance().geUserData().getBagIndexCount() >= 144 && (this.BtnAddBagIndex.active = !1);
  }, e.prototype.initDec = function () {
    var t = h.PlayerMgr.getInstance().geUserData().getBagIndexCount(),
        e = g["default"].getInstance().getOwnedEquipCount();
    this.LabDec.string = "装备仓库已满，部分装备<color = #ff0000 >（" + (e - t) + "）</c>未能获得，建议出售无用的装备或者扩充仓库槽位！";
  }, e.prototype.closeView = function () {
    this.closeUI();
  }, r([y(cc.RichText)], e.prototype, "LabDec", void 0), r([y(cc.Node)], e.prototype, "BtnSellEquip", void 0), r([y(cc.Node)], e.prototype, "BtnAddBagIndex", void 0), r([m], e);
}(n["default"]);

o["default"] = v;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcc2NyaXB0c1xcVUlOb3RCYWdJbmRleC5qcyJdLCJuYW1lcyI6WyJ0IiwicmVxdWlyZSIsImUiLCJtb2R1bGUiLCJvIiwiZXhwb3J0cyIsImEiLCJpIiwiX19leHRlbmRzIiwiT2JqZWN0Iiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiciIsIl9fZGVjb3JhdGUiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJuIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUmVmbGVjdCIsImRlY29yYXRlIiwicyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJjIiwibCIsInUiLCJwIiwiZyIsImQiLCJoIiwiZiIsImNjIiwiX2RlY29yYXRvciIsIm0iLCJjY2NsYXNzIiwieSIsInByb3BlcnR5IiwidiIsImFwcGx5IiwiTGFiRGVjIiwiQnRuU2VsbEVxdWlwIiwiQnRuQWRkQmFnSW5kZXgiLCJjdXJUdXJuVmlldyIsIlVJSUQiLCJVSUhvbWUiLCJpbml0Iiwib25Mb2FkIiwic3RhcnQiLCJyZWdpc3RlckJ0bkV2ZW50IiwiaW5pdFZpZXciLCJvbiIsIk5vZGUiLCJFdmVudFR5cGUiLCJUT1VDSF9FTkQiLCJjbG9zZVZpZXciLCJVSU1nciIsImdldEluc3RhbmNlIiwib3BlblVJIiwiVUlTZWxsVmlldyIsIlRpbWVVdGlscyIsIkdldFRpbWVCeVNlY29uZCIsIkdldFRpbWVCeUhvdXJzMiIsIlNka01nciIsInBsYXlWaWRlbyIsIlBsYXllck1nciIsImdldFRyYWNrRGF0YSIsInRlc3RUcmFja1RpbWUiLCJ5b3VtZW5nVHJhY2siLCJUcmFja0lkIiwiZXF1aXB2YWNhbmN5IiwieW91bWVuZ1RyYWNrTmV3IiwiZ2VVc2VyRGF0YSIsImFkZGJhZ0luZGV4Q291bnQiLCJpbml0QnRuIiwiVUlFcXVpcCIsInNlbmRFdmVudCIsIkV2ZW50TmFtZSIsIlJlZnJlc2hCYWdJbmRleENvdW50IiwiaXNPdmVyRXF1aXBCYWdGb3JJbmRleCIsImluaXREZWMiLCJnZXRCYWdJbmRleENvdW50IiwiYWN0aXZlIiwiZ2V0T3duZWRFcXVpcENvdW50Iiwic3RyaW5nIiwiY2xvc2VVSSIsIlJpY2hUZXh0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUlBLENBQUMsR0FBR0MsT0FBUjtBQUNBLElBQUlDLENBQUMsR0FBR0MsTUFBUjtBQUNBLElBQUlDLENBQUMsR0FBR0MsT0FBUjs7QUFDQSxJQUFJQyxFQUFKO0FBQUEsSUFBT0MsQ0FBQyxHQUFHLFVBQVEsU0FBS0MsU0FBYixLQUEyQkYsRUFBQyxHQUFHLFdBQVNOLENBQVQsRUFBWUUsQ0FBWixFQUFlO0VBQ3JELE9BQU8sQ0FBQ0ksRUFBQyxHQUFHRyxNQUFNLENBQUNDLGNBQVAsSUFBeUI7SUFDakNDLFNBQVMsRUFBRTtFQURzQixhQUcxQkMsS0FIMEIsSUFJckMsVUFBU1osQ0FBVCxFQUFZRSxDQUFaLEVBQWU7SUFDWEYsQ0FBQyxDQUFDVyxTQUFGLEdBQWNULENBQWQ7RUFDSCxDQU5XLElBT1osVUFBU0YsQ0FBVCxFQUFZRSxDQUFaLEVBQWU7SUFDWCxLQUFLLElBQUlFLENBQVQsSUFBY0YsQ0FBZDtNQUFpQk8sTUFBTSxDQUFDSSxTQUFQLENBQWlCQyxjQUFqQixDQUFnQ0MsSUFBaEMsQ0FBcUNiLENBQXJDLEVBQXdDRSxDQUF4QyxNQUErQ0osQ0FBQyxDQUFDSSxDQUFELENBQUQsR0FBT0YsQ0FBQyxDQUFDRSxDQUFELENBQXZEO0lBQWpCO0VBQ0gsQ0FUTSxFQVNKSixDQVRJLEVBU0RFLENBVEMsQ0FBUDtBQVVILENBWHFDLEVBWXRDLFVBQVNGLENBQVQsRUFBWUUsQ0FBWixFQUFlO0VBQ1gsU0FBU0UsQ0FBVCxHQUFhO0lBQ1QsS0FBS1ksV0FBTCxHQUFtQmhCLENBQW5CO0VBQ0g7O0VBQ0RNLEVBQUMsQ0FBQ04sQ0FBRCxFQUFJRSxDQUFKLENBQUQsRUFDQUYs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LENBQS9DLENBakRNLEVBa0RQSyxDQUFDLENBQUMsQ0FBQ3VCLENBQUMsQ0FBQ0osRUFBRSxDQUFDb0IsSUFBSixDQUFGLENBQUQsRUFBZXZELENBQUMsQ0FBQ1csU0FBakIsRUFBNEIsY0FBNUIsRUFBNEMsS0FBSyxDQUFqRCxDQWxETSxFQW1EUEssQ0FBQyxDQUFDLENBQUN1QixDQUFDLENBQUNKLEVBQUUsQ0FBQ29CLElBQUosQ0FBRixDQUFELEVBQWV2RCxDQUFDLENBQUNXLFNBQWpCLEVBQTRCLGdCQUE1QixFQUE4QyxLQUFLLENBQW5ELENBbkRNLEVBb0RQSyxDQUFDLENBQUMsQ0FBQ3FCLENBQUQsQ0FBRCxFQUFNckMsQ0FBTixDQXBERDtBQXFESCxDQTlERyxDQThERG9CLENBQUMsV0E5REEsQ0FaSjs7QUEyRUFsQixDQUFDLFdBQUQsR0FBWXVDLENBQVoiLCJzb3VyY2VSb290IjoiLyIsInNvdXJjZXNDb250ZW50IjpbInZhciB0ID0gcmVxdWlyZTtcbnZhciBlID0gbW9kdWxlO1xudmFyIG8gPSBleHBvcnRzO1xudmFyIGEsIGkgPSB0aGlzICYmIHRoaXMuX19leHRlbmRzIHx8IChhID0gZnVuY3Rpb24odCwgZSkge1xuICAgIHJldHVybiAoYSA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCB7XG4gICAgICAgIF9fcHJvdG9fXzogW11cbiAgICB9XG4gICAgaW5zdGFuY2VvZiBBcnJheSAmJlxuICAgIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgdC5fX3Byb3RvX18gPSBlXG4gICAgfSB8fFxuICAgIGZ1bmN0aW9uKHQsIGUpIHtcbiAgICAgICAgZm9yICh2YXIgbyBpbiBlKSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgbykgJiYgKHRbb10gPSBlW29dKVxuICAgIH0pKHQsIGUpXG59LFxuZnVuY3Rpb24odCwgZSkge1xuICAgIGZ1bmN0aW9uIG8oKSB7XG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IgPSB0XG4gICAgfVxuICAgIGEodCwgZSksXG4gICAgdC5wcm90b3R5cGUgPSBudWxsID09PSBlID8gT2JqZWN0LmNyZWF0ZShlKSA6IChvLnByb3RvdHlwZSA9IGUucHJvdG90eXBlLCBuZXcgbylcbn0pLFxuciA9IHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlIHx8XG5mdW5jdGlvbih0LCBlLCBvLCBhKSB7XG4gICAgdmFyIGksIHIgPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgIG4gPSByIDwgMyA/IGU6IG51bGwgPT09IGEgPyBhID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCBvKSA6IGE7XG4gICAgaWYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIFJlZmxlY3QgJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlKSBuID0gUmVmbGVjdC5kZWNvcmF0ZSh0LCBlLCBvLCBhKTtcbiAgICBlbHNlIGZvciAodmFyIHMgPSB0Lmxlbmd0aCAtIDE7IHMgPj0gMDsgcy0tKShpID0gdFtzXSkgJiYgKG4gPSAociA8IDMgPyBpKG4pIDogciA+IDMgPyBpKGUsIG8sIG4pIDogaShlLCBvKSkgfHwgbik7XG4gICAgcmV0dXJuIHIgPiAzICYmIG4gJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIG8sIG4pLFxuICAgIG5cbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogITBcbn0pO1xudmFyIG4gPSB0KFwiQmFzZVVJXCIpLFxucyA9IHQoXCJTZGtNZ3JcIiksXG5jID0gdChcIlVJTWdyXCIpLFxubCA9IHQoXCJUaW1lVXRpbHNcIiksXG51ID0gdChcIkNvbmZpZ1wiKSxcbnAgPSB0KFwiVHJhY2tEYXRhRXZlbnRcIiksXG5nID0gdChcIkVxdWlwTWdyXCIpLFxuZCA9IHQoXCJHb29kc01hbmFnZXJcIiksXG5oID0gdChcIlBsYXllck1nclwiKSxcbmYgPSBjYy5fZGVjb3JhdG9yLFxubSA9IGYuY2NjbGFzcyxcbnkgPSBmLnByb3BlcnR5LFxudiA9IGZ1bmN0aW9uKHQpIHtcbiAgICBmdW5jdGlvbiBlKCkge1xuICAgICAgICB2YXIgZSA9IG51bGwgIT09IHQgJiYgdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIHJldHVybiBlLkxhYkRlYyA9IG51bGwsXG4gICAgICAgIGUuQnRuU2VsbEVxdWlwID0gbnVsbCxcbiAgICAgICAgZS5CdG5BZGRCYWdJbmRleCA9IG51bGwsXG4gICAgICAgIGUuY3VyVHVyblZpZXcgPSB1LlVJSUQuVUlIb21lLFxuICAgICAgICBlXG4gICAgfVxuICAgIHJldHVybiBpKGUsIHQpLFxuICAgIGUucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbih0KSB7XG4gICAgICAgIHRoaXMuY3VyVHVyblZpZXcgPSB0IHx8IHUuVUlJRC5VSUhvbWVcbiAgICB9LFxuICAgIGUucHJvdG90eXBlLm9uTG9hZCA9IGZ1bmN0aW9uKCkge30sXG4gICAgZS5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5yZWdpc3RlckJ0bkV2ZW50KCksXG4gICAgICAgIHRoaXMuaW5pdFZpZXcoKVxuICAgIH0sXG4gICAgZS5wcm90b3R5cGUucmVnaXN0ZXJCdG5FdmVudCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdCA9IHRoaXM7XG4gICAgICAgIHRoaXMuQnRuU2VsbEVxdWlwLm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX0VORCxcbiAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0LmNsb3NlVmlldygpLFxuICAgICAgICAgICAgYy5VSU1nci5nZXRJbnN0YW5jZSgpLm9wZW5VSSh1LlVJSUQuVUlTZWxsVmlldywgLTEsIHQuY3VyVHVyblZpZXcpXG4gICAgICAgIH0pLFxuICAgICAgICB0aGlzLkJ0bkFkZEJhZ0luZGV4Lm9uKGNjLk5vZGUuRXZlbnRUeXBlLlRPVUNIX0VORCxcbiAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZSA9IGwuVGltZVV0aWxzLkdldFRpbWVCeVNlY29uZCgpLFxuICAgICAgICAgICAgbyA9IGwuVGltZVV0aWxzLkdldFRpbWVCeUhvdXJzMigpO1xuICAgICAgICAgICAgcy5TZGtNZ3IuZ2V0SW5zdGFuY2UoKS5wbGF5VmlkZW8oMSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBhID0gbC5UaW1lVXRpbHMuR2V0VGltZUJ5U2Vjb25kKCksXG4gICAgICAgICAgICAgICAgaSA9IGwuVGltZVV0aWxzLkdldFRpbWVCeUhvdXJzMigpO1xuICAgICAgICAgICAgICAgIGguUGxheWVyTWdyLmdldEluc3RhbmNlKCkuZ2V0VHJhY2tEYXRhKCkudGVzdFRyYWNrVGltZShcImVxdWlwdmFjYW5jeVwiLCBvLCBpLCBlLCBhKSxcbiAgICAgICAgICAgICAgICBoLlBsYXllck1nci5nZXRJbnN0YW5jZSgpLmdldFRyYWNrRGF0YSgpLnlvdW1lbmdUcmFjayhwLlRyYWNrSWQuZXF1aXB2YWNhbmN5KSxcbiAgICAgICAgICAgICAgICBoLlBsYXllck1nci5nZXRJbnN0YW5jZSgpLmdldFRyYWNrRGF0YSgpLnlvdW1lbmdUcmFja05ldyhcImVxdWlwdmFjYW5jeV9iXCIpLFxuICAgICAgICAgICAgICAgIGguUGxheWVyTWdyLmdldEluc3RhbmNlKCkuZ2VVc2VyRGF0YSgpLmFkZGJhZ0luZGV4Q291bnQoKSxcbiAgICAgICAgICAgICAgICB0LmluaXRCdG4oKSxcbiAgICAgICAgICAgICAgICB0LmN1clR1cm5WaWV3ID09IHUuVUlJRC5VSUVxdWlwICYmIHQuc2VuZEV2ZW50KHUuRXZlbnROYW1lLlJlZnJlc2hCYWdJbmRleENvdW50KSxcbiAgICAgICAgICAgICAgICBkLmRlZmF1bHQuZ2V0SW5zdGFuY2UoKS5pc092ZXJFcXVpcEJhZ0ZvckluZGV4KCkgPyB0LmluaXREZWMoKSA6IHQuY2xvc2VWaWV3KClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfSxcbiAgICBlLnByb3RvdHlwZS5pbml0VmlldyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmluaXREZWMoKSxcbiAgICAgICAgdGhpcy5pbml0QnRuKClcbiAgICB9LFxuICAgIGUucHJvdG90eXBlLmluaXRCdG4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaC5QbGF5ZXJNZ3IuZ2V0SW5zdGFuY2UoKS5nZVVzZXJEYXRhKCkuZ2V0QmFnSW5kZXhDb3VudCgpID49IDE0NCAmJiAodGhpcy5CdG5BZGRCYWdJbmRleC5hY3RpdmUgPSAhMSlcbiAgICB9LFxuICAgIGUucHJvdG90eXBlLmluaXREZWMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHQgPSBoLlBsYXllck1nci5nZXRJbnN0YW5jZSgpLmdlVXNlckRhdGEoKS5nZXRCYWdJbmRleENvdW50KCksXG4gICAgICAgIGUgPSBnLmRlZmF1bHQuZ2V0SW5zdGFuY2UoKS5nZXRPd25lZEVxdWlwQ291bnQoKTtcbiAgICAgICAgdGhpcy5MYWJEZWMuc3RyaW5nID0gXCLoo4XlpIfku5PlupPlt7Lmu6HvvIzpg6jliIboo4XlpIc8Y29sb3IgPSAjZmYwMDAwID7vvIhcIiArIChlIC0gdCkgKyBcIu+8iTwvYz7mnKrog73ojrflvpfvvIzlu7rorq7lh7rllK7ml6DnlKjnmoToo4XlpIfmiJbogIXmianlhYXku5PlupPmp73kvY3vvIFcIlxuICAgIH0sXG4gICAgZS5wcm90b3R5cGUuY2xvc2VWaWV3ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHRoaXMuY2xvc2VVSSgpXG4gICAgfSxcbiAgICByKFt5KGNjLlJpY2hUZXh0KV0sIGUucHJvdG90eXBlLCBcIkxhYkRlY1wiLCB2b2lkIDApLFxuICAgIHIoW3koY2MuTm9kZSldLCBlLnByb3RvdHlwZSwgXCJCdG5TZWxsRXF1aXBcIiwgdm9pZCAwKSxcbiAgICByKFt5KGNjLk5vZGUpXSwgZS5wcm90b3R5cGUsIFwiQnRuQWRkQmFnSW5kZXhcIiwgdm9pZCAwKSxcbiAgICByKFttXSwgZSlcbn0gKG4uZGVmYXVsdCk7XG5vLmRlZmF1bHQgPSB2Il19